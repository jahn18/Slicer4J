public class com.yahoo.bullet.storm.grouping.TaskIndexCaptureGroupingTest extends java.lang.Object
{

    public void <init>()
    {
        com.yahoo.bullet.storm.grouping.TaskIndexCaptureGroupingTest r0;

        r0 := @this: com.yahoo.bullet.storm.grouping.TaskIndexCaptureGroupingTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testPrepareTaskIndexMap()
    {
        java.util.Map $r0, $r1, $r9, $r10, $r14, $r18, $r22;
        int $i0, $i2, $i4, $i6, $i8, $i10;
        long $l1, $l3, $l5, $l7, $l9, $l11;
        com.yahoo.bullet.storm.grouping.TaskIndexCaptureGrouping $r2;
        java.lang.Integer[] $r3;
        java.lang.Integer $r4, $r5, $r6, $r7, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25;
        java.util.List $r8;
        java.lang.Object $r12, $r16, $r20, $r24;
        com.yahoo.bullet.storm.grouping.TaskIndexCaptureGroupingTest r26;

        r26 := @this: com.yahoo.bullet.storm.grouping.TaskIndexCaptureGroupingTest;

        $r0 = <com.yahoo.bullet.storm.grouping.TaskIndexCaptureGrouping: java.util.Map TASK_INDEX_MAP>;

        interfaceinvoke $r0.<java.util.Map: void clear()>();

        $r1 = <com.yahoo.bullet.storm.grouping.TaskIndexCaptureGrouping: java.util.Map TASK_INDEX_MAP>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 0L);

        $r2 = new com.yahoo.bullet.storm.grouping.TaskIndexCaptureGrouping;

        specialinvoke $r2.<com.yahoo.bullet.storm.grouping.TaskIndexCaptureGrouping: void <init>()>();

        $r3 = newarray (java.lang.Integer)[4];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(21);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(22);

        $r3[2] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(23);

        $r3[3] = $r7;

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        virtualinvoke $r2.<com.yahoo.bullet.storm.grouping.TaskIndexCaptureGrouping: void prepare(org.apache.storm.task.WorkerTopologyContext,org.apache.storm.generated.GlobalStreamId,java.util.List)>(null, null, $r8);

        $r9 = <com.yahoo.bullet.storm.grouping.TaskIndexCaptureGrouping: java.util.Map TASK_INDEX_MAP>;

        $i2 = interfaceinvoke $r9.<java.util.Map: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 4L);

        $r10 = <com.yahoo.bullet.storm.grouping.TaskIndexCaptureGrouping: java.util.Map TASK_INDEX_MAP>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);

        $r12 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        $r13 = (java.lang.Integer) $r12;

        $i4 = virtualinvoke $r13.<java.lang.Integer: int intValue()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, 0L);

        $r14 = <com.yahoo.bullet.storm.grouping.TaskIndexCaptureGrouping: java.util.Map TASK_INDEX_MAP>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(21);

        $r16 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15);

        $r17 = (java.lang.Integer) $r16;

        $i6 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, 1L);

        $r18 = <com.yahoo.bullet.storm.grouping.TaskIndexCaptureGrouping: java.util.Map TASK_INDEX_MAP>;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(22);

        $r20 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>($r19);

        $r21 = (java.lang.Integer) $r20;

        $i8 = virtualinvoke $r21.<java.lang.Integer: int intValue()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, 2L);

        $r22 = <com.yahoo.bullet.storm.grouping.TaskIndexCaptureGrouping: java.util.Map TASK_INDEX_MAP>;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(23);

        $r24 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>($r23);

        $r25 = (java.lang.Integer) $r24;

        $i10 = virtualinvoke $r25.<java.lang.Integer: int intValue()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l11, 3L);

        return;
    }

    public void testChooseTasksThrows()
    {
        com.yahoo.bullet.storm.grouping.TaskIndexCaptureGrouping $r0;
        com.yahoo.bullet.storm.grouping.TaskIndexCaptureGroupingTest r2;

        r2 := @this: com.yahoo.bullet.storm.grouping.TaskIndexCaptureGroupingTest;

        $r0 = new com.yahoo.bullet.storm.grouping.TaskIndexCaptureGrouping;

        specialinvoke $r0.<com.yahoo.bullet.storm.grouping.TaskIndexCaptureGrouping: void <init>()>();

        virtualinvoke $r0.<com.yahoo.bullet.storm.grouping.TaskIndexCaptureGrouping: java.util.List chooseTasks(int,java.util.List)>(0, null);

        return;
    }
}
