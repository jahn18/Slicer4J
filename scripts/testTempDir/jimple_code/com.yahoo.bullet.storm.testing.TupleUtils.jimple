public class com.yahoo.bullet.storm.testing.TupleUtils extends java.lang.Object
{

    public void <init>()
    {
        com.yahoo.bullet.storm.testing.TupleUtils r0;

        r0 := @this: com.yahoo.bullet.storm.testing.TupleUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient org.apache.storm.tuple.Tuple makeIDTuple(com.yahoo.bullet.storm.TupleClassifier$Type, java.lang.Object[])
    {
        com.yahoo.bullet.storm.TupleClassifier$Type r0;
        java.lang.Object[] r1;
        org.apache.storm.tuple.Tuple r2;
        java.lang.String $r3, $r6;
        org.mockito.stubbing.OngoingStubbing $r4;
        java.lang.Object $r5;

        r0 := @parameter0: com.yahoo.bullet.storm.TupleClassifier$Type;

        r1 := @parameter1: java.lang.Object[];

        r2 = staticinvoke <com.yahoo.bullet.storm.testing.TupleUtils: org.apache.storm.tuple.Tuple makeTuple(com.yahoo.bullet.storm.TupleClassifier$Type,java.lang.Object[])>(r0, r1);

        $r3 = interfaceinvoke r2.<org.apache.storm.tuple.Tuple: java.lang.String getString(int)>(0);

        $r4 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r3);

        $r5 = r1[0];

        $r6 = (java.lang.String) $r5;

        interfaceinvoke $r4.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r6);

        return r2;
    }

    private static transient org.apache.storm.tuple.Tuple pushInto(org.apache.storm.tuple.Tuple, java.lang.Object[])
    {
        org.apache.storm.tuple.Tuple r0;
        java.util.List $r1, $r4;
        org.mockito.stubbing.OngoingStubbing $r2, $r7, $r11, $r15;
        java.lang.Object[] r3;
        int $i0, $i1, $i2, i3;
        java.lang.Integer $r6, $r8;
        java.lang.Object $r10, $r12, $r16;
        java.lang.String $r14, $r17;

        r0 := @parameter0: org.apache.storm.tuple.Tuple;

        r3 := @parameter1: java.lang.Object[];

        $r1 = interfaceinvoke r0.<org.apache.storm.tuple.Tuple: java.util.List getValues()>();

        $r2 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r1);

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r3);

        interfaceinvoke $r2.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r4);

        $i0 = interfaceinvoke r0.<org.apache.storm.tuple.Tuple: int size()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r7 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r6);

        $i1 = lengthof r3;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r7.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r8);

        i3 = 0;

     label1:
        $i2 = lengthof r3;

        if i3 >= $i2 goto label2;

        $r10 = interfaceinvoke r0.<org.apache.storm.tuple.Tuple: java.lang.Object getValue(int)>(i3);

        $r11 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r10);

        $r12 = r3[i3];

        interfaceinvoke $r11.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r12);

        $r14 = interfaceinvoke r0.<org.apache.storm.tuple.Tuple: java.lang.String getString(int)>(i3);

        $r15 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r14);

        $r16 = r3[i3];

        $r17 = staticinvoke <java.util.Objects: java.lang.String toString(java.lang.Object)>($r16);

        interfaceinvoke $r15.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r17);

        i3 = i3 + 1;

        goto label1;

     label2:
        return r0;
    }

    public static transient org.apache.storm.tuple.Tuple makeTuple(java.lang.Object[])
    {
        java.lang.Object $r0;
        org.apache.storm.tuple.Tuple r1, $r3;
        java.lang.Object[] r2;

        r2 := @parameter0: java.lang.Object[];

        $r0 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/storm/tuple/TupleImpl;");

        r1 = (org.apache.storm.tuple.Tuple) $r0;

        $r3 = staticinvoke <com.yahoo.bullet.storm.testing.TupleUtils: org.apache.storm.tuple.Tuple pushInto(org.apache.storm.tuple.Tuple,java.lang.Object[])>(r1, r2);

        return $r3;
    }

    public static transient org.apache.storm.tuple.Tuple makeTuple(com.yahoo.bullet.storm.TupleClassifier$Type, java.lang.Object[])
    {
        com.yahoo.bullet.storm.TupleClassifier$Type r0;
        java.lang.String $r1, $r2;
        java.lang.Object[] r3;
        org.apache.storm.tuple.Tuple $r4;

        r0 := @parameter0: com.yahoo.bullet.storm.TupleClassifier$Type;

        r3 := @parameter1: java.lang.Object[];

        $r1 = virtualinvoke r0.<com.yahoo.bullet.storm.TupleClassifier$Type: java.lang.String getComponent()>();

        $r2 = virtualinvoke r0.<com.yahoo.bullet.storm.TupleClassifier$Type: java.lang.String getStream()>();

        $r4 = staticinvoke <com.yahoo.bullet.storm.testing.TupleUtils: org.apache.storm.tuple.Tuple makeRawTuple(java.lang.String,java.lang.String,java.lang.Object[])>($r1, $r2, r3);

        return $r4;
    }

    public static transient org.apache.storm.tuple.Tuple makeRawTuple(java.lang.String, java.lang.String, java.lang.Object[])
    {
        java.lang.Object $r0;
        org.apache.storm.tuple.Tuple r1, $r11;
        java.lang.String $r2, r4, $r6, r8;
        org.mockito.stubbing.OngoingStubbing $r3, $r7;
        java.lang.Object[] r10;

        r4 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

        r10 := @parameter2: java.lang.Object[];

        $r0 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/storm/tuple/TupleImpl;");

        r1 = (org.apache.storm.tuple.Tuple) $r0;

        $r2 = interfaceinvoke r1.<org.apache.storm.tuple.Tuple: java.lang.String getSourceComponent()>();

        $r3 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r2);

        interfaceinvoke $r3.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r4);

        $r6 = interfaceinvoke r1.<org.apache.storm.tuple.Tuple: java.lang.String getSourceStreamId()>();

        $r7 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r6);

        interfaceinvoke $r7.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r8);

        $r11 = staticinvoke <com.yahoo.bullet.storm.testing.TupleUtils: org.apache.storm.tuple.Tuple pushInto(org.apache.storm.tuple.Tuple,java.lang.Object[])>(r1, r10);

        return $r11;
    }
}
