public class com.yahoo.bullet.storm.QuerySpoutTest extends java.lang.Object
{
    private com.yahoo.bullet.storm.testing.CustomEmitter emitter;
    private com.yahoo.bullet.storm.QuerySpout spout;
    private com.yahoo.bullet.storm.testing.CustomSubscriber subscriber;
    private com.yahoo.bullet.storm.testing.CustomTopologyContext context;

    public void <init>()
    {
        com.yahoo.bullet.storm.QuerySpoutTest r0;

        r0 := @this: com.yahoo.bullet.storm.QuerySpoutTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setup()
    {
        com.yahoo.bullet.storm.QuerySpoutTest r0;
        com.yahoo.bullet.storm.testing.CustomEmitter $r1, $r9;
        com.yahoo.bullet.storm.BulletStormConfig $r2;
        java.lang.Boolean $r4;
        com.yahoo.bullet.storm.testing.CustomTopologyContext $r6, $r10;
        java.util.HashMap $r7;
        com.yahoo.bullet.storm.QuerySpout $r8, $r12, $r13, $r14;
        org.apache.storm.topology.IRichSpout $r11;
        com.yahoo.bullet.pubsub.Subscriber $r15;
        com.yahoo.bullet.storm.testing.CustomSubscriber $r16;

        r0 := @this: com.yahoo.bullet.storm.QuerySpoutTest;

        $r1 = new com.yahoo.bullet.storm.testing.CustomEmitter;

        specialinvoke $r1.<com.yahoo.bullet.storm.testing.CustomEmitter: void <init>()>();

        r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter> = $r1;

        $r2 = new com.yahoo.bullet.storm.BulletStormConfig;

        specialinvoke $r2.<com.yahoo.bullet.storm.BulletStormConfig: void <init>(java.lang.String)>("test_config.yaml");

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r2.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.metrics.built.in.enable", $r4);

        virtualinvoke $r2.<com.yahoo.bullet.storm.BulletStormConfig: com.yahoo.bullet.storm.BulletStormConfig validate()>();

        $r6 = new com.yahoo.bullet.storm.testing.CustomTopologyContext;

        specialinvoke $r6.<com.yahoo.bullet.storm.testing.CustomTopologyContext: void <init>()>();

        r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomTopologyContext context> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = new com.yahoo.bullet.storm.QuerySpout;

        specialinvoke $r8.<com.yahoo.bullet.storm.QuerySpout: void <init>(com.yahoo.bullet.storm.BulletStormConfig)>($r2);

        $r10 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomTopologyContext context>;

        $r9 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r11 = staticinvoke <com.yahoo.bullet.storm.testing.ComponentUtils: org.apache.storm.topology.IRichSpout open(java.util.Map,org.apache.storm.topology.IRichSpout,org.apache.storm.task.TopologyContext,org.apache.storm.spout.ISpoutOutputCollector)>($r7, $r8, $r10, $r9);

        $r12 = (com.yahoo.bullet.storm.QuerySpout) $r11;

        r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout> = $r12;

        $r13 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r13.<com.yahoo.bullet.storm.QuerySpout: void activate()>();

        $r14 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        $r15 = virtualinvoke $r14.<com.yahoo.bullet.storm.QuerySpout: com.yahoo.bullet.pubsub.Subscriber getSubscriber()>();

        $r16 = (com.yahoo.bullet.storm.testing.CustomSubscriber) $r15;

        r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber> = $r16;

        return;
    }

    public void testFailingToCreatePubSub()
    {
        com.yahoo.bullet.storm.BulletStormConfig $r0;
        com.yahoo.bullet.storm.QuerySpout $r2;
        com.yahoo.bullet.storm.QuerySpoutTest r4;
        com.yahoo.bullet.storm.testing.CustomEmitter $r5;

        r4 := @this: com.yahoo.bullet.storm.QuerySpoutTest;

        $r0 = new com.yahoo.bullet.storm.BulletStormConfig;

        specialinvoke $r0.<com.yahoo.bullet.storm.BulletStormConfig: void <init>(java.lang.String)>("test_config.yaml");

        virtualinvoke $r0.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.pubsub.class.name", "fake.class");

        $r2 = new com.yahoo.bullet.storm.QuerySpout;

        specialinvoke $r2.<com.yahoo.bullet.storm.QuerySpout: void <init>(com.yahoo.bullet.storm.BulletStormConfig)>($r0);

        $r5 = r4.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        staticinvoke <com.yahoo.bullet.storm.testing.ComponentUtils: org.apache.storm.topology.IRichSpout open(org.apache.storm.topology.IRichSpout,com.yahoo.bullet.storm.testing.CustomEmitter)>($r2, $r5);

        virtualinvoke $r2.<com.yahoo.bullet.storm.QuerySpout: void activate()>();

        return;
    }

    public void testNextTupleMessagesAreReceivedAndTupleIsEmitted()
    {
        com.yahoo.bullet.pubsub.PubSubMessage $r0, $r3;
        com.yahoo.bullet.pubsub.Metadata $r1, $r4;
        com.yahoo.bullet.storm.QuerySpoutTest r6;
        com.yahoo.bullet.pubsub.PubSubMessage[] $r7;
        com.yahoo.bullet.storm.testing.CustomSubscriber $r8, $r9, $r14, $r16, $r26, $r28, $r31;
        java.util.List $r10, $r12, $r15, $r17, $r24, $r27, $r29, $r32, $r39;
        int $i0, $i2, $i4, $i6, $i8, $i10;
        long $l1, $l3, $l5, $l7, $l9, $l11;
        com.yahoo.bullet.storm.testing.CustomEmitter $r11, $r23, $r38;
        com.yahoo.bullet.storm.QuerySpout $r13, $r25;
        java.lang.Object $r18, $r30, $r33;
        java.lang.Object[] $r19, $r34;
        com.yahoo.bullet.storm.TupleClassifier$Type $r20, $r35;
        java.lang.String $r21, $r36;

        r6 := @this: com.yahoo.bullet.storm.QuerySpoutTest;

        $r0 = new com.yahoo.bullet.pubsub.PubSubMessage;

        $r1 = new com.yahoo.bullet.pubsub.Metadata;

        specialinvoke $r1.<com.yahoo.bullet.pubsub.Metadata: void <init>()>();

        specialinvoke $r0.<com.yahoo.bullet.pubsub.PubSubMessage: void <init>(java.lang.String,java.io.Serializable,com.yahoo.bullet.pubsub.Metadata)>("42", "This is a PubSubMessage", $r1);

        $r3 = new com.yahoo.bullet.pubsub.PubSubMessage;

        $r4 = new com.yahoo.bullet.pubsub.Metadata;

        specialinvoke $r4.<com.yahoo.bullet.pubsub.Metadata: void <init>()>();

        specialinvoke $r3.<com.yahoo.bullet.pubsub.PubSubMessage: void <init>(java.lang.String,java.io.Serializable,com.yahoo.bullet.pubsub.Metadata)>("43", "This is also a PubSubMessage", $r4);

        $r8 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r7 = newarray (com.yahoo.bullet.pubsub.PubSubMessage)[2];

        $r7[0] = $r0;

        $r7[1] = $r3;

        virtualinvoke $r8.<com.yahoo.bullet.storm.testing.CustomSubscriber: void addMessages(com.yahoo.bullet.pubsub.PubSubMessage[])>($r7);

        $r9 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r10 = virtualinvoke $r9.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $i0 = interfaceinvoke $r10.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 0L);

        $r11 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r12 = virtualinvoke $r11.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i2 = interfaceinvoke $r12.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 0L);

        $r13 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r13.<com.yahoo.bullet.storm.QuerySpout: void nextTuple()>();

        $r14 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r15 = virtualinvoke $r14.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $i4 = interfaceinvoke $r15.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, 1L);

        $r16 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r17 = virtualinvoke $r16.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r0);

        $r20 = <com.yahoo.bullet.storm.TupleClassifier$Type: com.yahoo.bullet.storm.TupleClassifier$Type QUERY_TUPLE>;

        $r19 = newarray (java.lang.Object)[2];

        $r21 = virtualinvoke $r0.<com.yahoo.bullet.pubsub.PubSubMessage: java.lang.String getId()>();

        $r19[0] = $r21;

        $r19[1] = $r0;

        staticinvoke <com.yahoo.bullet.storm.testing.TupleUtils: org.apache.storm.tuple.Tuple makeTuple(com.yahoo.bullet.storm.TupleClassifier$Type,java.lang.Object[])>($r20, $r19);

        $r23 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r24 = virtualinvoke $r23.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i6 = interfaceinvoke $r24.<java.util.List: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, 1L);

        $r25 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r25.<com.yahoo.bullet.storm.QuerySpout: void nextTuple()>();

        $r26 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r27 = virtualinvoke $r26.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $i8 = interfaceinvoke $r27.<java.util.List: int size()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, 2L);

        $r28 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r29 = virtualinvoke $r28.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $r30 = interfaceinvoke $r29.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r30, $r0);

        $r31 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r32 = virtualinvoke $r31.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $r33 = interfaceinvoke $r32.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r33, $r3);

        $r35 = <com.yahoo.bullet.storm.TupleClassifier$Type: com.yahoo.bullet.storm.TupleClassifier$Type QUERY_TUPLE>;

        $r34 = newarray (java.lang.Object)[2];

        $r36 = virtualinvoke $r3.<com.yahoo.bullet.pubsub.PubSubMessage: java.lang.String getId()>();

        $r34[0] = $r36;

        $r34[1] = $r3;

        staticinvoke <com.yahoo.bullet.storm.testing.TupleUtils: org.apache.storm.tuple.Tuple makeTuple(com.yahoo.bullet.storm.TupleClassifier$Type,java.lang.Object[])>($r35, $r34);

        $r38 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r39 = virtualinvoke $r38.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i10 = interfaceinvoke $r39.<java.util.List: int size()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l11, 2L);

        return;
    }

    public void testNextTupleDoesNothingWhenSubscriberReceivesNull()
    {
        com.yahoo.bullet.storm.QuerySpoutTest r0;
        com.yahoo.bullet.pubsub.PubSubMessage[] $r1;
        com.yahoo.bullet.storm.testing.CustomSubscriber $r2, $r3, $r8, $r13;
        java.util.List $r4, $r6, $r9, $r11, $r14, $r16;
        int $i0, $i2, $i4, $i6, $i8, $i10;
        long $l1, $l3, $l5, $l7, $l9, $l11;
        com.yahoo.bullet.storm.testing.CustomEmitter $r5, $r10, $r15;
        com.yahoo.bullet.storm.QuerySpout $r7, $r12;

        r0 := @this: com.yahoo.bullet.storm.QuerySpoutTest;

        $r2 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r1 = newarray (com.yahoo.bullet.pubsub.PubSubMessage)[2];

        $r1[0] = null;

        $r1[1] = null;

        virtualinvoke $r2.<com.yahoo.bullet.storm.testing.CustomSubscriber: void addMessages(com.yahoo.bullet.pubsub.PubSubMessage[])>($r1);

        $r3 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r4 = virtualinvoke $r3.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 0L);

        $r5 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r6 = virtualinvoke $r5.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 0L);

        $r7 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r7.<com.yahoo.bullet.storm.QuerySpout: void nextTuple()>();

        $r8 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r9 = virtualinvoke $r8.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $i4 = interfaceinvoke $r9.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, 1L);

        $r10 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r11 = virtualinvoke $r10.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i6 = interfaceinvoke $r11.<java.util.List: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, 0L);

        $r12 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r12.<com.yahoo.bullet.storm.QuerySpout: void nextTuple()>();

        $r13 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r14 = virtualinvoke $r13.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $i8 = interfaceinvoke $r14.<java.util.List: int size()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, 2L);

        $r15 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r16 = virtualinvoke $r15.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i10 = interfaceinvoke $r16.<java.util.List: int size()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l11, 0L);

        return;
    }

    public void testNextTupleDoesNothingWhenSubscriberThrows()
    {
        com.yahoo.bullet.storm.QuerySpoutTest r0;
        com.yahoo.bullet.storm.testing.CustomSubscriber $r1, $r6, $r11;
        java.util.List $r2, $r4, $r7, $r9, $r12, $r14;
        int $i0, $i2, $i4, $i6, $i8, $i10;
        long $l1, $l3, $l5, $l7, $l9, $l11;
        com.yahoo.bullet.storm.testing.CustomEmitter $r3, $r8, $r13;
        com.yahoo.bullet.storm.QuerySpout $r5, $r10;

        r0 := @this: com.yahoo.bullet.storm.QuerySpoutTest;

        $r1 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r2 = virtualinvoke $r1.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 0L);

        $r3 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r4 = virtualinvoke $r3.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 0L);

        $r5 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r5.<com.yahoo.bullet.storm.QuerySpout: void nextTuple()>();

        $r6 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r7 = virtualinvoke $r6.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $i4 = interfaceinvoke $r7.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, 0L);

        $r8 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r9 = virtualinvoke $r8.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i6 = interfaceinvoke $r9.<java.util.List: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, 0L);

        $r10 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r10.<com.yahoo.bullet.storm.QuerySpout: void nextTuple()>();

        $r11 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r12 = virtualinvoke $r11.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $i8 = interfaceinvoke $r12.<java.util.List: int size()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, 0L);

        $r13 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r14 = virtualinvoke $r13.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i10 = interfaceinvoke $r14.<java.util.List: int size()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l11, 0L);

        return;
    }

    public void testNextTupleCommitsWhenMetadataIsNull()
    {
        com.yahoo.bullet.storm.QuerySpoutTest r0;
        com.yahoo.bullet.pubsub.PubSubMessage[] $r1;
        com.yahoo.bullet.pubsub.PubSubMessage $r2;
        com.yahoo.bullet.pubsub.Metadata $r3;
        com.yahoo.bullet.storm.testing.CustomSubscriber $r4, $r5, $r7, $r10, $r12;
        java.util.List $r6, $r8, $r11, $r13;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;
        com.yahoo.bullet.storm.QuerySpout $r9;

        r0 := @this: com.yahoo.bullet.storm.QuerySpoutTest;

        $r4 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r1 = newarray (com.yahoo.bullet.pubsub.PubSubMessage)[1];

        $r2 = new com.yahoo.bullet.pubsub.PubSubMessage;

        $r3 = (com.yahoo.bullet.pubsub.Metadata) null;

        specialinvoke $r2.<com.yahoo.bullet.pubsub.PubSubMessage: void <init>(java.lang.String,java.io.Serializable,com.yahoo.bullet.pubsub.Metadata)>("", "", $r3);

        $r1[0] = $r2;

        virtualinvoke $r4.<com.yahoo.bullet.storm.testing.CustomSubscriber: void addMessages(com.yahoo.bullet.pubsub.PubSubMessage[])>($r1);

        $r5 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r6 = virtualinvoke $r5.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 0L);

        $r7 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r8 = virtualinvoke $r7.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getCommitted()>();

        $i2 = interfaceinvoke $r8.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 0L);

        $r9 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r9.<com.yahoo.bullet.storm.QuerySpout: void nextTuple()>();

        $r10 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r11 = virtualinvoke $r10.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $i4 = interfaceinvoke $r11.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, 1L);

        $r12 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r13 = virtualinvoke $r12.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getCommitted()>();

        $i6 = interfaceinvoke $r13.<java.util.List: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, 1L);

        return;
    }

    public void testSignalOnlyMessagesAreSentOnTheMetadataStream()
    {
        com.yahoo.bullet.pubsub.PubSubMessage $r0, $r3, $r6;
        com.yahoo.bullet.pubsub.Metadata$Signal $r1, $r4;
        com.yahoo.bullet.pubsub.Metadata $r7, $r36, $r41, $r46;
        byte[] $r8;
        com.yahoo.bullet.storm.QuerySpoutTest r10;
        com.yahoo.bullet.pubsub.PubSubMessage[] $r11;
        com.yahoo.bullet.storm.testing.CustomSubscriber $r12, $r13, $r20, $r22, $r25, $r28;
        java.util.List $r14, $r16, $r21, $r23, $r26, $r29, $r32;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;
        com.yahoo.bullet.storm.testing.CustomEmitter $r15, $r31;
        com.yahoo.bullet.storm.QuerySpout $r17, $r18, $r19;
        java.lang.Object $r24, $r27, $r30;
        java.lang.Object[] $r33, $r38, $r43;
        com.yahoo.bullet.storm.TupleClassifier$Type $r34, $r39, $r44;
        java.lang.String $r35, $r40, $r45;

        r10 := @this: com.yahoo.bullet.storm.QuerySpoutTest;

        $r0 = new com.yahoo.bullet.pubsub.PubSubMessage;

        $r1 = <com.yahoo.bullet.pubsub.Metadata$Signal: com.yahoo.bullet.pubsub.Metadata$Signal KILL>;

        specialinvoke $r0.<com.yahoo.bullet.pubsub.PubSubMessage: void <init>(java.lang.String,com.yahoo.bullet.pubsub.Metadata$Signal)>("42", $r1);

        $r3 = new com.yahoo.bullet.pubsub.PubSubMessage;

        $r4 = <com.yahoo.bullet.pubsub.Metadata$Signal: com.yahoo.bullet.pubsub.Metadata$Signal COMPLETE>;

        specialinvoke $r3.<com.yahoo.bullet.pubsub.PubSubMessage: void <init>(java.lang.String,com.yahoo.bullet.pubsub.Metadata$Signal)>("43", $r4);

        $r6 = new com.yahoo.bullet.pubsub.PubSubMessage;

        $r8 = (byte[]) null;

        $r7 = new com.yahoo.bullet.pubsub.Metadata;

        specialinvoke $r7.<com.yahoo.bullet.pubsub.Metadata: void <init>()>();

        specialinvoke $r6.<com.yahoo.bullet.pubsub.PubSubMessage: void <init>(java.lang.String,java.io.Serializable,com.yahoo.bullet.pubsub.Metadata)>("44", $r8, $r7);

        $r12 = r10.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r11 = newarray (com.yahoo.bullet.pubsub.PubSubMessage)[3];

        $r11[0] = $r0;

        $r11[1] = $r3;

        $r11[2] = $r6;

        virtualinvoke $r12.<com.yahoo.bullet.storm.testing.CustomSubscriber: void addMessages(com.yahoo.bullet.pubsub.PubSubMessage[])>($r11);

        $r13 = r10.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r14 = virtualinvoke $r13.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $i0 = interfaceinvoke $r14.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 0L);

        $r15 = r10.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r16 = virtualinvoke $r15.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i2 = interfaceinvoke $r16.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 0L);

        $r17 = r10.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r17.<com.yahoo.bullet.storm.QuerySpout: void nextTuple()>();

        $r18 = r10.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r18.<com.yahoo.bullet.storm.QuerySpout: void nextTuple()>();

        $r19 = r10.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r19.<com.yahoo.bullet.storm.QuerySpout: void nextTuple()>();

        $r20 = r10.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r21 = virtualinvoke $r20.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $i4 = interfaceinvoke $r21.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, 3L);

        $r22 = r10.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r23 = virtualinvoke $r22.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $r24 = interfaceinvoke $r23.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r24, $r0);

        $r25 = r10.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r26 = virtualinvoke $r25.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $r27 = interfaceinvoke $r26.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r27, $r3);

        $r28 = r10.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r29 = virtualinvoke $r28.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $r30 = interfaceinvoke $r29.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r30, $r6);

        $r31 = r10.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r32 = virtualinvoke $r31.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i6 = interfaceinvoke $r32.<java.util.List: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, 3L);

        $r34 = <com.yahoo.bullet.storm.TupleClassifier$Type: com.yahoo.bullet.storm.TupleClassifier$Type METADATA_TUPLE>;

        $r33 = newarray (java.lang.Object)[2];

        $r35 = virtualinvoke $r0.<com.yahoo.bullet.pubsub.PubSubMessage: java.lang.String getId()>();

        $r33[0] = $r35;

        $r36 = virtualinvoke $r0.<com.yahoo.bullet.pubsub.PubSubMessage: com.yahoo.bullet.pubsub.Metadata getMetadata()>();

        $r33[1] = $r36;

        staticinvoke <com.yahoo.bullet.storm.testing.TupleUtils: org.apache.storm.tuple.Tuple makeTuple(com.yahoo.bullet.storm.TupleClassifier$Type,java.lang.Object[])>($r34, $r33);

        $r39 = <com.yahoo.bullet.storm.TupleClassifier$Type: com.yahoo.bullet.storm.TupleClassifier$Type METADATA_TUPLE>;

        $r38 = newarray (java.lang.Object)[2];

        $r40 = virtualinvoke $r3.<com.yahoo.bullet.pubsub.PubSubMessage: java.lang.String getId()>();

        $r38[0] = $r40;

        $r41 = virtualinvoke $r3.<com.yahoo.bullet.pubsub.PubSubMessage: com.yahoo.bullet.pubsub.Metadata getMetadata()>();

        $r38[1] = $r41;

        staticinvoke <com.yahoo.bullet.storm.testing.TupleUtils: org.apache.storm.tuple.Tuple makeTuple(com.yahoo.bullet.storm.TupleClassifier$Type,java.lang.Object[])>($r39, $r38);

        $r44 = <com.yahoo.bullet.storm.TupleClassifier$Type: com.yahoo.bullet.storm.TupleClassifier$Type METADATA_TUPLE>;

        $r43 = newarray (java.lang.Object)[2];

        $r45 = virtualinvoke $r6.<com.yahoo.bullet.pubsub.PubSubMessage: java.lang.String getId()>();

        $r43[0] = $r45;

        $r46 = virtualinvoke $r6.<com.yahoo.bullet.pubsub.PubSubMessage: com.yahoo.bullet.pubsub.Metadata getMetadata()>();

        $r43[1] = $r46;

        staticinvoke <com.yahoo.bullet.storm.testing.TupleUtils: org.apache.storm.tuple.Tuple makeTuple(com.yahoo.bullet.storm.TupleClassifier$Type,java.lang.Object[])>($r44, $r43);

        return;
    }

    public void testDeclaredOutputFields()
    {
        com.yahoo.bullet.storm.testing.CustomOutputFieldsDeclarer $r0;
        com.yahoo.bullet.storm.QuerySpoutTest r2;
        com.yahoo.bullet.storm.QuerySpout $r3;
        org.apache.storm.tuple.Fields $r4, $r7;
        java.lang.String[] $r5, $r8;

        r2 := @this: com.yahoo.bullet.storm.QuerySpoutTest;

        $r0 = new com.yahoo.bullet.storm.testing.CustomOutputFieldsDeclarer;

        specialinvoke $r0.<com.yahoo.bullet.storm.testing.CustomOutputFieldsDeclarer: void <init>()>();

        $r3 = r2.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r3.<com.yahoo.bullet.storm.QuerySpout: void declareOutputFields(org.apache.storm.topology.OutputFieldsDeclarer)>($r0);

        $r4 = new org.apache.storm.tuple.Fields;

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = "id";

        $r5[1] = "query";

        specialinvoke $r4.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r5);

        $r7 = new org.apache.storm.tuple.Fields;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "id";

        $r8[1] = "metadata";

        specialinvoke $r7.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r8);

        return;
    }

    public void testAckCallsSubscriberCommit()
    {
        com.yahoo.bullet.storm.QuerySpoutTest r0;
        com.yahoo.bullet.storm.QuerySpout $r1, $r2, $r3;
        com.yahoo.bullet.storm.testing.CustomSubscriber $r4, $r6, $r9, $r12;
        java.util.List $r5, $r7, $r10, $r13;
        int $i0;
        long $l1;
        java.lang.Object $r8, $r11, $r14;

        r0 := @this: com.yahoo.bullet.storm.QuerySpoutTest;

        $r1 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r1.<com.yahoo.bullet.storm.QuerySpout: void ack(java.lang.Object)>("42");

        $r2 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r2.<com.yahoo.bullet.storm.QuerySpout: void ack(java.lang.Object)>("43");

        $r3 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r3.<com.yahoo.bullet.storm.QuerySpout: void ack(java.lang.Object)>("44");

        $r4 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r5 = virtualinvoke $r4.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getCommitted()>();

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 3L);

        $r6 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r7 = virtualinvoke $r6.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getCommitted()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, "42");

        $r9 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r10 = virtualinvoke $r9.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getCommitted()>();

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, "43");

        $r12 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r13 = virtualinvoke $r12.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getCommitted()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, "44");

        return;
    }

    public void testFailCallsSubscriberFail()
    {
        com.yahoo.bullet.storm.QuerySpoutTest r0;
        com.yahoo.bullet.storm.QuerySpout $r1, $r2, $r3;
        com.yahoo.bullet.storm.testing.CustomSubscriber $r4, $r6, $r9, $r12;
        java.util.List $r5, $r7, $r10, $r13;
        int $i0;
        long $l1;
        java.lang.Object $r8, $r11, $r14;

        r0 := @this: com.yahoo.bullet.storm.QuerySpoutTest;

        $r1 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r1.<com.yahoo.bullet.storm.QuerySpout: void fail(java.lang.Object)>("42");

        $r2 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r2.<com.yahoo.bullet.storm.QuerySpout: void fail(java.lang.Object)>("43");

        $r3 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r3.<com.yahoo.bullet.storm.QuerySpout: void fail(java.lang.Object)>("44");

        $r4 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r5 = virtualinvoke $r4.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getFailed()>();

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 3L);

        $r6 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r7 = virtualinvoke $r6.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getFailed()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, "42");

        $r9 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r10 = virtualinvoke $r9.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getFailed()>();

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, "43");

        $r12 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r13 = virtualinvoke $r12.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getFailed()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, "44");

        return;
    }

    public void testCloseDoesNotCallSubscriberClose()
    {
        com.yahoo.bullet.storm.QuerySpoutTest r0;
        com.yahoo.bullet.storm.QuerySpout $r1;
        com.yahoo.bullet.storm.testing.CustomSubscriber $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: com.yahoo.bullet.storm.QuerySpoutTest;

        $r1 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r1.<com.yahoo.bullet.storm.QuerySpout: void close()>();

        $r2 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $z0 = virtualinvoke $r2.<com.yahoo.bullet.storm.testing.CustomSubscriber: boolean isClosed()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r3 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $z1 = virtualinvoke $r3.<com.yahoo.bullet.storm.testing.CustomSubscriber: boolean isThrown()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        return;
    }

    public void testDeactivateCallsSubscriberClose()
    {
        com.yahoo.bullet.storm.QuerySpoutTest r0;
        com.yahoo.bullet.storm.QuerySpout $r1, $r4;
        com.yahoo.bullet.storm.testing.CustomSubscriber $r2, $r3, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.yahoo.bullet.storm.QuerySpoutTest;

        $r1 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r1.<com.yahoo.bullet.storm.QuerySpout: void deactivate()>();

        $r2 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $z0 = virtualinvoke $r2.<com.yahoo.bullet.storm.testing.CustomSubscriber: boolean isClosed()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r3 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $z1 = virtualinvoke $r3.<com.yahoo.bullet.storm.testing.CustomSubscriber: boolean isThrown()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $r4 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r4.<com.yahoo.bullet.storm.QuerySpout: void deactivate()>();

        $r5 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $z2 = virtualinvoke $r5.<com.yahoo.bullet.storm.testing.CustomSubscriber: boolean isClosed()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r6 = r0.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $z3 = virtualinvoke $r6.<com.yahoo.bullet.storm.testing.CustomSubscriber: boolean isThrown()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        return;
    }

    public void testForcedReplaySignal()
    {
        com.yahoo.bullet.pubsub.PubSubMessage $r0;
        com.yahoo.bullet.pubsub.Metadata $r1;
        com.yahoo.bullet.pubsub.Metadata$Signal $r2;
        byte[] $r3;
        com.yahoo.bullet.storm.QuerySpoutTest r5;
        com.yahoo.bullet.pubsub.PubSubMessage[] $r6;
        com.yahoo.bullet.storm.testing.CustomSubscriber $r7, $r17, $r19;
        com.yahoo.bullet.storm.QuerySpout $r8;
        com.yahoo.bullet.storm.testing.CustomEmitter $r9, $r11;
        java.util.List $r10, $r12, $r15, $r18, $r20;
        int $i0, $i2;
        long $l1, $l3;
        java.lang.Object $r13, $r16, $r21;
        com.yahoo.bullet.storm.testing.CustomEmitter$Triplet $r14;

        r5 := @this: com.yahoo.bullet.storm.QuerySpoutTest;

        $r0 = new com.yahoo.bullet.pubsub.PubSubMessage;

        $r3 = (byte[]) null;

        $r1 = new com.yahoo.bullet.pubsub.Metadata;

        $r2 = <com.yahoo.bullet.pubsub.Metadata$Signal: com.yahoo.bullet.pubsub.Metadata$Signal REPLAY>;

        specialinvoke $r1.<com.yahoo.bullet.pubsub.Metadata: void <init>(com.yahoo.bullet.pubsub.Metadata$Signal,java.io.Serializable)>($r2, null);

        specialinvoke $r0.<com.yahoo.bullet.pubsub.PubSubMessage: void <init>(java.lang.String,java.io.Serializable,com.yahoo.bullet.pubsub.Metadata)>("123", $r3, $r1);

        $r7 = r5.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r6 = newarray (com.yahoo.bullet.pubsub.PubSubMessage)[1];

        $r6[0] = $r0;

        virtualinvoke $r7.<com.yahoo.bullet.storm.testing.CustomSubscriber: void addMessages(com.yahoo.bullet.pubsub.PubSubMessage[])>($r6);

        $r8 = r5.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r8.<com.yahoo.bullet.storm.QuerySpout: void nextTuple()>();

        $r9 = r5.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r10 = virtualinvoke $r9.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i0 = interfaceinvoke $r10.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 1L);

        $r11 = r5.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r12 = virtualinvoke $r11.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (com.yahoo.bullet.storm.testing.CustomEmitter$Triplet) $r13;

        $r15 = virtualinvoke $r14.<com.yahoo.bullet.storm.testing.CustomEmitter$Triplet: java.util.List getTuple()>();

        $r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, "123");

        $r17 = r5.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r18 = virtualinvoke $r17.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getCommitted()>();

        $i2 = interfaceinvoke $r18.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 1L);

        $r19 = r5.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r20 = virtualinvoke $r19.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getCommitted()>();

        $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, "123");

        return;
    }

    public void testHandleReplayRequest()
    {
        long l0, $l2, $l4, $l6, $l8, $l9, $l11, $l13, $l15, $l17, $l18, $l19, $l21, $l23, $l25, $l27, $l29, $l30, $l32, $l34, $l35, $l37, $l38;
        com.yahoo.bullet.pubsub.PubSubMessage $r0;
        com.yahoo.bullet.pubsub.Metadata $r1;
        byte[] $r2;
        com.yahoo.bullet.pubsub.Metadata$Signal $r3;
        java.lang.Long $r4, $r18, $r29, $r57, $r75, $r95, $r112;
        com.yahoo.bullet.storm.QuerySpoutTest r6;
        com.yahoo.bullet.pubsub.PubSubMessage[] $r7;
        com.yahoo.bullet.storm.testing.CustomSubscriber $r8, $r9, $r11, $r20, $r22, $r66, $r68, $r91;
        java.util.List $r10, $r12, $r14, $r21, $r23, $r25, $r36, $r41, $r44, $r46, $r49, $r52, $r55, $r59, $r62, $r67, $r69, $r71, $r78, $r80, $r85, $r88, $r92, $r98, $r100, $r105, $r108;
        int $i1, $i3, $i5, $i7, $i10, $i12, $i14, $i16, $i20, $i22, $i24, $i26, $i28, $i31, $i33, $i36;
        com.yahoo.bullet.storm.testing.CustomEmitter $r13, $r24, $r35, $r40, $r45, $r51, $r58, $r70, $r77, $r79, $r84, $r97, $r99, $r104;
        com.yahoo.bullet.storm.QuerySpout $r15, $r19, $r26, $r30, $r65, $r72, $r76, $r93, $r96;
        java.util.Map $r16, $r27, $r31, $r73;
        com.yahoo.bullet.storm.testing.CustomTopologyContext $r17, $r28, $r74, $r94, $r111;
        java.lang.Object $r32, $r37, $r39, $r42, $r47, $r50, $r53, $r56, $r60, $r63, $r81, $r83, $r86, $r89, $r101, $r103, $r106, $r109;
        com.yahoo.bullet.storm.QuerySpout$Replay r33;
        java.lang.String $r34;
        boolean $z0, $z1, $z2, $z3;
        com.yahoo.bullet.storm.testing.CustomEmitter$Triplet $r38, $r43, $r48, $r54, $r61, $r82, $r87, $r102, $r107;
        java.lang.Boolean $r64, $r90, $r110;

        r6 := @this: com.yahoo.bullet.storm.QuerySpoutTest;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r0 = new com.yahoo.bullet.pubsub.PubSubMessage;

        $r2 = (byte[]) null;

        $r1 = new com.yahoo.bullet.pubsub.Metadata;

        $r3 = <com.yahoo.bullet.pubsub.Metadata$Signal: com.yahoo.bullet.pubsub.Metadata$Signal REPLAY>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        specialinvoke $r1.<com.yahoo.bullet.pubsub.Metadata: void <init>(com.yahoo.bullet.pubsub.Metadata$Signal,java.io.Serializable)>($r3, $r4);

        specialinvoke $r0.<com.yahoo.bullet.pubsub.PubSubMessage: void <init>(java.lang.String,java.io.Serializable,com.yahoo.bullet.pubsub.Metadata)>("FilterBolt-18", $r2, $r1);

        $r8 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r7 = newarray (com.yahoo.bullet.pubsub.PubSubMessage)[3];

        $r7[0] = $r0;

        $r7[1] = $r0;

        $r7[2] = $r0;

        virtualinvoke $r8.<com.yahoo.bullet.storm.testing.CustomSubscriber: void addMessages(com.yahoo.bullet.pubsub.PubSubMessage[])>($r7);

        $r9 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r10 = virtualinvoke $r9.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $i1 = interfaceinvoke $r10.<java.util.List: int size()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, 0L);

        $r11 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r12 = virtualinvoke $r11.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getCommitted()>();

        $i3 = interfaceinvoke $r12.<java.util.List: int size()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l4, 0L);

        $r13 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r14 = virtualinvoke $r13.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i5 = interfaceinvoke $r14.<java.util.List: int size()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l6, 0L);

        $r15 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        $r16 = virtualinvoke $r15.<com.yahoo.bullet.storm.QuerySpout: java.util.Map getReplays()>();

        $i7 = interfaceinvoke $r16.<java.util.Map: int size()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l8, 0L);

        $r17 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomTopologyContext context>;

        $r18 = virtualinvoke $r17.<com.yahoo.bullet.storm.testing.CustomTopologyContext: java.lang.Long getLongMetric(java.lang.String)>("bullet_active_replays");

        $l9 = virtualinvoke $r18.<java.lang.Long: long longValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, 0L);

        $r19 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r19.<com.yahoo.bullet.storm.QuerySpout: void nextTuple()>();

        $r20 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r21 = virtualinvoke $r20.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $i10 = interfaceinvoke $r21.<java.util.List: int size()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l11, 1L);

        $r22 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r23 = virtualinvoke $r22.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getCommitted()>();

        $i12 = interfaceinvoke $r23.<java.util.List: int size()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l13, 1L);

        $r24 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r25 = virtualinvoke $r24.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i14 = interfaceinvoke $r25.<java.util.List: int size()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l15, 1L);

        $r26 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        $r27 = virtualinvoke $r26.<com.yahoo.bullet.storm.QuerySpout: java.util.Map getReplays()>();

        $i16 = interfaceinvoke $r27.<java.util.Map: int size()>();

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l17, 1L);

        $r28 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomTopologyContext context>;

        $r29 = virtualinvoke $r28.<com.yahoo.bullet.storm.testing.CustomTopologyContext: java.lang.Long getLongMetric(java.lang.String)>("bullet_active_replays");

        $l18 = virtualinvoke $r29.<java.lang.Long: long longValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l18, 1L);

        $r30 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        $r31 = virtualinvoke $r30.<com.yahoo.bullet.storm.QuerySpout: java.util.Map getReplays()>();

        $r32 = interfaceinvoke $r31.<java.util.Map: java.lang.Object get(java.lang.Object)>("FilterBolt-18");

        r33 = (com.yahoo.bullet.storm.QuerySpout$Replay) $r32;

        $r34 = virtualinvoke r33.<com.yahoo.bullet.storm.QuerySpout$Replay: java.lang.String getId()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r34, "FilterBolt-18");

        $l19 = virtualinvoke r33.<com.yahoo.bullet.storm.QuerySpout$Replay: long getTimestamp()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l19, l0);

        $z0 = virtualinvoke r33.<com.yahoo.bullet.storm.QuerySpout$Replay: boolean isStopped()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r35 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r36 = virtualinvoke $r35.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $r37 = interfaceinvoke $r36.<java.util.List: java.lang.Object get(int)>(0);

        $r38 = (com.yahoo.bullet.storm.testing.CustomEmitter$Triplet) $r37;

        $r39 = virtualinvoke $r38.<com.yahoo.bullet.storm.testing.CustomEmitter$Triplet: java.lang.Object getMessageId()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r39, "FilterBolt-18");

        $r40 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r41 = virtualinvoke $r40.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $r42 = interfaceinvoke $r41.<java.util.List: java.lang.Object get(int)>(0);

        $r43 = (com.yahoo.bullet.storm.testing.CustomEmitter$Triplet) $r42;

        $r44 = virtualinvoke $r43.<com.yahoo.bullet.storm.testing.CustomEmitter$Triplet: java.util.List getTuple()>();

        $i20 = interfaceinvoke $r44.<java.util.List: int size()>();

        $l21 = (long) $i20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l21, 3L);

        $r45 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r46 = virtualinvoke $r45.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $r47 = interfaceinvoke $r46.<java.util.List: java.lang.Object get(int)>(0);

        $r48 = (com.yahoo.bullet.storm.testing.CustomEmitter$Triplet) $r47;

        $r49 = virtualinvoke $r48.<com.yahoo.bullet.storm.testing.CustomEmitter$Triplet: java.util.List getTuple()>();

        $r50 = interfaceinvoke $r49.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r50, "FilterBolt-18");

        $r51 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r52 = virtualinvoke $r51.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $r53 = interfaceinvoke $r52.<java.util.List: java.lang.Object get(int)>(0);

        $r54 = (com.yahoo.bullet.storm.testing.CustomEmitter$Triplet) $r53;

        $r55 = virtualinvoke $r54.<com.yahoo.bullet.storm.testing.CustomEmitter$Triplet: java.util.List getTuple()>();

        $r56 = interfaceinvoke $r55.<java.util.List: java.lang.Object get(int)>(1);

        $r57 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r56, $r57);

        $r58 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r59 = virtualinvoke $r58.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $r60 = interfaceinvoke $r59.<java.util.List: java.lang.Object get(int)>(0);

        $r61 = (com.yahoo.bullet.storm.testing.CustomEmitter$Triplet) $r60;

        $r62 = virtualinvoke $r61.<com.yahoo.bullet.storm.testing.CustomEmitter$Triplet: java.util.List getTuple()>();

        $r63 = interfaceinvoke $r62.<java.util.List: java.lang.Object get(int)>(2);

        $r64 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r63, $r64);

        $r65 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r65.<com.yahoo.bullet.storm.QuerySpout: void nextTuple()>();

        $r66 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r67 = virtualinvoke $r66.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $i22 = interfaceinvoke $r67.<java.util.List: int size()>();

        $l23 = (long) $i22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l23, 2L);

        $r68 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r69 = virtualinvoke $r68.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getCommitted()>();

        $i24 = interfaceinvoke $r69.<java.util.List: int size()>();

        $l25 = (long) $i24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l25, 2L);

        $r70 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r71 = virtualinvoke $r70.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i26 = interfaceinvoke $r71.<java.util.List: int size()>();

        $l27 = (long) $i26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l27, 1L);

        $r72 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        $r73 = virtualinvoke $r72.<com.yahoo.bullet.storm.QuerySpout: java.util.Map getReplays()>();

        $i28 = interfaceinvoke $r73.<java.util.Map: int size()>();

        $l29 = (long) $i28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l29, 1L);

        $r74 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomTopologyContext context>;

        $r75 = virtualinvoke $r74.<com.yahoo.bullet.storm.testing.CustomTopologyContext: java.lang.Long getLongMetric(java.lang.String)>("bullet_active_replays");

        $l30 = virtualinvoke $r75.<java.lang.Long: long longValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l30, 1L);

        $r76 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r76.<com.yahoo.bullet.storm.QuerySpout: void ack(java.lang.Object)>("FilterBolt-18");

        $z1 = virtualinvoke r33.<com.yahoo.bullet.storm.QuerySpout$Replay: boolean isStopped()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $r77 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r78 = virtualinvoke $r77.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i31 = interfaceinvoke $r78.<java.util.List: int size()>();

        $l32 = (long) $i31;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l32, 2L);

        $r79 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r80 = virtualinvoke $r79.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $r81 = interfaceinvoke $r80.<java.util.List: java.lang.Object get(int)>(1);

        $r82 = (com.yahoo.bullet.storm.testing.CustomEmitter$Triplet) $r81;

        $r83 = virtualinvoke $r82.<com.yahoo.bullet.storm.testing.CustomEmitter$Triplet: java.lang.Object getMessageId()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r83, "FilterBolt-18");

        $r84 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r85 = virtualinvoke $r84.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $r86 = interfaceinvoke $r85.<java.util.List: java.lang.Object get(int)>(1);

        $r87 = (com.yahoo.bullet.storm.testing.CustomEmitter$Triplet) $r86;

        $r88 = virtualinvoke $r87.<com.yahoo.bullet.storm.testing.CustomEmitter$Triplet: java.util.List getTuple()>();

        $r89 = interfaceinvoke $r88.<java.util.List: java.lang.Object get(int)>(2);

        $r90 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r89, $r90);

        $r91 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r92 = virtualinvoke $r91.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getCommitted()>();

        $i33 = interfaceinvoke $r92.<java.util.List: int size()>();

        $l34 = (long) $i33;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l34, 2L);

        $r93 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r93.<com.yahoo.bullet.storm.QuerySpout: void fail(java.lang.Object)>("FilterBolt-18");

        $z2 = virtualinvoke r33.<com.yahoo.bullet.storm.QuerySpout$Replay: boolean isStopped()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r94 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomTopologyContext context>;

        $r95 = virtualinvoke $r94.<com.yahoo.bullet.storm.testing.CustomTopologyContext: java.lang.Long getLongMetric(java.lang.String)>("bullet_active_replays");

        $l35 = virtualinvoke $r95.<java.lang.Long: long longValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l35, 0L);

        $r96 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r96.<com.yahoo.bullet.storm.QuerySpout: void nextTuple()>();

        $z3 = virtualinvoke r33.<com.yahoo.bullet.storm.QuerySpout$Replay: boolean isStopped()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        $r97 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r98 = virtualinvoke $r97.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i36 = interfaceinvoke $r98.<java.util.List: int size()>();

        $l37 = (long) $i36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l37, 3L);

        $r99 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r100 = virtualinvoke $r99.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $r101 = interfaceinvoke $r100.<java.util.List: java.lang.Object get(int)>(2);

        $r102 = (com.yahoo.bullet.storm.testing.CustomEmitter$Triplet) $r101;

        $r103 = virtualinvoke $r102.<com.yahoo.bullet.storm.testing.CustomEmitter$Triplet: java.lang.Object getMessageId()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r103, "FilterBolt-18");

        $r104 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r105 = virtualinvoke $r104.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $r106 = interfaceinvoke $r105.<java.util.List: java.lang.Object get(int)>(2);

        $r107 = (com.yahoo.bullet.storm.testing.CustomEmitter$Triplet) $r106;

        $r108 = virtualinvoke $r107.<com.yahoo.bullet.storm.testing.CustomEmitter$Triplet: java.util.List getTuple()>();

        $r109 = interfaceinvoke $r108.<java.util.List: java.lang.Object get(int)>(2);

        $r110 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r109, $r110);

        $r111 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomTopologyContext context>;

        $r112 = virtualinvoke $r111.<com.yahoo.bullet.storm.testing.CustomTopologyContext: java.lang.Long getLongMetric(java.lang.String)>("bullet_active_replays");

        $l38 = virtualinvoke $r112.<java.lang.Long: long longValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l38, 1L);

        return;
    }

    public void testHandleReplayRequestDifferentTimestamp()
    {
        long l0, $l1, $l2, $l3, $l5, $l7, $l8, $l10, $l12, $l14, $l16, $l17, $l18, $l20, $l22, $l24, $l26, $l27, $l29, $l31, $l33, $l35, $l36, $l37, $l38, $l39, $l41, $l43, $l45, $l47, $l48, $l49, $l50;
        com.yahoo.bullet.pubsub.PubSubMessage $r0, $r6, $r12, $r18;
        com.yahoo.bullet.pubsub.Metadata $r1, $r7, $r13, $r19;
        byte[] $r2, $r8, $r14, $r20;
        com.yahoo.bullet.pubsub.Metadata$Signal $r3, $r9, $r15, $r21;
        java.lang.Long $r4, $r10, $r16, $r22, $r32, $r43, $r59, $r70, $r73, $r84;
        com.yahoo.bullet.storm.QuerySpoutTest r24;
        com.yahoo.bullet.pubsub.PubSubMessage[] $r25;
        com.yahoo.bullet.storm.testing.CustomSubscriber $r26, $r34, $r36, $r50, $r52, $r61, $r63, $r75, $r77;
        com.yahoo.bullet.storm.testing.CustomEmitter $r27, $r38, $r54, $r65, $r79;
        java.util.List $r28, $r35, $r37, $r39, $r51, $r53, $r55, $r62, $r64, $r66, $r76, $r78, $r80;
        int $i4, $i6, $i9, $i11, $i13, $i15, $i19, $i21, $i23, $i25, $i28, $i30, $i32, $i34, $i40, $i42, $i44, $i46;
        com.yahoo.bullet.storm.QuerySpout $r29, $r33, $r40, $r44, $r49, $r56, $r60, $r67, $r71, $r74, $r81;
        java.util.Map $r30, $r41, $r45, $r57, $r68, $r82;
        com.yahoo.bullet.storm.testing.CustomTopologyContext $r31, $r42, $r58, $r69, $r72, $r83;
        java.lang.Object $r46;
        com.yahoo.bullet.storm.QuerySpout$Replay r47;
        java.lang.String $r48;
        boolean $z0, $z1, $z2, $z3;

        r24 := @this: com.yahoo.bullet.storm.QuerySpoutTest;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r0 = new com.yahoo.bullet.pubsub.PubSubMessage;

        $r2 = (byte[]) null;

        $r1 = new com.yahoo.bullet.pubsub.Metadata;

        $r3 = <com.yahoo.bullet.pubsub.Metadata$Signal: com.yahoo.bullet.pubsub.Metadata$Signal REPLAY>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        specialinvoke $r1.<com.yahoo.bullet.pubsub.Metadata: void <init>(com.yahoo.bullet.pubsub.Metadata$Signal,java.io.Serializable)>($r3, $r4);

        specialinvoke $r0.<com.yahoo.bullet.pubsub.PubSubMessage: void <init>(java.lang.String,java.io.Serializable,com.yahoo.bullet.pubsub.Metadata)>("FilterBolt-18", $r2, $r1);

        $r6 = new com.yahoo.bullet.pubsub.PubSubMessage;

        $r8 = (byte[]) null;

        $r7 = new com.yahoo.bullet.pubsub.Metadata;

        $r9 = <com.yahoo.bullet.pubsub.Metadata$Signal: com.yahoo.bullet.pubsub.Metadata$Signal REPLAY>;

        $l1 = l0 - 1L;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        specialinvoke $r7.<com.yahoo.bullet.pubsub.Metadata: void <init>(com.yahoo.bullet.pubsub.Metadata$Signal,java.io.Serializable)>($r9, $r10);

        specialinvoke $r6.<com.yahoo.bullet.pubsub.PubSubMessage: void <init>(java.lang.String,java.io.Serializable,com.yahoo.bullet.pubsub.Metadata)>("FilterBolt-18", $r8, $r7);

        $r12 = new com.yahoo.bullet.pubsub.PubSubMessage;

        $r14 = (byte[]) null;

        $r13 = new com.yahoo.bullet.pubsub.Metadata;

        $r15 = <com.yahoo.bullet.pubsub.Metadata$Signal: com.yahoo.bullet.pubsub.Metadata$Signal REPLAY>;

        $l2 = l0 + 1L;

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        specialinvoke $r13.<com.yahoo.bullet.pubsub.Metadata: void <init>(com.yahoo.bullet.pubsub.Metadata$Signal,java.io.Serializable)>($r15, $r16);

        specialinvoke $r12.<com.yahoo.bullet.pubsub.PubSubMessage: void <init>(java.lang.String,java.io.Serializable,com.yahoo.bullet.pubsub.Metadata)>("FilterBolt-18", $r14, $r13);

        $r18 = new com.yahoo.bullet.pubsub.PubSubMessage;

        $r20 = (byte[]) null;

        $r19 = new com.yahoo.bullet.pubsub.Metadata;

        $r21 = <com.yahoo.bullet.pubsub.Metadata$Signal: com.yahoo.bullet.pubsub.Metadata$Signal REPLAY>;

        $l3 = l0 + 2L;

        $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        specialinvoke $r19.<com.yahoo.bullet.pubsub.Metadata: void <init>(com.yahoo.bullet.pubsub.Metadata$Signal,java.io.Serializable)>($r21, $r22);

        specialinvoke $r18.<com.yahoo.bullet.pubsub.PubSubMessage: void <init>(java.lang.String,java.io.Serializable,com.yahoo.bullet.pubsub.Metadata)>("FilterBolt-18", $r20, $r19);

        $r26 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r25 = newarray (com.yahoo.bullet.pubsub.PubSubMessage)[4];

        $r25[0] = $r0;

        $r25[1] = $r6;

        $r25[2] = $r12;

        $r25[3] = $r18;

        virtualinvoke $r26.<com.yahoo.bullet.storm.testing.CustomSubscriber: void addMessages(com.yahoo.bullet.pubsub.PubSubMessage[])>($r25);

        $r27 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r28 = virtualinvoke $r27.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i4 = interfaceinvoke $r28.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, 0L);

        $r29 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        $r30 = virtualinvoke $r29.<com.yahoo.bullet.storm.QuerySpout: java.util.Map getReplays()>();

        $i6 = interfaceinvoke $r30.<java.util.Map: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, 0L);

        $r31 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomTopologyContext context>;

        $r32 = virtualinvoke $r31.<com.yahoo.bullet.storm.testing.CustomTopologyContext: java.lang.Long getLongMetric(java.lang.String)>("bullet_active_replays");

        $l8 = virtualinvoke $r32.<java.lang.Long: long longValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l8, 0L);

        $r33 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r33.<com.yahoo.bullet.storm.QuerySpout: void nextTuple()>();

        $r34 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r35 = virtualinvoke $r34.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $i9 = interfaceinvoke $r35.<java.util.List: int size()>();

        $l10 = (long) $i9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l10, 1L);

        $r36 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r37 = virtualinvoke $r36.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getCommitted()>();

        $i11 = interfaceinvoke $r37.<java.util.List: int size()>();

        $l12 = (long) $i11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l12, 1L);

        $r38 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r39 = virtualinvoke $r38.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i13 = interfaceinvoke $r39.<java.util.List: int size()>();

        $l14 = (long) $i13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l14, 1L);

        $r40 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        $r41 = virtualinvoke $r40.<com.yahoo.bullet.storm.QuerySpout: java.util.Map getReplays()>();

        $i15 = interfaceinvoke $r41.<java.util.Map: int size()>();

        $l16 = (long) $i15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l16, 1L);

        $r42 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomTopologyContext context>;

        $r43 = virtualinvoke $r42.<com.yahoo.bullet.storm.testing.CustomTopologyContext: java.lang.Long getLongMetric(java.lang.String)>("bullet_active_replays");

        $l17 = virtualinvoke $r43.<java.lang.Long: long longValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l17, 1L);

        $r44 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        $r45 = virtualinvoke $r44.<com.yahoo.bullet.storm.QuerySpout: java.util.Map getReplays()>();

        $r46 = interfaceinvoke $r45.<java.util.Map: java.lang.Object get(java.lang.Object)>("FilterBolt-18");

        r47 = (com.yahoo.bullet.storm.QuerySpout$Replay) $r46;

        $r48 = virtualinvoke r47.<com.yahoo.bullet.storm.QuerySpout$Replay: java.lang.String getId()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r48, "FilterBolt-18");

        $l18 = virtualinvoke r47.<com.yahoo.bullet.storm.QuerySpout$Replay: long getTimestamp()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l18, l0);

        $z0 = virtualinvoke r47.<com.yahoo.bullet.storm.QuerySpout$Replay: boolean isStopped()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r49 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r49.<com.yahoo.bullet.storm.QuerySpout: void nextTuple()>();

        $r50 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r51 = virtualinvoke $r50.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $i19 = interfaceinvoke $r51.<java.util.List: int size()>();

        $l20 = (long) $i19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l20, 2L);

        $r52 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r53 = virtualinvoke $r52.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getCommitted()>();

        $i21 = interfaceinvoke $r53.<java.util.List: int size()>();

        $l22 = (long) $i21;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l22, 2L);

        $r54 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r55 = virtualinvoke $r54.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i23 = interfaceinvoke $r55.<java.util.List: int size()>();

        $l24 = (long) $i23;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l24, 1L);

        $r56 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        $r57 = virtualinvoke $r56.<com.yahoo.bullet.storm.QuerySpout: java.util.Map getReplays()>();

        $i25 = interfaceinvoke $r57.<java.util.Map: int size()>();

        $l26 = (long) $i25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l26, 1L);

        $r58 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomTopologyContext context>;

        $r59 = virtualinvoke $r58.<com.yahoo.bullet.storm.testing.CustomTopologyContext: java.lang.Long getLongMetric(java.lang.String)>("bullet_active_replays");

        $l27 = virtualinvoke $r59.<java.lang.Long: long longValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l27, 1L);

        $r60 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r60.<com.yahoo.bullet.storm.QuerySpout: void nextTuple()>();

        $r61 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r62 = virtualinvoke $r61.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $i28 = interfaceinvoke $r62.<java.util.List: int size()>();

        $l29 = (long) $i28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l29, 3L);

        $r63 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r64 = virtualinvoke $r63.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getCommitted()>();

        $i30 = interfaceinvoke $r64.<java.util.List: int size()>();

        $l31 = (long) $i30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l31, 3L);

        $r65 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r66 = virtualinvoke $r65.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i32 = interfaceinvoke $r66.<java.util.List: int size()>();

        $l33 = (long) $i32;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l33, 1L);

        $r67 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        $r68 = virtualinvoke $r67.<com.yahoo.bullet.storm.QuerySpout: java.util.Map getReplays()>();

        $i34 = interfaceinvoke $r68.<java.util.Map: int size()>();

        $l35 = (long) $i34;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l35, 1L);

        $r69 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomTopologyContext context>;

        $r70 = virtualinvoke $r69.<com.yahoo.bullet.storm.testing.CustomTopologyContext: java.lang.Long getLongMetric(java.lang.String)>("bullet_active_replays");

        $l36 = virtualinvoke $r70.<java.lang.Long: long longValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l36, 1L);

        $l37 = virtualinvoke r47.<com.yahoo.bullet.storm.QuerySpout$Replay: long getTimestamp()>();

        $l38 = l0 + 1L;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l37, $l38);

        $z1 = virtualinvoke r47.<com.yahoo.bullet.storm.QuerySpout$Replay: boolean isStopped()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $r71 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r71.<com.yahoo.bullet.storm.QuerySpout: void fail(java.lang.Object)>("FilterBolt-18");

        $z2 = virtualinvoke r47.<com.yahoo.bullet.storm.QuerySpout$Replay: boolean isStopped()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r72 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomTopologyContext context>;

        $r73 = virtualinvoke $r72.<com.yahoo.bullet.storm.testing.CustomTopologyContext: java.lang.Long getLongMetric(java.lang.String)>("bullet_active_replays");

        $l39 = virtualinvoke $r73.<java.lang.Long: long longValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l39, 0L);

        $r74 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r74.<com.yahoo.bullet.storm.QuerySpout: void nextTuple()>();

        $r75 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r76 = virtualinvoke $r75.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getReceived()>();

        $i40 = interfaceinvoke $r76.<java.util.List: int size()>();

        $l41 = (long) $i40;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l41, 4L);

        $r77 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r78 = virtualinvoke $r77.<com.yahoo.bullet.storm.testing.CustomSubscriber: java.util.List getCommitted()>();

        $i42 = interfaceinvoke $r78.<java.util.List: int size()>();

        $l43 = (long) $i42;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l43, 4L);

        $r79 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r80 = virtualinvoke $r79.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i44 = interfaceinvoke $r80.<java.util.List: int size()>();

        $l45 = (long) $i44;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l45, 2L);

        $r81 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        $r82 = virtualinvoke $r81.<com.yahoo.bullet.storm.QuerySpout: java.util.Map getReplays()>();

        $i46 = interfaceinvoke $r82.<java.util.Map: int size()>();

        $l47 = (long) $i46;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l47, 1L);

        $r83 = r24.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomTopologyContext context>;

        $r84 = virtualinvoke $r83.<com.yahoo.bullet.storm.testing.CustomTopologyContext: java.lang.Long getLongMetric(java.lang.String)>("bullet_active_replays");

        $l48 = virtualinvoke $r84.<java.lang.Long: long longValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l48, 1L);

        $l49 = virtualinvoke r47.<com.yahoo.bullet.storm.QuerySpout$Replay: long getTimestamp()>();

        $l50 = l0 + 2L;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l49, $l50);

        $z3 = virtualinvoke r47.<com.yahoo.bullet.storm.QuerySpout$Replay: boolean isStopped()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        return;
    }

    public void testDeactivateClearsReplays()
    {
        com.yahoo.bullet.pubsub.PubSubMessage $r0;
        com.yahoo.bullet.pubsub.Metadata $r1;
        byte[] $r2;
        com.yahoo.bullet.pubsub.Metadata$Signal $r3;
        long $l0, $l2, $l3, $l5, $l6;
        java.lang.Long $r4, $r13, $r18;
        com.yahoo.bullet.storm.QuerySpoutTest r6;
        com.yahoo.bullet.pubsub.PubSubMessage[] $r7;
        com.yahoo.bullet.storm.testing.CustomSubscriber $r8;
        com.yahoo.bullet.storm.QuerySpout $r9, $r10, $r14, $r15;
        java.util.Map $r11, $r16;
        int $i1, $i4;
        com.yahoo.bullet.storm.testing.CustomTopologyContext $r12, $r17;

        r6 := @this: com.yahoo.bullet.storm.QuerySpoutTest;

        $r0 = new com.yahoo.bullet.pubsub.PubSubMessage;

        $r2 = (byte[]) null;

        $r1 = new com.yahoo.bullet.pubsub.Metadata;

        $r3 = <com.yahoo.bullet.pubsub.Metadata$Signal: com.yahoo.bullet.pubsub.Metadata$Signal REPLAY>;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        specialinvoke $r1.<com.yahoo.bullet.pubsub.Metadata: void <init>(com.yahoo.bullet.pubsub.Metadata$Signal,java.io.Serializable)>($r3, $r4);

        specialinvoke $r0.<com.yahoo.bullet.pubsub.PubSubMessage: void <init>(java.lang.String,java.io.Serializable,com.yahoo.bullet.pubsub.Metadata)>("FilterBolt-18", $r2, $r1);

        $r8 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomSubscriber subscriber>;

        $r7 = newarray (com.yahoo.bullet.pubsub.PubSubMessage)[1];

        $r7[0] = $r0;

        virtualinvoke $r8.<com.yahoo.bullet.storm.testing.CustomSubscriber: void addMessages(com.yahoo.bullet.pubsub.PubSubMessage[])>($r7);

        $r9 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r9.<com.yahoo.bullet.storm.QuerySpout: void nextTuple()>();

        $r10 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        $r11 = virtualinvoke $r10.<com.yahoo.bullet.storm.QuerySpout: java.util.Map getReplays()>();

        $i1 = interfaceinvoke $r11.<java.util.Map: int size()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, 1L);

        $r12 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomTopologyContext context>;

        $r13 = virtualinvoke $r12.<com.yahoo.bullet.storm.testing.CustomTopologyContext: java.lang.Long getLongMetric(java.lang.String)>("bullet_active_replays");

        $l3 = virtualinvoke $r13.<java.lang.Long: long longValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 1L);

        $r14 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        virtualinvoke $r14.<com.yahoo.bullet.storm.QuerySpout: void deactivate()>();

        $r15 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.QuerySpout spout>;

        $r16 = virtualinvoke $r15.<com.yahoo.bullet.storm.QuerySpout: java.util.Map getReplays()>();

        $i4 = interfaceinvoke $r16.<java.util.Map: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, 0L);

        $r17 = r6.<com.yahoo.bullet.storm.QuerySpoutTest: com.yahoo.bullet.storm.testing.CustomTopologyContext context>;

        $r18 = virtualinvoke $r17.<com.yahoo.bullet.storm.testing.CustomTopologyContext: java.lang.Long getLongMetric(java.lang.String)>("bullet_active_replays");

        $l6 = virtualinvoke $r18.<java.lang.Long: long longValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l6, 0L);

        return;
    }
}
