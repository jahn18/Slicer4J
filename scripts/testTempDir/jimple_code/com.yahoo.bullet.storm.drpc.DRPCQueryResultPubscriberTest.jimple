public class com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest extends java.lang.Object
{
    private com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber pubscriber;

    public void <init>()
    {
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest r0;

        r0 := @this: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private org.asynchttpclient.Response getResponse(int, java.lang.String, java.lang.String)
    {
        java.lang.Object $r0, $r4, $r8, $r13;
        org.asynchttpclient.Response r1, $r5, $r9, $r14;
        int i0;
        java.lang.Integer $r2;
        org.mockito.stubbing.Stubber $r3, $r7, $r12;
        java.lang.String r6, r11;
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest r16;

        r16 := @this: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest;

        i0 := @parameter0: int;

        r6 := @parameter1: java.lang.String;

        r11 := @parameter2: java.lang.String;

        $r0 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/asynchttpclient/Response;");

        r1 = (org.asynchttpclient.Response) $r0;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.Stubber doReturn(java.lang.Object)>($r2);

        $r4 = interfaceinvoke $r3.<org.mockito.stubbing.Stubber: java.lang.Object when(java.lang.Object)>(r1);

        $r5 = (org.asynchttpclient.Response) $r4;

        interfaceinvoke $r5.<org.asynchttpclient.Response: int getStatusCode()>();

        $r7 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.Stubber doReturn(java.lang.Object)>(r6);

        $r8 = interfaceinvoke $r7.<org.mockito.stubbing.Stubber: java.lang.Object when(java.lang.Object)>(r1);

        $r9 = (org.asynchttpclient.Response) $r8;

        interfaceinvoke $r9.<org.asynchttpclient.Response: java.lang.String getStatusText()>();

        $r12 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.Stubber doReturn(java.lang.Object)>(r11);

        $r13 = interfaceinvoke $r12.<org.mockito.stubbing.Stubber: java.lang.Object when(java.lang.Object)>(r1);

        $r14 = (org.asynchttpclient.Response) $r13;

        interfaceinvoke $r14.<org.asynchttpclient.Response: java.lang.String getResponseBody()>();

        return r1;
    }

    private org.asynchttpclient.Response getNotOkResponse(int)
    {
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest r0;
        int i0;
        org.asynchttpclient.Response $r1;

        r0 := @this: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: org.asynchttpclient.Response getResponse(int,java.lang.String,java.lang.String)>(i0, "Error", null);

        return $r1;
    }

    private org.asynchttpclient.Response getOkResponse(java.lang.String)
    {
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest r0;
        java.lang.String r1;
        org.asynchttpclient.Response $r2;

        r0 := @this: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: org.asynchttpclient.Response getResponse(int,java.lang.String,java.lang.String)>(200, "Ok", r1);

        return $r2;
    }

    private java.util.concurrent.CompletableFuture getOkFuture(org.asynchttpclient.Response)
    {
        org.asynchttpclient.Response r0;
        java.util.concurrent.CompletableFuture r1, r3, $r6, $r14;
        java.lang.Object $r2, $r5, $r7, $r13, $r15;
        org.mockito.stubbing.Stubber $r4, $r12;
        java.util.function.Function $r8;
        java.lang.Object[] $r10;
        java.util.function.Consumer $r16;
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest r18;
        java.lang.RuntimeException $r19;
        java.lang.Throwable[] $r20;

        r18 := @this: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest;

        r0 := @parameter0: org.asynchttpclient.Response;

        r1 = staticinvoke <java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture completedFuture(java.lang.Object)>(r0);

        $r2 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Ljava/util/concurrent/CompletableFuture;");

        r3 = (java.util.concurrent.CompletableFuture) $r2;

        $r4 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.Stubber doReturn(java.lang.Object)>(r1);

        $r5 = interfaceinvoke $r4.<org.mockito.stubbing.Stubber: java.lang.Object when(java.lang.Object)>(r3);

        $r6 = (java.util.concurrent.CompletableFuture) $r5;

        $r7 = staticinvoke <org.mockito.Matchers: java.lang.Object any()>();

        $r8 = (java.util.function.Function) $r7;

        virtualinvoke $r6.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture exceptionally(java.util.function.Function)>($r8);

        $r10 = newarray (java.lang.Throwable)[1];

        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String)>("Good futures don\'t throw");

        $r10[0] = $r19;

        $r20 = (java.lang.Throwable[]) $r10;

        $r12 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.Stubber doThrow(java.lang.Throwable[])>($r20);

        $r13 = interfaceinvoke $r12.<org.mockito.stubbing.Stubber: java.lang.Object when(java.lang.Object)>(r3);

        $r14 = (java.util.concurrent.CompletableFuture) $r13;

        $r15 = staticinvoke <org.mockito.Matchers: java.lang.Object any()>();

        $r16 = (java.util.function.Consumer) $r15;

        virtualinvoke $r14.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenAcceptAsync(java.util.function.Consumer)>($r16);

        return r3;
    }

    private org.asynchttpclient.AsyncHttpClient mockClientWith(java.util.concurrent.CompletableFuture)
    {
        java.lang.Object $r0, $r4, $r7, $r10, $r14, $r18, $r21;
        org.asynchttpclient.ListenableFuture r1, $r5;
        java.util.concurrent.CompletableFuture r2;
        org.mockito.stubbing.Stubber $r3, $r9, $r13, $r20;
        org.asynchttpclient.BoundRequestBuilder r8, $r11, $r15;
        java.lang.String $r16, $r23;
        org.asynchttpclient.AsyncHttpClient r19, $r22;
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest r25;

        r25 := @this: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest;

        r2 := @parameter0: java.util.concurrent.CompletableFuture;

        $r0 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/asynchttpclient/ListenableFuture;");

        r1 = (org.asynchttpclient.ListenableFuture) $r0;

        $r3 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.Stubber doReturn(java.lang.Object)>(r2);

        $r4 = interfaceinvoke $r3.<org.mockito.stubbing.Stubber: java.lang.Object when(java.lang.Object)>(r1);

        $r5 = (org.asynchttpclient.ListenableFuture) $r4;

        interfaceinvoke $r5.<org.asynchttpclient.ListenableFuture: java.util.concurrent.CompletableFuture toCompletableFuture()>();

        $r7 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/asynchttpclient/BoundRequestBuilder;");

        r8 = (org.asynchttpclient.BoundRequestBuilder) $r7;

        $r9 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.Stubber doReturn(java.lang.Object)>(r1);

        $r10 = interfaceinvoke $r9.<org.mockito.stubbing.Stubber: java.lang.Object when(java.lang.Object)>(r8);

        $r11 = (org.asynchttpclient.BoundRequestBuilder) $r10;

        virtualinvoke $r11.<org.asynchttpclient.BoundRequestBuilder: org.asynchttpclient.ListenableFuture execute()>();

        $r13 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.Stubber doReturn(java.lang.Object)>(r8);

        $r14 = interfaceinvoke $r13.<org.mockito.stubbing.Stubber: java.lang.Object when(java.lang.Object)>(r8);

        $r15 = (org.asynchttpclient.BoundRequestBuilder) $r14;

        $r16 = staticinvoke <org.mockito.Matchers: java.lang.String anyString()>();

        virtualinvoke $r15.<org.asynchttpclient.BoundRequestBuilder: org.asynchttpclient.RequestBuilderBase setBody(java.lang.String)>($r16);

        $r18 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/asynchttpclient/AsyncHttpClient;");

        r19 = (org.asynchttpclient.AsyncHttpClient) $r18;

        $r20 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.Stubber doReturn(java.lang.Object)>(r8);

        $r21 = interfaceinvoke $r20.<org.mockito.stubbing.Stubber: java.lang.Object when(java.lang.Object)>(r19);

        $r22 = (org.asynchttpclient.AsyncHttpClient) $r21;

        $r23 = staticinvoke <org.mockito.Matchers: java.lang.String anyString()>();

        interfaceinvoke $r22.<org.asynchttpclient.AsyncHttpClient: org.asynchttpclient.BoundRequestBuilder preparePost(java.lang.String)>($r23);

        return r19;
    }

    public com.yahoo.bullet.pubsub.PubSubMessage fetch()
    {
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest r0;
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber $r1;
        java.lang.Exception $r2;
        java.lang.RuntimeException $r3;
        com.yahoo.bullet.pubsub.PubSubMessage r4;

        r0 := @this: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest;

     label1:
        $r1 = r0.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber pubscriber>;

        r4 = virtualinvoke $r1.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber: com.yahoo.bullet.pubsub.PubSubMessage receive()>();

        staticinvoke <java.lang.Thread: void sleep(long)>(1L);

        if r4 == null goto label1;

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private java.util.concurrent.CompletableFuture fetchAsync()
    {
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest r0;
        java.util.function.Supplier $r1;
        java.util.concurrent.CompletableFuture $r2;

        r0 := @this: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest;

        $r1 = staticinvoke <com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest$fetch__195: java.util.function.Supplier bootstrap$(com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest)>(r0);

        $r2 = staticinvoke <java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture supplyAsync(java.util.function.Supplier)>($r1);

        return $r2;
    }

    public void setup()
    {
        com.yahoo.bullet.storm.drpc.DRPCConfig $r0;
        java.util.List $r2;
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest r3;
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber $r4;

        r3 := @this: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest;

        $r0 = new com.yahoo.bullet.storm.drpc.DRPCConfig;

        specialinvoke $r0.<com.yahoo.bullet.storm.drpc.DRPCConfig: void <init>(java.lang.String)>("test_drpc_config.yaml");

        $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("foo.bar.bullet.drpc.com");

        virtualinvoke $r0.<com.yahoo.bullet.common.BulletConfig: void set(java.lang.String,java.lang.Object)>("bullet.pubsub.storm.drpc.servers", $r2);

        $r4 = new com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber;

        specialinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber: void <init>(com.yahoo.bullet.common.BulletConfig)>($r0);

        r3.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber pubscriber> = $r4;

        return;
    }

    public void testReadingOkResponse() throws java.lang.Exception
    {
        com.yahoo.bullet.pubsub.PubSubMessage $r0, $r8, r13;
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest r2;
        java.lang.String $r3, $r14, $r15;
        org.asynchttpclient.Response $r4;
        java.util.concurrent.CompletableFuture r5, $r11;
        org.asynchttpclient.AsyncHttpClient r6;
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber $r7, $r9;
        java.lang.Object $r12;
        java.io.Serializable $r16, $r17;

        r2 := @this: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest;

        $r0 = new com.yahoo.bullet.pubsub.PubSubMessage;

        specialinvoke $r0.<com.yahoo.bullet.pubsub.PubSubMessage: void <init>(java.lang.String,java.io.Serializable)>("foo", "response");

        $r3 = virtualinvoke $r0.<com.yahoo.bullet.pubsub.PubSubMessage: java.lang.String asJSON()>();

        $r4 = specialinvoke r2.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: org.asynchttpclient.Response getOkResponse(java.lang.String)>($r3);

        r5 = specialinvoke r2.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: java.util.concurrent.CompletableFuture getOkFuture(org.asynchttpclient.Response)>($r4);

        r6 = specialinvoke r2.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: org.asynchttpclient.AsyncHttpClient mockClientWith(java.util.concurrent.CompletableFuture)>(r5);

        $r7 = r2.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber pubscriber>;

        virtualinvoke $r7.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber: void setClient(org.asynchttpclient.AsyncHttpClient)>(r6);

        $r9 = r2.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber pubscriber>;

        $r8 = new com.yahoo.bullet.pubsub.PubSubMessage;

        specialinvoke $r8.<com.yahoo.bullet.pubsub.PubSubMessage: void <init>(java.lang.String,java.io.Serializable)>("foo", "bar");

        virtualinvoke $r9.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber: com.yahoo.bullet.pubsub.PubSubMessage send(com.yahoo.bullet.pubsub.PubSubMessage)>($r8);

        $r11 = specialinvoke r2.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: java.util.concurrent.CompletableFuture fetchAsync()>();

        $r12 = virtualinvoke $r11.<java.util.concurrent.CompletableFuture: java.lang.Object get()>();

        r13 = (com.yahoo.bullet.pubsub.PubSubMessage) $r12;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r13);

        $r14 = virtualinvoke r13.<com.yahoo.bullet.pubsub.PubSubMessage: java.lang.String getId()>();

        $r15 = virtualinvoke $r0.<com.yahoo.bullet.pubsub.PubSubMessage: java.lang.String getId()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        $r16 = virtualinvoke r13.<com.yahoo.bullet.pubsub.PubSubMessage: java.io.Serializable getContent()>();

        $r17 = virtualinvoke $r0.<com.yahoo.bullet.pubsub.PubSubMessage: java.io.Serializable getContent()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r17);

        return;
    }

    public void testReadingNotOkResponse() throws java.lang.Exception
    {
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest r0;
        org.asynchttpclient.Response $r1;
        java.util.concurrent.CompletableFuture r2, $r8;
        org.asynchttpclient.AsyncHttpClient r3;
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber $r4, $r6;
        com.yahoo.bullet.pubsub.PubSubMessage $r5, r10;
        java.lang.Object $r9;
        java.lang.String $r11, $r12, $r14;
        com.yahoo.bullet.storm.drpc.utils.DRPCError $r13;

        r0 := @this: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest;

        $r1 = specialinvoke r0.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: org.asynchttpclient.Response getNotOkResponse(int)>(500);

        r2 = specialinvoke r0.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: java.util.concurrent.CompletableFuture getOkFuture(org.asynchttpclient.Response)>($r1);

        r3 = specialinvoke r0.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: org.asynchttpclient.AsyncHttpClient mockClientWith(java.util.concurrent.CompletableFuture)>(r2);

        $r4 = r0.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber pubscriber>;

        virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber: void setClient(org.asynchttpclient.AsyncHttpClient)>(r3);

        $r6 = r0.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber pubscriber>;

        $r5 = new com.yahoo.bullet.pubsub.PubSubMessage;

        specialinvoke $r5.<com.yahoo.bullet.pubsub.PubSubMessage: void <init>(java.lang.String,java.io.Serializable)>("foo", "bar");

        virtualinvoke $r6.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber: com.yahoo.bullet.pubsub.PubSubMessage send(com.yahoo.bullet.pubsub.PubSubMessage)>($r5);

        $r8 = specialinvoke r0.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: java.util.concurrent.CompletableFuture fetchAsync()>();

        $r9 = virtualinvoke $r8.<java.util.concurrent.CompletableFuture: java.lang.Object get()>();

        r10 = (com.yahoo.bullet.pubsub.PubSubMessage) $r9;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r10);

        $r11 = virtualinvoke r10.<com.yahoo.bullet.pubsub.PubSubMessage: java.lang.String getId()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, "foo");

        $r12 = virtualinvoke r10.<com.yahoo.bullet.pubsub.PubSubMessage: java.lang.String getContentAsString()>();

        $r13 = <com.yahoo.bullet.storm.drpc.utils.DRPCError: com.yahoo.bullet.storm.drpc.utils.DRPCError CANNOT_REACH_DRPC>;

        $r14 = virtualinvoke $r13.<com.yahoo.bullet.storm.drpc.utils.DRPCError: java.lang.String asJSONClip()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r14);

        return;
    }

    public void testReadingNullResponse() throws java.lang.Exception
    {
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest r0;
        java.util.concurrent.CompletableFuture r1, $r7;
        org.asynchttpclient.AsyncHttpClient r2;
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber $r3, $r5;
        com.yahoo.bullet.pubsub.PubSubMessage $r4, r9;
        java.lang.Object $r8;
        java.lang.String $r10, $r11, $r13;
        com.yahoo.bullet.storm.drpc.utils.DRPCError $r12;

        r0 := @this: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest;

        r1 = specialinvoke r0.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: java.util.concurrent.CompletableFuture getOkFuture(org.asynchttpclient.Response)>(null);

        r2 = specialinvoke r0.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: org.asynchttpclient.AsyncHttpClient mockClientWith(java.util.concurrent.CompletableFuture)>(r1);

        $r3 = r0.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber pubscriber>;

        virtualinvoke $r3.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber: void setClient(org.asynchttpclient.AsyncHttpClient)>(r2);

        $r5 = r0.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber pubscriber>;

        $r4 = new com.yahoo.bullet.pubsub.PubSubMessage;

        specialinvoke $r4.<com.yahoo.bullet.pubsub.PubSubMessage: void <init>(java.lang.String,java.io.Serializable)>("foo", "bar");

        virtualinvoke $r5.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber: com.yahoo.bullet.pubsub.PubSubMessage send(com.yahoo.bullet.pubsub.PubSubMessage)>($r4);

        $r7 = specialinvoke r0.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: java.util.concurrent.CompletableFuture fetchAsync()>();

        $r8 = virtualinvoke $r7.<java.util.concurrent.CompletableFuture: java.lang.Object get()>();

        r9 = (com.yahoo.bullet.pubsub.PubSubMessage) $r8;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r9);

        $r10 = virtualinvoke r9.<com.yahoo.bullet.pubsub.PubSubMessage: java.lang.String getId()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, "foo");

        $r11 = virtualinvoke r9.<com.yahoo.bullet.pubsub.PubSubMessage: java.lang.String getContentAsString()>();

        $r12 = <com.yahoo.bullet.storm.drpc.utils.DRPCError: com.yahoo.bullet.storm.drpc.utils.DRPCError CANNOT_REACH_DRPC>;

        $r13 = virtualinvoke $r12.<com.yahoo.bullet.storm.drpc.utils.DRPCError: java.lang.String asJSONClip()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r13);

        return;
    }

    public void testClosing() throws java.lang.Exception
    {
        java.lang.Object $r0, $r6;
        org.asynchttpclient.AsyncHttpClient r1, $r7;
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest r2;
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber $r3, $r4;
        org.mockito.verification.VerificationMode $r5;

        r2 := @this: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest;

        $r0 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/asynchttpclient/AsyncHttpClient;");

        r1 = (org.asynchttpclient.AsyncHttpClient) $r0;

        $r3 = r2.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber pubscriber>;

        virtualinvoke $r3.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber: void setClient(org.asynchttpclient.AsyncHttpClient)>(r1);

        $r4 = r2.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber pubscriber>;

        virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber: void close()>();

        $r5 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(1);

        $r6 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>(r1, $r5);

        $r7 = (org.asynchttpclient.AsyncHttpClient) $r6;

        interfaceinvoke $r7.<org.asynchttpclient.AsyncHttpClient: void close()>();

        return;
    }

    public void testClosingWithException() throws java.lang.Exception
    {
        java.lang.Object $r0, $r5, $r11;
        org.asynchttpclient.AsyncHttpClient r1, $r6, $r12;
        java.lang.Object[] $r2;
        org.mockito.stubbing.Stubber $r4;
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest r7;
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber $r8, $r9;
        org.mockito.verification.VerificationMode $r10;
        java.io.IOException $r13;
        java.lang.Throwable[] $r14;

        r7 := @this: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest;

        $r0 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/asynchttpclient/AsyncHttpClient;");

        r1 = (org.asynchttpclient.AsyncHttpClient) $r0;

        $r2 = newarray (java.lang.Throwable)[1];

        $r13 = new java.io.IOException;

        specialinvoke $r13.<java.io.IOException: void <init>()>();

        $r2[0] = $r13;

        $r14 = (java.lang.Throwable[]) $r2;

        $r4 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.Stubber doThrow(java.lang.Throwable[])>($r14);

        $r5 = interfaceinvoke $r4.<org.mockito.stubbing.Stubber: java.lang.Object when(java.lang.Object)>(r1);

        $r6 = (org.asynchttpclient.AsyncHttpClient) $r5;

        interfaceinvoke $r6.<org.asynchttpclient.AsyncHttpClient: void close()>();

        $r8 = r7.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber pubscriber>;

        virtualinvoke $r8.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber: void setClient(org.asynchttpclient.AsyncHttpClient)>(r1);

        $r9 = r7.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber pubscriber>;

        virtualinvoke $r9.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber: void close()>();

        $r10 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(1);

        $r11 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>(r1, $r10);

        $r12 = (org.asynchttpclient.AsyncHttpClient) $r11;

        interfaceinvoke $r12.<org.asynchttpclient.AsyncHttpClient: void close()>();

        return;
    }

    public void testCommiting()
    {
        java.lang.Object $r0;
        org.asynchttpclient.AsyncHttpClient r1;
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest r2;
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber $r3;
        java.lang.Object[] $r4;

        r2 := @this: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest;

        $r0 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/asynchttpclient/AsyncHttpClient;");

        r1 = (org.asynchttpclient.AsyncHttpClient) $r0;

        $r3 = r2.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber pubscriber>;

        virtualinvoke $r3.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber: void commit(java.lang.String)>("foo");

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r1;

        staticinvoke <org.mockito.Mockito: void verifyZeroInteractions(java.lang.Object[])>($r4);

        return;
    }

    public void testFailing()
    {
        java.lang.Object $r0;
        org.asynchttpclient.AsyncHttpClient r1;
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest r2;
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber $r3;
        java.lang.Object[] $r4;

        r2 := @this: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest;

        $r0 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/asynchttpclient/AsyncHttpClient;");

        r1 = (org.asynchttpclient.AsyncHttpClient) $r0;

        $r3 = r2.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber pubscriber>;

        virtualinvoke $r3.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber: void fail(java.lang.String)>("foo");

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r1;

        staticinvoke <org.mockito.Mockito: void verifyZeroInteractions(java.lang.Object[])>($r4);

        return;
    }

    public void testException() throws java.lang.Exception
    {
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest r0;
        com.yahoo.bullet.pubsub.PubSubMessage $r1, r6;
        com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber $r2;
        java.util.concurrent.CompletableFuture $r4;
        java.lang.Object $r5;
        java.lang.String $r7, $r8, $r10;
        com.yahoo.bullet.storm.drpc.utils.DRPCError $r9;

        r0 := @this: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest;

        $r2 = r0.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber pubscriber>;

        $r1 = new com.yahoo.bullet.pubsub.PubSubMessage;

        specialinvoke $r1.<com.yahoo.bullet.pubsub.PubSubMessage: void <init>(java.lang.String,java.io.Serializable)>("foo", "bar");

        virtualinvoke $r2.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber: com.yahoo.bullet.pubsub.PubSubMessage send(com.yahoo.bullet.pubsub.PubSubMessage)>($r1);

        $r4 = specialinvoke r0.<com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriberTest: java.util.concurrent.CompletableFuture fetchAsync()>();

        $r5 = virtualinvoke $r4.<java.util.concurrent.CompletableFuture: java.lang.Object get()>();

        r6 = (com.yahoo.bullet.pubsub.PubSubMessage) $r5;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r6);

        $r7 = virtualinvoke r6.<com.yahoo.bullet.pubsub.PubSubMessage: java.lang.String getId()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, "foo");

        $r8 = virtualinvoke r6.<com.yahoo.bullet.pubsub.PubSubMessage: java.lang.String getContentAsString()>();

        $r9 = <com.yahoo.bullet.storm.drpc.utils.DRPCError: com.yahoo.bullet.storm.drpc.utils.DRPCError CANNOT_REACH_DRPC>;

        $r10 = virtualinvoke $r9.<com.yahoo.bullet.storm.drpc.utils.DRPCError: java.lang.String asJSONClip()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r10);

        return;
    }
}
