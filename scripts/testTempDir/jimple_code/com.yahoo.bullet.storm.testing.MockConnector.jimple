public class com.yahoo.bullet.storm.testing.MockConnector extends com.yahoo.bullet.dsl.connector.BulletConnector
{
    private boolean throwOnInitialize;
    private boolean throwOnClose;
    private boolean throwOnRead;
    private java.util.List messages;

    public void <init>(com.yahoo.bullet.common.BulletConfig)
    {
        com.yahoo.bullet.storm.testing.MockConnector r0;
        com.yahoo.bullet.common.BulletConfig r1;
        java.lang.Object[] $r2;
        java.util.Map $r3, $r5;
        java.lang.Integer $r4;
        java.util.List $r6;

        r0 := @this: com.yahoo.bullet.storm.testing.MockConnector;

        r1 := @parameter0: com.yahoo.bullet.common.BulletConfig;

        specialinvoke r0.<com.yahoo.bullet.dsl.connector.BulletConnector: void <init>(com.yahoo.bullet.common.BulletConfig)>(r1);

        r0.<com.yahoo.bullet.storm.testing.MockConnector: boolean throwOnInitialize> = 0;

        r0.<com.yahoo.bullet.storm.testing.MockConnector: boolean throwOnClose> = 0;

        r0.<com.yahoo.bullet.storm.testing.MockConnector: boolean throwOnRead> = 0;

        $r2 = newarray (java.lang.Object)[3];

        $r3 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>("foo", "bar");

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r5 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>("foo", $r4);

        $r2[1] = $r5;

        $r2[2] = null;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        r0.<com.yahoo.bullet.storm.testing.MockConnector: java.util.List messages> = $r6;

        return;
    }

    public void initialize() throws com.yahoo.bullet.dsl.BulletDSLException
    {
        com.yahoo.bullet.storm.testing.MockConnector r0;
        boolean $z0;
        com.yahoo.bullet.dsl.BulletDSLException $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.yahoo.bullet.storm.testing.MockConnector;

        $z0 = r0.<com.yahoo.bullet.storm.testing.MockConnector: boolean throwOnInitialize>;

        if $z0 == 0 goto label1;

        $r2 = new com.yahoo.bullet.dsl.BulletDSLException;

        specialinvoke $r2.<com.yahoo.bullet.dsl.BulletDSLException: void <init>(java.lang.String)>("mock exception");

        $r3 = (java.lang.Throwable) $r2;

        throw $r3;

     label1:
        r0.<com.yahoo.bullet.storm.testing.MockConnector: boolean throwOnInitialize> = 1;

        return;
    }

    public java.util.List read() throws com.yahoo.bullet.dsl.BulletDSLException
    {
        com.yahoo.bullet.storm.testing.MockConnector r0;
        boolean $z0;
        java.util.List $r1;
        com.yahoo.bullet.dsl.BulletDSLException $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.yahoo.bullet.storm.testing.MockConnector;

        $z0 = r0.<com.yahoo.bullet.storm.testing.MockConnector: boolean throwOnRead>;

        if $z0 == 0 goto label1;

        $r3 = new com.yahoo.bullet.dsl.BulletDSLException;

        specialinvoke $r3.<com.yahoo.bullet.dsl.BulletDSLException: void <init>(java.lang.String)>("mock exception");

        $r4 = (java.lang.Throwable) $r3;

        throw $r4;

     label1:
        r0.<com.yahoo.bullet.storm.testing.MockConnector: boolean throwOnRead> = 1;

        $r1 = r0.<com.yahoo.bullet.storm.testing.MockConnector: java.util.List messages>;

        return $r1;
    }

    public void close() throws java.lang.Exception
    {
        com.yahoo.bullet.storm.testing.MockConnector r0;
        boolean $z0;
        java.lang.Exception $r1;

        r0 := @this: com.yahoo.bullet.storm.testing.MockConnector;

        $z0 = r0.<com.yahoo.bullet.storm.testing.MockConnector: boolean throwOnClose>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.Exception;

        specialinvoke $r1.<java.lang.Exception: void <init>(java.lang.String)>("mock exception");

        throw $r1;

     label1:
        r0.<com.yahoo.bullet.storm.testing.MockConnector: boolean throwOnClose> = 1;

        return;
    }
}
