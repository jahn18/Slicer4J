public class com.yahoo.bullet.storm.drpc.MockDRPCSpout extends org.apache.storm.drpc.DRPCSpout
{
    private static final long serialVersionUID;
    private boolean closed;
    private java.util.Queue tuples;
    private java.util.Queue messageIDs;
    private transient com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector;
    private java.util.List failed;

    public void <init>(java.lang.String, com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector)
    {
        com.yahoo.bullet.storm.drpc.MockDRPCSpout r0;
        java.lang.String r1;
        java.util.LinkedList $r2, $r3;
        java.util.ArrayList $r4;
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector r5;

        r0 := @this: com.yahoo.bullet.storm.drpc.MockDRPCSpout;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector;

        specialinvoke r0.<org.apache.storm.drpc.DRPCSpout: void <init>(java.lang.String)>(r1);

        r0.<com.yahoo.bullet.storm.drpc.MockDRPCSpout: boolean closed> = 0;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<com.yahoo.bullet.storm.drpc.MockDRPCSpout: java.util.Queue tuples> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<com.yahoo.bullet.storm.drpc.MockDRPCSpout: java.util.Queue messageIDs> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.yahoo.bullet.storm.drpc.MockDRPCSpout: java.util.List failed> = $r4;

        r0.<com.yahoo.bullet.storm.drpc.MockDRPCSpout: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector> = r5;

        return;
    }

    public void open(java.util.Map, org.apache.storm.task.TopologyContext, org.apache.storm.spout.SpoutOutputCollector)
    {
        com.yahoo.bullet.storm.drpc.MockDRPCSpout r0;
        java.util.Map r1;
        org.apache.storm.task.TopologyContext r2;
        org.apache.storm.spout.SpoutOutputCollector r3;

        r0 := @this: com.yahoo.bullet.storm.drpc.MockDRPCSpout;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.apache.storm.task.TopologyContext;

        r3 := @parameter2: org.apache.storm.spout.SpoutOutputCollector;

        return;
    }

    public void close()
    {
        com.yahoo.bullet.storm.drpc.MockDRPCSpout r0;

        r0 := @this: com.yahoo.bullet.storm.drpc.MockDRPCSpout;

        r0.<com.yahoo.bullet.storm.drpc.MockDRPCSpout: boolean closed> = 1;

        return;
    }

    public void fail(java.lang.Object)
    {
        com.yahoo.bullet.storm.drpc.MockDRPCSpout r0;
        java.lang.Object r1;
        java.util.List $r2;

        r0 := @this: com.yahoo.bullet.storm.drpc.MockDRPCSpout;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.yahoo.bullet.storm.drpc.MockDRPCSpout: java.util.List failed>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void nextTuple()
    {
        com.yahoo.bullet.storm.drpc.MockDRPCSpout r0;
        java.util.Queue $r1, $r3;
        java.lang.Object r2, $r4;
        java.util.List r5;
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector $r6;

        r0 := @this: com.yahoo.bullet.storm.drpc.MockDRPCSpout;

        $r1 = r0.<com.yahoo.bullet.storm.drpc.MockDRPCSpout: java.util.Queue messageIDs>;

        r2 = interfaceinvoke $r1.<java.util.Queue: java.lang.Object poll()>();

        $r3 = r0.<com.yahoo.bullet.storm.drpc.MockDRPCSpout: java.util.Queue tuples>;

        $r4 = interfaceinvoke $r3.<java.util.Queue: java.lang.Object poll()>();

        r5 = (java.util.List) $r4;

        if r2 == null goto label1;

        $r6 = r0.<com.yahoo.bullet.storm.drpc.MockDRPCSpout: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        virtualinvoke $r6.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: java.util.List emit(java.lang.String,java.util.List,java.lang.Object)>(null, r5, r2);

     label1:
        return;
    }

    public void addMessageParts(java.lang.String, java.lang.String)
    {
        com.yahoo.bullet.storm.drpc.MockDRPCSpout r0;
        java.util.Queue $r1, $r11, $r13;
        int i0;
        java.lang.String r2, r3, $r4, $r8, $r9;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.util.List r10;
        java.lang.Object r12;

        r0 := @this: com.yahoo.bullet.storm.drpc.MockDRPCSpout;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = r0.<com.yahoo.bullet.storm.drpc.MockDRPCSpout: java.util.Queue messageIDs>;

        i0 = interfaceinvoke $r1.<java.util.Queue: int size()>();

        $r4 = staticinvoke <com.yahoo.bullet.storm.drpc.MockDRPCSpout: java.lang.String makeMessage(java.lang.String,java.lang.String)>(r2, r3);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fake");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <com.yahoo.bullet.storm.drpc.MockDRPCSpout: java.lang.String makeReturnInfo(java.lang.String,java.lang.String,int)>($r8, "testHost", i0);

        r10 = staticinvoke <com.yahoo.bullet.storm.drpc.MockDRPCSpout: java.util.List makeTuple(java.lang.String,java.lang.String)>($r4, $r9);

        $r11 = r0.<com.yahoo.bullet.storm.drpc.MockDRPCSpout: java.util.Queue tuples>;

        interfaceinvoke $r11.<java.util.Queue: boolean offer(java.lang.Object)>(r10);

        r12 = staticinvoke <com.yahoo.bullet.storm.drpc.MockDRPCSpout: java.lang.Object makeMessageID(java.lang.String,int)>(r2, i0);

        $r13 = r0.<com.yahoo.bullet.storm.drpc.MockDRPCSpout: java.util.Queue messageIDs>;

        interfaceinvoke $r13.<java.util.Queue: boolean offer(java.lang.Object)>(r12);

        return;
    }

    public static java.util.List makeTuple(java.lang.String, java.lang.String)
    {
        java.lang.Object[] $r0;
        java.lang.String r1, r2;
        java.util.List $r3;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = newarray (java.lang.Object)[2];

        $r0[0] = r1;

        $r0[1] = r2;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        return $r3;
    }

    public static java.lang.String makeReturnInfo(java.lang.String, java.lang.String, int)
    {
        java.lang.String[] $r0;
        java.util.List $r1, $r6;
        java.lang.Object[] $r2;
        java.lang.String r3, r4, $r7, $r8;
        int i0;
        java.lang.Integer $r5;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "id";

        $r0[1] = "host";

        $r0[2] = "port";

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        $r2 = newarray (java.lang.Object)[3];

        $r2[0] = r3;

        $r2[1] = r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[2] = $r5;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r7 = staticinvoke <com.yahoo.bullet.storm.drpc.MockDRPCSpout: java.lang.String zipToJSON(java.util.List,java.util.List)>($r1, $r6);

        $r8 = staticinvoke <com.yahoo.bullet.result.JSONFormatter: java.lang.String asJSON(java.lang.Object)>($r7);

        return $r8;
    }

    public static java.lang.String makeMessage(java.lang.String, java.lang.String)
    {
        com.yahoo.bullet.pubsub.PubSubMessage $r0;
        java.lang.String r1, r2, $r3;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = new com.yahoo.bullet.pubsub.PubSubMessage;

        specialinvoke $r0.<com.yahoo.bullet.pubsub.PubSubMessage: void <init>(java.lang.String,java.io.Serializable)>(r1, r2);

        $r3 = virtualinvoke $r0.<com.yahoo.bullet.pubsub.PubSubMessage: java.lang.String asJSON()>();

        return $r3;
    }

    public static java.lang.Object makeMessageID(java.lang.String, int)
    {
        java.lang.String[] $r0;
        java.util.List $r1, $r5;
        java.lang.Object[] $r2;
        java.lang.String r3, $r6;
        int i0;
        java.lang.Integer $r4;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "id";

        $r0[1] = "index";

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[1] = $r4;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r6 = staticinvoke <com.yahoo.bullet.storm.drpc.MockDRPCSpout: java.lang.String zipToJSON(java.util.List,java.util.List)>($r1, $r5);

        return $r6;
    }

    public static java.lang.String zipToJSON(java.util.List, java.util.List)
    {
        java.util.HashMap $r0;
        java.util.List r2, r5;
        int $i0, i1;
        java.lang.String $r3;
        java.lang.Object $r4, $r6;

        r2 := @parameter0: java.util.List;

        r5 := @parameter1: java.util.List;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i1);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = staticinvoke <com.yahoo.bullet.result.JSONFormatter: java.lang.String asJSON(java.lang.Object)>($r0);

        return $r3;
    }

    public boolean isClosed()
    {
        com.yahoo.bullet.storm.drpc.MockDRPCSpout r0;
        boolean $z0;

        r0 := @this: com.yahoo.bullet.storm.drpc.MockDRPCSpout;

        $z0 = r0.<com.yahoo.bullet.storm.drpc.MockDRPCSpout: boolean closed>;

        return $z0;
    }

    public java.util.Queue getTuples()
    {
        com.yahoo.bullet.storm.drpc.MockDRPCSpout r0;
        java.util.Queue $r1;

        r0 := @this: com.yahoo.bullet.storm.drpc.MockDRPCSpout;

        $r1 = r0.<com.yahoo.bullet.storm.drpc.MockDRPCSpout: java.util.Queue tuples>;

        return $r1;
    }

    public java.util.Queue getMessageIDs()
    {
        com.yahoo.bullet.storm.drpc.MockDRPCSpout r0;
        java.util.Queue $r1;

        r0 := @this: com.yahoo.bullet.storm.drpc.MockDRPCSpout;

        $r1 = r0.<com.yahoo.bullet.storm.drpc.MockDRPCSpout: java.util.Queue messageIDs>;

        return $r1;
    }

    public com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector getCollector()
    {
        com.yahoo.bullet.storm.drpc.MockDRPCSpout r0;
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector $r1;

        r0 := @this: com.yahoo.bullet.storm.drpc.MockDRPCSpout;

        $r1 = r0.<com.yahoo.bullet.storm.drpc.MockDRPCSpout: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        return $r1;
    }

    public java.util.List getFailed()
    {
        com.yahoo.bullet.storm.drpc.MockDRPCSpout r0;
        java.util.List $r1;

        r0 := @this: com.yahoo.bullet.storm.drpc.MockDRPCSpout;

        $r1 = r0.<com.yahoo.bullet.storm.drpc.MockDRPCSpout: java.util.List failed>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.yahoo.bullet.storm.drpc.MockDRPCSpout: long serialVersionUID> = -2577427274281420676L;

        return;
    }
}
