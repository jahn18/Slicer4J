public class com.yahoo.bullet.storm.TickSpoutTest extends java.lang.Object
{
    private com.yahoo.bullet.storm.testing.CustomEmitter emitter;
    private com.yahoo.bullet.storm.TickSpout spout;

    public void <init>()
    {
        com.yahoo.bullet.storm.TickSpoutTest r0;

        r0 := @this: com.yahoo.bullet.storm.TickSpoutTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private void forceTickByLastTickTime(long)
    {
        com.yahoo.bullet.storm.TickSpoutTest r0;
        long l0;
        com.yahoo.bullet.storm.TickSpout $r1, $r2;

        r0 := @this: com.yahoo.bullet.storm.TickSpoutTest;

        l0 := @parameter0: long;

        $r1 = r0.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.TickSpout spout>;

        virtualinvoke $r1.<com.yahoo.bullet.storm.TickSpout: void setLastTickTime(long)>(l0);

        $r2 = r0.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.TickSpout spout>;

        virtualinvoke $r2.<com.yahoo.bullet.storm.TickSpout: void nextTuple()>();

        return;
    }

    private void forceTick()
    {
        com.yahoo.bullet.storm.TickSpoutTest r0;

        r0 := @this: com.yahoo.bullet.storm.TickSpoutTest;

        specialinvoke r0.<com.yahoo.bullet.storm.TickSpoutTest: void forceTickByLastTickTime(long)>(0L);

        return;
    }

    public void setup()
    {
        com.yahoo.bullet.storm.TickSpoutTest r0;
        com.yahoo.bullet.storm.testing.CustomEmitter $r1, $r4;
        com.yahoo.bullet.storm.TickSpout $r2, $r6;
        com.yahoo.bullet.storm.BulletStormConfig $r3;
        org.apache.storm.topology.IRichSpout $r5;

        r0 := @this: com.yahoo.bullet.storm.TickSpoutTest;

        $r1 = new com.yahoo.bullet.storm.testing.CustomEmitter;

        specialinvoke $r1.<com.yahoo.bullet.storm.testing.CustomEmitter: void <init>()>();

        r0.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter> = $r1;

        $r2 = new com.yahoo.bullet.storm.TickSpout;

        $r3 = new com.yahoo.bullet.storm.BulletStormConfig;

        specialinvoke $r3.<com.yahoo.bullet.storm.BulletStormConfig: void <init>()>();

        specialinvoke $r2.<com.yahoo.bullet.storm.TickSpout: void <init>(com.yahoo.bullet.storm.BulletStormConfig)>($r3);

        $r4 = r0.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r5 = staticinvoke <com.yahoo.bullet.storm.testing.ComponentUtils: org.apache.storm.topology.IRichSpout open(org.apache.storm.topology.IRichSpout,com.yahoo.bullet.storm.testing.CustomEmitter)>($r2, $r4);

        $r6 = (com.yahoo.bullet.storm.TickSpout) $r5;

        r0.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.TickSpout spout> = $r6;

        return;
    }

    public void testDefaults()
    {
        com.yahoo.bullet.storm.TickSpoutTest r0;
        com.yahoo.bullet.storm.TickSpout $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r14;
        int $i0, $i5, $i7;
        long $l1, $l2, $l4, $l6, $l8, $l9;
        byte $b3;
        org.apache.storm.spout.SpoutOutputCollector $r6;
        com.yahoo.bullet.storm.testing.CustomEmitter $r12;
        java.util.List $r13;
        boolean $z0, $z1;

        r0 := @this: com.yahoo.bullet.storm.TickSpoutTest;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, 5L);

        $r1 = r0.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.TickSpout spout>;

        $i0 = virtualinvoke $r1.<com.yahoo.bullet.storm.TickSpout: int getId()>();

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r2 = r0.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.TickSpout spout>;

        $l1 = virtualinvoke $r2.<com.yahoo.bullet.storm.TickSpout: long getLastTickTime()>();

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b3 = $l1 cmp $l2;

        if $b3 > 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r3 = r0.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.TickSpout spout>;

        $l4 = virtualinvoke $r3.<com.yahoo.bullet.storm.TickSpout: long getTick()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l4, 0L);

        $r4 = r0.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.TickSpout spout>;

        $i5 = virtualinvoke $r4.<com.yahoo.bullet.storm.TickSpout: int getTickInterval()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l6, 100L);

        $r5 = r0.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.TickSpout spout>;

        $r6 = virtualinvoke $r5.<com.yahoo.bullet.storm.TickSpout: org.apache.storm.spout.SpoutOutputCollector getCollector()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r6);

        $r7 = r0.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.TickSpout spout>;

        virtualinvoke $r7.<com.yahoo.bullet.storm.TickSpout: void deactivate()>();

        $r8 = r0.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.TickSpout spout>;

        virtualinvoke $r8.<com.yahoo.bullet.storm.TickSpout: void activate()>();

        $r9 = r0.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.TickSpout spout>;

        virtualinvoke $r9.<com.yahoo.bullet.storm.TickSpout: void ack(java.lang.Object)>("foo");

        $r10 = r0.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.TickSpout spout>;

        virtualinvoke $r10.<com.yahoo.bullet.storm.TickSpout: void fail(java.lang.Object)>("bar");

        $r11 = r0.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.TickSpout spout>;

        virtualinvoke $r11.<com.yahoo.bullet.storm.TickSpout: void close()>();

        $r12 = r0.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r13 = virtualinvoke $r12.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i7 = interfaceinvoke $r13.<java.util.List: int size()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l8, 0L);

        $r14 = r0.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.TickSpout spout>;

        $l9 = virtualinvoke $r14.<com.yahoo.bullet.storm.TickSpout: long getTick()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, 0L);

        return;
    }

    public void testDeclaredOutputFields()
    {
        com.yahoo.bullet.storm.testing.CustomOutputFieldsDeclarer $r0;
        com.yahoo.bullet.storm.TickSpoutTest r2;
        com.yahoo.bullet.storm.TickSpout $r3;
        org.apache.storm.tuple.Fields $r4;
        java.lang.String[] $r5;

        r2 := @this: com.yahoo.bullet.storm.TickSpoutTest;

        $r0 = new com.yahoo.bullet.storm.testing.CustomOutputFieldsDeclarer;

        specialinvoke $r0.<com.yahoo.bullet.storm.testing.CustomOutputFieldsDeclarer: void <init>()>();

        $r3 = r2.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.TickSpout spout>;

        virtualinvoke $r3.<com.yahoo.bullet.storm.TickSpout: void declareOutputFields(org.apache.storm.topology.OutputFieldsDeclarer)>($r0);

        $r4 = new org.apache.storm.tuple.Fields;

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = "id";

        $r5[1] = "tick";

        specialinvoke $r4.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r5);

        return;
    }

    public void testEmittingTicks()
    {
        com.yahoo.bullet.storm.TickSpoutTest r0;
        com.yahoo.bullet.storm.TickSpout $r1;
        int i0;
        java.lang.Object[] $r2, $r7, $r12;
        com.yahoo.bullet.storm.TupleClassifier$Type $r3, $r8, $r13;
        java.lang.Integer $r4, $r9, $r14;
        java.lang.Long $r5, $r10, $r15;

        r0 := @this: com.yahoo.bullet.storm.TickSpoutTest;

        $r1 = r0.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.TickSpout spout>;

        i0 = virtualinvoke $r1.<com.yahoo.bullet.storm.TickSpout: int getId()>();

        specialinvoke r0.<com.yahoo.bullet.storm.TickSpoutTest: void forceTick()>();

        specialinvoke r0.<com.yahoo.bullet.storm.TickSpoutTest: void forceTick()>();

        specialinvoke r0.<com.yahoo.bullet.storm.TickSpoutTest: void forceTick()>();

        $r3 = <com.yahoo.bullet.storm.TupleClassifier$Type: com.yahoo.bullet.storm.TupleClassifier$Type TICK_TUPLE>;

        $r2 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r2[1] = $r5;

        staticinvoke <com.yahoo.bullet.storm.testing.TupleUtils: org.apache.storm.tuple.Tuple makeTuple(com.yahoo.bullet.storm.TupleClassifier$Type,java.lang.Object[])>($r3, $r2);

        $r8 = <com.yahoo.bullet.storm.TupleClassifier$Type: com.yahoo.bullet.storm.TupleClassifier$Type TICK_TUPLE>;

        $r7 = newarray (java.lang.Object)[2];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r9;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        $r7[1] = $r10;

        staticinvoke <com.yahoo.bullet.storm.testing.TupleUtils: org.apache.storm.tuple.Tuple makeTuple(com.yahoo.bullet.storm.TupleClassifier$Type,java.lang.Object[])>($r8, $r7);

        $r13 = <com.yahoo.bullet.storm.TupleClassifier$Type: com.yahoo.bullet.storm.TupleClassifier$Type TICK_TUPLE>;

        $r12 = newarray (java.lang.Object)[2];

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12[0] = $r14;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L);

        $r12[1] = $r15;

        staticinvoke <com.yahoo.bullet.storm.testing.TupleUtils: org.apache.storm.tuple.Tuple makeTuple(com.yahoo.bullet.storm.TupleClassifier$Type,java.lang.Object[])>($r13, $r12);

        return;
    }

    public void testEmittingAtTickIntervals() throws java.lang.InterruptedException
    {
        long l0, $l3, $l4, $l6, $l7, $l8;
        com.yahoo.bullet.storm.BulletStormConfig $r0;
        java.lang.Integer $r2, $r15;
        com.yahoo.bullet.storm.TickSpoutTest r3;
        com.yahoo.bullet.storm.TickSpout $r4, $r7, $r8, $r9, $r13;
        com.yahoo.bullet.storm.testing.CustomEmitter $r5, $r10;
        org.apache.storm.topology.IRichSpout $r6;
        int $i2, $i5, $i9;
        java.util.List $r11;
        java.lang.Object[] $r12;
        com.yahoo.bullet.storm.TupleClassifier$Type $r14;
        java.lang.Long $r16;

        r3 := @this: com.yahoo.bullet.storm.TickSpoutTest;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r0 = new com.yahoo.bullet.storm.BulletStormConfig;

        specialinvoke $r0.<com.yahoo.bullet.storm.BulletStormConfig: void <init>()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100000);

        virtualinvoke $r0.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.tick.spout.interval.ms", $r2);

        $r4 = new com.yahoo.bullet.storm.TickSpout;

        specialinvoke $r4.<com.yahoo.bullet.storm.TickSpout: void <init>(com.yahoo.bullet.storm.BulletStormConfig)>($r0);

        $r5 = r3.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r6 = staticinvoke <com.yahoo.bullet.storm.testing.ComponentUtils: org.apache.storm.topology.IRichSpout open(org.apache.storm.topology.IRichSpout,com.yahoo.bullet.storm.testing.CustomEmitter)>($r4, $r5);

        $r7 = (com.yahoo.bullet.storm.TickSpout) $r6;

        r3.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.TickSpout spout> = $r7;

        $r8 = r3.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.TickSpout spout>;

        virtualinvoke $r8.<com.yahoo.bullet.storm.TickSpout: void nextTuple()>();

        $r9 = r3.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.TickSpout spout>;

        $i2 = virtualinvoke $r9.<com.yahoo.bullet.storm.TickSpout: int getTickInterval()>();

        $l4 = (long) $i2;

        $l3 = (long) 100000;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l4, $l3);

        $r10 = r3.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r11 = virtualinvoke $r10.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i5 = interfaceinvoke $r11.<java.util.List: int size()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l6, 0L);

        $l7 = (long) 100000;

        $l8 = l0 - $l7;

        specialinvoke r3.<com.yahoo.bullet.storm.TickSpoutTest: void forceTickByLastTickTime(long)>($l8);

        $r14 = <com.yahoo.bullet.storm.TupleClassifier$Type: com.yahoo.bullet.storm.TupleClassifier$Type TICK_TUPLE>;

        $r12 = newarray (java.lang.Object)[2];

        $r13 = r3.<com.yahoo.bullet.storm.TickSpoutTest: com.yahoo.bullet.storm.TickSpout spout>;

        $i9 = virtualinvoke $r13.<com.yahoo.bullet.storm.TickSpout: int getId()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r12[0] = $r15;

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r12[1] = $r16;

        staticinvoke <com.yahoo.bullet.storm.testing.TupleUtils: org.apache.storm.tuple.Tuple makeTuple(com.yahoo.bullet.storm.TupleClassifier$Type,java.lang.Object[])>($r14, $r12);

        return;
    }
}
