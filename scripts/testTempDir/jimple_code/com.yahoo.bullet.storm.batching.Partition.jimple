public class com.yahoo.bullet.storm.batching.Partition extends java.lang.Object
{
    private static final org.slf4j.Logger log;
    private static final int INITIAL_BATCH_COUNT;
    private final java.util.Random random;
    private final int id;
    private final int batchSize;
    private final boolean batchCompressEnable;
    private int batchCount;
    private int maxCapacity;
    private int minCapacity;
    private java.util.List batches;
    private java.util.Map keyMapping;
    private java.util.List data;
    private boolean[] changed;

    public void <init>(int, int, boolean)
    {
        com.yahoo.bullet.storm.batching.Partition r0;
        java.util.Random $r1;
        java.lang.Object[] $r2;
        int i0, i1;
        org.slf4j.Logger $r3;
        java.lang.Integer $r4, $r5;
        boolean z0;
        java.lang.Boolean $r6;
        java.util.ArrayList $r7;
        java.util.HashMap $r8;
        java.lang.RuntimeException $r9;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.String $r13;

        r0 := @this: com.yahoo.bullet.storm.batching.Partition;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>()>();

        r0.<com.yahoo.bullet.storm.batching.Partition: java.util.Random random> = $r1;

        $r3 = <com.yahoo.bullet.storm.batching.Partition: org.slf4j.Logger log>;

        $r2 = newarray (java.lang.Object)[3];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[1] = $r5;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r2[2] = $r6;

        interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Creating partition {} with batch size {}, initial batch count {}, and batch compression enabled {}", $r2);

        if i1 >= 1 goto label1;

        $r9 = new java.lang.RuntimeException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Batch size must be greater than 0. The parameter given was ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label1:
        r0.<com.yahoo.bullet.storm.batching.Partition: int id> = i0;

        r0.<com.yahoo.bullet.storm.batching.Partition: int batchSize> = i1;

        r0.<com.yahoo.bullet.storm.batching.Partition: boolean batchCompressEnable> = z0;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<com.yahoo.bullet.storm.batching.Partition: java.util.List batches> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<com.yahoo.bullet.storm.batching.Partition: java.util.Map keyMapping> = $r8;

        specialinvoke r0.<com.yahoo.bullet.storm.batching.Partition: void resize(int)>(1);

        return;
    }

    public void add(java.lang.String, java.lang.Object)
    {
        com.yahoo.bullet.storm.batching.Partition r0;
        java.lang.String r1;
        java.util.Map $r2, $r7, $r9;
        boolean $z0;
        int $i0, i1;
        java.util.Random $r3;
        java.util.List $r4;
        java.lang.Object $r5, r6;
        java.lang.Integer $r10;
        boolean[] $r12;

        r0 := @this: com.yahoo.bullet.storm.batching.Partition;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.Object;

        $r2 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.Map keyMapping>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.Random random>;

        $i0 = r0.<com.yahoo.bullet.storm.batching.Partition: int batchCount>;

        i1 = virtualinvoke $r3.<java.util.Random: int nextInt(int)>($i0);

        $r4 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.List batches>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        $r7 = (java.util.Map) $r5;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r6);

        $r9 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.Map keyMapping>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r10);

        $r12 = r0.<com.yahoo.bullet.storm.batching.Partition: boolean[] changed>;

        $r12[i1] = 1;

        return;
    }

    public void remove(java.lang.String)
    {
        com.yahoo.bullet.storm.batching.Partition r0;
        java.lang.String r1;
        java.util.Map $r2, $r7;
        java.lang.Object $r3, $r6;
        java.lang.Integer r4;
        java.util.List $r5;
        int $i0, $i1;
        boolean[] $r9;

        r0 := @this: com.yahoo.bullet.storm.batching.Partition;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.Map keyMapping>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r4 = (java.lang.Integer) $r3;

        if r4 == null goto label1;

        $r5 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.List batches>;

        $i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i0);

        $r7 = (java.util.Map) $r6;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r9 = r0.<com.yahoo.bullet.storm.batching.Partition: boolean[] changed>;

        $i1 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        $r9[$i1] = 1;

     label1:
        return;
    }

    public void resize()
    {
        com.yahoo.bullet.storm.batching.Partition r0;
        java.util.Map $r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.yahoo.bullet.storm.batching.Partition;

        $r1 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.Map keyMapping>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $i1 = r0.<com.yahoo.bullet.storm.batching.Partition: int maxCapacity>;

        if $i0 <= $i1 goto label1;

        specialinvoke r0.<com.yahoo.bullet.storm.batching.Partition: void upsize()>();

        goto label2;

     label1:
        $r2 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.Map keyMapping>;

        $i2 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $i3 = r0.<com.yahoo.bullet.storm.batching.Partition: int minCapacity>;

        if $i2 >= $i3 goto label2;

        specialinvoke r0.<com.yahoo.bullet.storm.batching.Partition: void downsize()>();

     label2:
        return;
    }

    private void upsize()
    {
        com.yahoo.bullet.storm.batching.Partition r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        org.slf4j.Logger $r1;
        java.lang.Integer $r2;
        java.util.Map $r3;

        r0 := @this: com.yahoo.bullet.storm.batching.Partition;

        $r1 = <com.yahoo.bullet.storm.batching.Partition: org.slf4j.Logger log>;

        $i0 = r0.<com.yahoo.bullet.storm.batching.Partition: int id>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Upsizing partition {}", $r2);

     label1:
        $r3 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.Map keyMapping>;

        $i1 = interfaceinvoke $r3.<java.util.Map: int size()>();

        $i2 = r0.<com.yahoo.bullet.storm.batching.Partition: int maxCapacity>;

        if $i1 <= $i2 goto label2;

        $i4 = r0.<com.yahoo.bullet.storm.batching.Partition: int batchCount>;

        $i5 = $i4 * 2;

        r0.<com.yahoo.bullet.storm.batching.Partition: int batchCount> = $i5;

        $i7 = r0.<com.yahoo.bullet.storm.batching.Partition: int batchCount>;

        $i6 = r0.<com.yahoo.bullet.storm.batching.Partition: int batchSize>;

        $i8 = $i7 * $i6;

        r0.<com.yahoo.bullet.storm.batching.Partition: int maxCapacity> = $i8;

        $i9 = r0.<com.yahoo.bullet.storm.batching.Partition: int maxCapacity>;

        $i10 = $i9 / 4;

        r0.<com.yahoo.bullet.storm.batching.Partition: int minCapacity> = $i10;

        goto label1;

     label2:
        $i3 = r0.<com.yahoo.bullet.storm.batching.Partition: int batchCount>;

        specialinvoke r0.<com.yahoo.bullet.storm.batching.Partition: void resize(int)>($i3);

        return;
    }

    private void downsize()
    {
        com.yahoo.bullet.storm.batching.Partition r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        org.slf4j.Logger $r1;
        java.lang.Integer $r2;
        java.util.Map $r3;

        r0 := @this: com.yahoo.bullet.storm.batching.Partition;

        $r1 = <com.yahoo.bullet.storm.batching.Partition: org.slf4j.Logger log>;

        $i0 = r0.<com.yahoo.bullet.storm.batching.Partition: int id>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Downsizing partition {}", $r2);

     label1:
        $r3 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.Map keyMapping>;

        $i1 = interfaceinvoke $r3.<java.util.Map: int size()>();

        $i2 = r0.<com.yahoo.bullet.storm.batching.Partition: int minCapacity>;

        if $i1 >= $i2 goto label2;

        $i4 = r0.<com.yahoo.bullet.storm.batching.Partition: int batchCount>;

        $i5 = $i4 / 2;

        r0.<com.yahoo.bullet.storm.batching.Partition: int batchCount> = $i5;

        $i7 = r0.<com.yahoo.bullet.storm.batching.Partition: int batchCount>;

        $i6 = r0.<com.yahoo.bullet.storm.batching.Partition: int batchSize>;

        $i8 = $i7 * $i6;

        r0.<com.yahoo.bullet.storm.batching.Partition: int maxCapacity> = $i8;

        $i9 = r0.<com.yahoo.bullet.storm.batching.Partition: int maxCapacity>;

        $i10 = $i9 / 4;

        r0.<com.yahoo.bullet.storm.batching.Partition: int minCapacity> = $i10;

        goto label1;

     label2:
        $i3 = r0.<com.yahoo.bullet.storm.batching.Partition: int batchCount>;

        specialinvoke r0.<com.yahoo.bullet.storm.batching.Partition: void resize(int)>($i3);

        return;
    }

    private void resize(int)
    {
        com.yahoo.bullet.storm.batching.Partition r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i16, i17;
        java.util.ArrayList $r1;
        boolean[] $r2;
        java.lang.Object[] $r3;
        org.slf4j.Logger $r4, $r18, $r19, $r28;
        java.lang.Integer $r5, $r6, $r7, $r8, $r10, $r20, $r44;
        java.util.Map $r9, r31, $r40, $r43;
        java.util.function.Supplier $r11;
        java.util.stream.Stream $r12, $r13, $r22, $r24;
        long $l13, $l14, $l15, l18;
        java.util.stream.Collector $r14;
        java.lang.Object $r15, $r30, $r34, $r36, $r39, $r41;
        java.util.List r16, $r17, $r21, $r25;
        boolean $z0, $z1, $z2;
        java.util.function.Function $r23;
        java.util.function.Consumer $r27;
        double $d0, $d1;
        java.lang.Double $r29;
        java.util.Set $r32;
        java.util.Iterator r33, r46;
        java.util.Map$Entry r35;
        java.lang.String r37;
        java.util.Random $r38;

        r0 := @this: com.yahoo.bullet.storm.batching.Partition;

        i0 := @parameter0: int;

        r0.<com.yahoo.bullet.storm.batching.Partition: int batchCount> = i0;

        $i2 = r0.<com.yahoo.bullet.storm.batching.Partition: int batchCount>;

        $i1 = r0.<com.yahoo.bullet.storm.batching.Partition: int batchSize>;

        $i3 = $i2 * $i1;

        r0.<com.yahoo.bullet.storm.batching.Partition: int maxCapacity> = $i3;

        $i4 = r0.<com.yahoo.bullet.storm.batching.Partition: int maxCapacity>;

        $i5 = $i4 / 4;

        r0.<com.yahoo.bullet.storm.batching.Partition: int minCapacity> = $i5;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.yahoo.bullet.storm.batching.Partition: java.util.List data> = $r1;

        $i6 = r0.<com.yahoo.bullet.storm.batching.Partition: int batchCount>;

        $r2 = newarray (boolean)[$i6];

        r0.<com.yahoo.bullet.storm.batching.Partition: boolean[] changed> = $r2;

        $i7 = r0.<com.yahoo.bullet.storm.batching.Partition: int batchCount>;

        if $i7 != 1 goto label1;

        r0.<com.yahoo.bullet.storm.batching.Partition: int minCapacity> = 0;

     label1:
        $r4 = <com.yahoo.bullet.storm.batching.Partition: org.slf4j.Logger log>;

        $r3 = newarray (java.lang.Object)[5];

        $i8 = r0.<com.yahoo.bullet.storm.batching.Partition: int id>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r3[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[1] = $r6;

        $i9 = r0.<com.yahoo.bullet.storm.batching.Partition: int maxCapacity>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r3[2] = $r7;

        $i10 = r0.<com.yahoo.bullet.storm.batching.Partition: int minCapacity>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r3[3] = $r8;

        $r9 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.Map keyMapping>;

        $i11 = interfaceinvoke $r9.<java.util.Map: int size()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r3[4] = $r10;

        interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Resizing partition {}\'s batch size to {} with new max capacity {} and new min capacity {} (the current number of elements is {})", $r3);

        $r11 = staticinvoke <com.yahoo.bullet.storm.batching.Partition$init__134: java.util.function.Supplier bootstrap$()>();

        $r12 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream generate(java.util.function.Supplier)>($r11);

        $i12 = r0.<com.yahoo.bullet.storm.batching.Partition: int batchCount>;

        $l13 = (long) $i12;

        $r13 = interfaceinvoke $r12.<java.util.stream.Stream: java.util.stream.Stream limit(long)>($l13);

        $r14 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r15 = interfaceinvoke $r13.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r14);

        r16 = (java.util.List) $r15;

        $r17 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.List batches>;

        r46 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r30 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>();

        r31 = (java.util.Map) $r30;

        $r32 = interfaceinvoke r31.<java.util.Map: java.util.Set entrySet()>();

        r33 = interfaceinvoke $r32.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r34 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>();

        r35 = (java.util.Map$Entry) $r34;

        $r36 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getKey()>();

        r37 = (java.lang.String) $r36;

        $r38 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.Random random>;

        $i16 = r0.<com.yahoo.bullet.storm.batching.Partition: int batchCount>;

        i17 = virtualinvoke $r38.<java.util.Random: int nextInt(int)>($i16);

        $r39 = interfaceinvoke r16.<java.util.List: java.lang.Object get(int)>(i17);

        $r40 = (java.util.Map) $r39;

        $r41 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r37, $r41);

        $r43 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.Map keyMapping>;

        $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i17);

        interfaceinvoke $r43.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r37, $r44);

        goto label3;

     label4:
        goto label2;

     label5:
        r0.<com.yahoo.bullet.storm.batching.Partition: java.util.List batches> = r16;

        $z0 = r0.<com.yahoo.bullet.storm.batching.Partition: boolean batchCompressEnable>;

        if $z0 == 0 goto label6;

        $r19 = <com.yahoo.bullet.storm.batching.Partition: org.slf4j.Logger log>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r19.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Compressing {} batches after resize", $r20);

        l18 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r21 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.List batches>;

        $r22 = interfaceinvoke $r21.<java.util.List: java.util.stream.Stream stream()>();

        $r23 = staticinvoke <com.yahoo.bullet.storm.batching.Partition$compress__138: java.util.function.Function bootstrap$()>();

        $r24 = interfaceinvoke $r22.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r23);

        $r25 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.List data>;

        virtualinvoke $r25.<java.lang.Object: java.lang.Class getClass()>();

        $r27 = staticinvoke <com.yahoo.bullet.storm.batching.Partition$add__142: java.util.function.Consumer bootstrap$(java.util.List)>($r25);

        interfaceinvoke $r24.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r27);

        $r28 = <com.yahoo.bullet.storm.batching.Partition: org.slf4j.Logger log>;

        $l14 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l15 = $l14 - l18;

        $d0 = (double) $l15;

        $d1 = $d0 / 1000.0;

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        interfaceinvoke $r28.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Took {} seconds to compress.", $r29);

        goto label7;

     label6:
        $r18 = <com.yahoo.bullet.storm.batching.Partition: org.slf4j.Logger log>;

        interfaceinvoke $r18.<org.slf4j.Logger: void warn(java.lang.String)>("Not compressing batches after resize since compression is not enabled.");

     label7:
        return;
    }

    public void compress()
    {
        long l0, $l3, $l4;
        com.yahoo.bullet.storm.batching.Partition r0;
        int $i1, $i2, i5, i6;
        java.lang.Object[] $r1;
        org.slf4j.Logger $r2;
        java.lang.Integer $r3, $r4;
        double $d0, $d1;
        java.lang.Double $r5;
        boolean[] $r6, $r12;
        boolean $z0;
        java.util.List $r7, $r8;
        java.lang.Object $r9;
        byte[] $r10;

        r0 := @this: com.yahoo.bullet.storm.batching.Partition;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        i5 = 0;

        i6 = 0;

     label1:
        $i1 = r0.<com.yahoo.bullet.storm.batching.Partition: int batchCount>;

        if i6 >= $i1 goto label3;

        $r6 = r0.<com.yahoo.bullet.storm.batching.Partition: boolean[] changed>;

        $z0 = $r6[i6];

        if $z0 == 0 goto label2;

        $r8 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.List data>;

        $r7 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.List batches>;

        $r9 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i6);

        $r10 = staticinvoke <com.yahoo.bullet.storm.batching.BatchManager: byte[] compress(java.lang.Object)>($r9);

        interfaceinvoke $r8.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i6, $r10);

        $r12 = r0.<com.yahoo.bullet.storm.batching.Partition: boolean[] changed>;

        $r12[i6] = 0;

        i5 = i5 + 1;

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        $r2 = <com.yahoo.bullet.storm.batching.Partition: org.slf4j.Logger log>;

        $r1 = newarray (java.lang.Object)[3];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r1[0] = $r3;

        $i2 = r0.<com.yahoo.bullet.storm.batching.Partition: int batchCount>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r1[1] = $r4;

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l4 = $l3 - l0;

        $d0 = (double) $l4;

        $d1 = $d0 / 1000.0;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r1[2] = $r5;

        interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("{} out of {} batches needed compressing. Took {} seconds to compress.", $r1);

        return;
    }

    public java.util.List getImmutableBatches()
    {
        com.yahoo.bullet.storm.batching.Partition r0;
        java.util.List $r1, $r7;
        java.util.stream.Stream $r2, $r4;
        java.util.function.Function $r3;
        java.util.stream.Collector $r5;
        java.lang.Object $r6;

        r0 := @this: com.yahoo.bullet.storm.batching.Partition;

        $r1 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.List batches>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.stream.Stream stream()>();

        $r3 = staticinvoke <com.yahoo.bullet.storm.batching.Partition$init__135: java.util.function.Function bootstrap$()>();

        $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r3);

        $r5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r5);

        $r7 = (java.util.List) $r6;

        return $r7;
    }

    public java.util.List getImmutableData()
    {
        java.util.ArrayList $r0;
        com.yahoo.bullet.storm.batching.Partition r1;
        java.util.List $r2;

        r1 := @this: com.yahoo.bullet.storm.batching.Partition;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<com.yahoo.bullet.storm.batching.Partition: java.util.List data>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r0;
    }

    public void clear()
    {
        com.yahoo.bullet.storm.batching.Partition r0;
        java.util.List $r1, $r4;
        java.util.function.Consumer $r2;
        java.util.Map $r3;
        boolean $z0;
        int $i0, i1;
        boolean[] $r6;

        r0 := @this: com.yahoo.bullet.storm.batching.Partition;

        $r1 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.List batches>;

        $r2 = staticinvoke <com.yahoo.bullet.storm.batching.Partition$clear__137: java.util.function.Consumer bootstrap$()>();

        interfaceinvoke $r1.<java.util.List: void forEach(java.util.function.Consumer)>($r2);

        $r3 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.Map keyMapping>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

        $z0 = r0.<com.yahoo.bullet.storm.batching.Partition: boolean batchCompressEnable>;

        if $z0 == 0 goto label2;

        i1 = 0;

     label1:
        $i0 = r0.<com.yahoo.bullet.storm.batching.Partition: int batchCount>;

        if i1 >= $i0 goto label2;

        $r4 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.List data>;

        interfaceinvoke $r4.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, null);

        $r6 = r0.<com.yahoo.bullet.storm.batching.Partition: boolean[] changed>;

        $r6[i1] = 1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    java.util.Random getRandom()
    {
        com.yahoo.bullet.storm.batching.Partition r0;
        java.util.Random $r1;

        r0 := @this: com.yahoo.bullet.storm.batching.Partition;

        $r1 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.Random random>;

        return $r1;
    }

    int getId()
    {
        com.yahoo.bullet.storm.batching.Partition r0;
        int $i0;

        r0 := @this: com.yahoo.bullet.storm.batching.Partition;

        $i0 = r0.<com.yahoo.bullet.storm.batching.Partition: int id>;

        return $i0;
    }

    int getBatchSize()
    {
        com.yahoo.bullet.storm.batching.Partition r0;
        int $i0;

        r0 := @this: com.yahoo.bullet.storm.batching.Partition;

        $i0 = r0.<com.yahoo.bullet.storm.batching.Partition: int batchSize>;

        return $i0;
    }

    boolean isBatchCompressEnable()
    {
        com.yahoo.bullet.storm.batching.Partition r0;
        boolean $z0;

        r0 := @this: com.yahoo.bullet.storm.batching.Partition;

        $z0 = r0.<com.yahoo.bullet.storm.batching.Partition: boolean batchCompressEnable>;

        return $z0;
    }

    int getBatchCount()
    {
        com.yahoo.bullet.storm.batching.Partition r0;
        int $i0;

        r0 := @this: com.yahoo.bullet.storm.batching.Partition;

        $i0 = r0.<com.yahoo.bullet.storm.batching.Partition: int batchCount>;

        return $i0;
    }

    int getMaxCapacity()
    {
        com.yahoo.bullet.storm.batching.Partition r0;
        int $i0;

        r0 := @this: com.yahoo.bullet.storm.batching.Partition;

        $i0 = r0.<com.yahoo.bullet.storm.batching.Partition: int maxCapacity>;

        return $i0;
    }

    int getMinCapacity()
    {
        com.yahoo.bullet.storm.batching.Partition r0;
        int $i0;

        r0 := @this: com.yahoo.bullet.storm.batching.Partition;

        $i0 = r0.<com.yahoo.bullet.storm.batching.Partition: int minCapacity>;

        return $i0;
    }

    java.util.List getBatches()
    {
        com.yahoo.bullet.storm.batching.Partition r0;
        java.util.List $r1;

        r0 := @this: com.yahoo.bullet.storm.batching.Partition;

        $r1 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.List batches>;

        return $r1;
    }

    java.util.Map getKeyMapping()
    {
        com.yahoo.bullet.storm.batching.Partition r0;
        java.util.Map $r1;

        r0 := @this: com.yahoo.bullet.storm.batching.Partition;

        $r1 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.Map keyMapping>;

        return $r1;
    }

    java.util.List getData()
    {
        com.yahoo.bullet.storm.batching.Partition r0;
        java.util.List $r1;

        r0 := @this: com.yahoo.bullet.storm.batching.Partition;

        $r1 = r0.<com.yahoo.bullet.storm.batching.Partition: java.util.List data>;

        return $r1;
    }

    boolean[] getChanged()
    {
        com.yahoo.bullet.storm.batching.Partition r0;
        boolean[] $r1;

        r0 := @this: com.yahoo.bullet.storm.batching.Partition;

        $r1 = r0.<com.yahoo.bullet.storm.batching.Partition: boolean[] changed>;

        return $r1;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <com.yahoo.bullet.storm.batching.Partition: int INITIAL_BATCH_COUNT> = 1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/yahoo/bullet/storm/batching/Partition;");

        <com.yahoo.bullet.storm.batching.Partition: org.slf4j.Logger log> = $r0;

        return;
    }
}
