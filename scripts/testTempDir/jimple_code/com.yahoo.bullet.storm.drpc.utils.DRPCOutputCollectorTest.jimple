public class com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest extends java.lang.Object
{
    private com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector;

    public void <init>()
    {
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest r0;

        r0 := @this: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setup()
    {
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest r0;
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector $r1;

        r0 := @this: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest;

        $r1 = new com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector;

        specialinvoke $r1.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: void <init>()>();

        r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector> = $r1;

        return;
    }

    public void testSpoutEmit()
    {
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest r0;
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector $r1, $r2, $r3, $r6, $r11, $r14, $r15, $r16, $r17, $r33, $r34, $r35;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Object[] $r5, $r10, $r22, $r29;
        java.lang.Integer $r7, $r12, $r23, $r30;
        java.util.List $r8, $r13, r18, r20, $r24, r27, $r31, $r38, $r39;
        int $i0;
        java.lang.Object $r19, $r21, $r25, $r26, $r28, $r32;
        org.apache.storm.tuple.Values $r36, $r37;

        r0 := @this: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest;

        $r1 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z0 = virtualinvoke $r1.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean haveOutput()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z0);

        $r2 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z1 = virtualinvoke $r2.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isAcked()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z1);

        $r3 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z2 = virtualinvoke $r3.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isFailed()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z2);

        $r6 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $r36 = new org.apache.storm.tuple.Values;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = "bar";

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r5[1] = $r7;

        specialinvoke $r36.<org.apache.storm.tuple.Values: void <init>(java.lang.Object[])>($r5);

        $r38 = (java.util.List) $r36;

        $r8 = virtualinvoke $r6.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: java.util.List emit(java.lang.String,java.util.List,java.lang.Object)>("foo", $r38, "id1");

        staticinvoke <org.testng.Assert: void assertNull(java.lang.Object)>($r8);

        $r11 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $r37 = new org.apache.storm.tuple.Values;

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = "baz";

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r10[1] = $r12;

        specialinvoke $r37.<org.apache.storm.tuple.Values: void <init>(java.lang.Object[])>($r10);

        $r39 = (java.util.List) $r37;

        $r13 = virtualinvoke $r11.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: java.util.List emit(java.lang.String,java.util.List,java.lang.Object)>("bar", $r39, "id2");

        staticinvoke <org.testng.Assert: void assertNull(java.lang.Object)>($r13);

        $r14 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z3 = virtualinvoke $r14.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean haveOutput()>();

        staticinvoke <org.testng.Assert: void assertTrue(boolean)>($z3);

        $r15 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z4 = virtualinvoke $r15.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isAcked()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z4);

        $r16 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z5 = virtualinvoke $r16.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isFailed()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z5);

        $r17 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        r18 = virtualinvoke $r17.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: java.util.List reset()>();

        staticinvoke <org.testng.Assert: void assertNotNull(java.lang.Object)>(r18);

        $i0 = interfaceinvoke r18.<java.util.List: int size()>();

        staticinvoke <org.testng.Assert: void assertEquals(int,int)>($i0, 2);

        $r19 = interfaceinvoke r18.<java.util.List: java.lang.Object get(int)>(0);

        r20 = (java.util.List) $r19;

        $r21 = interfaceinvoke r20.<java.util.List: java.lang.Object get(int)>(0);

        $r22 = newarray (java.io.Serializable)[2];

        $r22[0] = "bar";

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r22[1] = $r23;

        $r24 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r22);

        staticinvoke <org.testng.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r24);

        $r25 = interfaceinvoke r20.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.testng.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r25, "id1");

        $r26 = interfaceinvoke r18.<java.util.List: java.lang.Object get(int)>(1);

        r27 = (java.util.List) $r26;

        $r28 = interfaceinvoke r27.<java.util.List: java.lang.Object get(int)>(0);

        $r29 = newarray (java.io.Serializable)[2];

        $r29[0] = "baz";

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r29[1] = $r30;

        $r31 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r29);

        staticinvoke <org.testng.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r28, $r31);

        $r32 = interfaceinvoke r27.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.testng.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r32, "id2");

        $r33 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z6 = virtualinvoke $r33.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean haveOutput()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z6);

        $r34 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z7 = virtualinvoke $r34.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isAcked()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z7);

        $r35 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z8 = virtualinvoke $r35.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isFailed()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z8);

        return;
    }

    public void testFailing()
    {
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest r0;
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest;

        $r1 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z0 = virtualinvoke $r1.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean haveOutput()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z0);

        $r2 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z1 = virtualinvoke $r2.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isAcked()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z1);

        $r3 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z2 = virtualinvoke $r3.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isFailed()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z2);

        $r4 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: void fail(org.apache.storm.tuple.Tuple)>(null);

        $r5 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z3 = virtualinvoke $r5.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean haveOutput()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z3);

        $r6 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z4 = virtualinvoke $r6.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isAcked()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z4);

        $r7 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z5 = virtualinvoke $r7.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isFailed()>();

        staticinvoke <org.testng.Assert: void assertTrue(boolean)>($z5);

        return;
    }

    public void testAcking()
    {
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest r0;
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest;

        $r1 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z0 = virtualinvoke $r1.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean haveOutput()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z0);

        $r2 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z1 = virtualinvoke $r2.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isAcked()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z1);

        $r3 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z2 = virtualinvoke $r3.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isFailed()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z2);

        $r4 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: void ack(org.apache.storm.tuple.Tuple)>(null);

        $r5 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z3 = virtualinvoke $r5.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean haveOutput()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z3);

        $r6 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z4 = virtualinvoke $r6.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isAcked()>();

        staticinvoke <org.testng.Assert: void assertTrue(boolean)>($z4);

        $r7 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z5 = virtualinvoke $r7.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isFailed()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z5);

        return;
    }

    public void testingMultipleResetsWithoutEmitting()
    {
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest r0;
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector $r1, $r2, $r3, $r6, $r9, $r10, $r11, $r12, $r14, $r16, $r25, $r26, $r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Object[] $r5, $r21;
        java.lang.Integer $r7, $r22;
        java.util.List $r8, r13, $r15, $r17, r19, $r23, $r29;
        int $i0;
        java.lang.Object $r18, $r20, $r24;
        org.apache.storm.tuple.Values $r28;

        r0 := @this: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest;

        $r1 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z0 = virtualinvoke $r1.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean haveOutput()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z0);

        $r2 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z1 = virtualinvoke $r2.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isAcked()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z1);

        $r3 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z2 = virtualinvoke $r3.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isFailed()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z2);

        $r6 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $r28 = new org.apache.storm.tuple.Values;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = "bar";

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r5[1] = $r7;

        specialinvoke $r28.<org.apache.storm.tuple.Values: void <init>(java.lang.Object[])>($r5);

        $r29 = (java.util.List) $r28;

        $r8 = virtualinvoke $r6.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: java.util.List emit(java.lang.String,java.util.List,java.lang.Object)>("foo", $r29, "id1");

        staticinvoke <org.testng.Assert: void assertNull(java.lang.Object)>($r8);

        $r9 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z3 = virtualinvoke $r9.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean haveOutput()>();

        staticinvoke <org.testng.Assert: void assertTrue(boolean)>($z3);

        $r10 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z4 = virtualinvoke $r10.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isAcked()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z4);

        $r11 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z5 = virtualinvoke $r11.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isFailed()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z5);

        $r12 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        r13 = virtualinvoke $r12.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: java.util.List reset()>();

        $r14 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $r15 = virtualinvoke $r14.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: java.util.List reset()>();

        staticinvoke <org.testng.Assert: void assertNull(java.lang.Object)>($r15);

        $r16 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $r17 = virtualinvoke $r16.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: java.util.List reset()>();

        staticinvoke <org.testng.Assert: void assertNull(java.lang.Object)>($r17);

        staticinvoke <org.testng.Assert: void assertNotNull(java.lang.Object)>(r13);

        $i0 = interfaceinvoke r13.<java.util.List: int size()>();

        staticinvoke <org.testng.Assert: void assertEquals(int,int)>($i0, 1);

        $r18 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>(0);

        r19 = (java.util.List) $r18;

        $r20 = interfaceinvoke r19.<java.util.List: java.lang.Object get(int)>(0);

        $r21 = newarray (java.io.Serializable)[2];

        $r21[0] = "bar";

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r21[1] = $r22;

        $r23 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r21);

        staticinvoke <org.testng.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r20, $r23);

        $r24 = interfaceinvoke r19.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.testng.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r24, "id1");

        $r25 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z6 = virtualinvoke $r25.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean haveOutput()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z6);

        $r26 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z7 = virtualinvoke $r26.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isAcked()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z7);

        $r27 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z8 = virtualinvoke $r27.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isFailed()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z8);

        return;
    }

    public void testFlush()
    {
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest r0;
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector $r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest;

        $r1 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        virtualinvoke $r1.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: void flush()>();

        $r2 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z0 = virtualinvoke $r2.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean haveOutput()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z0);

        $r3 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z1 = virtualinvoke $r3.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isAcked()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z1);

        $r4 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $z2 = virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: boolean isFailed()>();

        staticinvoke <org.testng.Assert: void assertFalse(boolean)>($z2);

        return;
    }

    public void testReportError()
    {
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest r0;
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector $r1;

        r0 := @this: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest;

        $r1 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        virtualinvoke $r1.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: void reportError(java.lang.Throwable)>(null);

        return;
    }

    public void testResetTimeout()
    {
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest r0;
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector $r1;

        r0 := @this: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest;

        $r1 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        virtualinvoke $r1.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: void resetTimeout(org.apache.storm.tuple.Tuple)>(null);

        return;
    }

    public void testBoltEmit()
    {
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest r0;
        java.util.Collection $r1;
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector $r2;

        r0 := @this: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest;

        $r2 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $r1 = (java.util.Collection) null;

        virtualinvoke $r2.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: java.util.List emit(java.lang.String,java.util.Collection,java.util.List)>(null, $r1, null);

        return;
    }

    public void testBoltEmitDirect()
    {
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest r0;
        java.util.Collection $r1;
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector $r2;

        r0 := @this: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest;

        $r2 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $r1 = (java.util.Collection) null;

        virtualinvoke $r2.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: void emitDirect(int,java.lang.String,java.util.Collection,java.util.List)>(0, null, $r1, null);

        return;
    }

    public void testSpoutEmitDirect()
    {
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest r0;
        java.util.List $r1;
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector $r2;

        r0 := @this: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest;

        $r2 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        $r1 = (java.util.List) null;

        virtualinvoke $r2.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: void emitDirect(int,java.lang.String,java.util.List,java.lang.Object)>(0, null, $r1, null);

        return;
    }

    public void testGetPendingCount()
    {
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest r0;
        com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector $r1;

        r0 := @this: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest;

        $r1 = r0.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollectorTest: com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector collector>;

        virtualinvoke $r1.<com.yahoo.bullet.storm.drpc.utils.DRPCOutputCollector: long getPendingCount()>();

        return;
    }
}
