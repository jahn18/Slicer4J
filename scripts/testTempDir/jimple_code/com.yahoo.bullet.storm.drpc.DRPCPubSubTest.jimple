public class com.yahoo.bullet.storm.drpc.DRPCPubSubTest extends java.lang.Object
{
    private com.yahoo.bullet.storm.drpc.DRPCConfig config;
    private org.apache.storm.utils.DRPCClient$LocalOverride override;

    public void <init>()
    {
        com.yahoo.bullet.storm.drpc.DRPCPubSubTest r0;

        r0 := @this: com.yahoo.bullet.storm.drpc.DRPCPubSubTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void bootstrap()
    {
        com.yahoo.bullet.storm.drpc.DRPCPubSubTest r0;
        org.apache.storm.LocalDRPC $r3;
        org.apache.storm.utils.DRPCClient$LocalOverride $r4;
        org.apache.storm.ILocalDRPC $r5;

        r0 := @this: com.yahoo.bullet.storm.drpc.DRPCPubSubTest;

        $r4 = new org.apache.storm.utils.DRPCClient$LocalOverride;

        $r3 = new org.apache.storm.LocalDRPC;

        specialinvoke $r3.<org.apache.storm.LocalDRPC: void <init>()>();

        $r5 = (org.apache.storm.ILocalDRPC) $r3;

        specialinvoke $r4.<org.apache.storm.utils.DRPCClient$LocalOverride: void <init>(org.apache.storm.ILocalDRPC)>($r5);

        r0.<com.yahoo.bullet.storm.drpc.DRPCPubSubTest: org.apache.storm.utils.DRPCClient$LocalOverride override> = $r4;

        return;
    }

    public void destroy() throws java.lang.Exception
    {
        com.yahoo.bullet.storm.drpc.DRPCPubSubTest r0;
        org.apache.storm.utils.DRPCClient$LocalOverride $r1;

        r0 := @this: com.yahoo.bullet.storm.drpc.DRPCPubSubTest;

        $r1 = r0.<com.yahoo.bullet.storm.drpc.DRPCPubSubTest: org.apache.storm.utils.DRPCClient$LocalOverride override>;

        virtualinvoke $r1.<org.apache.storm.utils.DRPCClient$LocalOverride: void close()>();

        return;
    }

    public void setup()
    {
        com.yahoo.bullet.storm.drpc.DRPCPubSubTest r0;
        com.yahoo.bullet.storm.drpc.DRPCConfig $r1, $r6, $r10;
        com.yahoo.bullet.storm.testing.CustomTopologyContext $r2;
        java.lang.Integer $r3;
        java.util.List $r4;
        com.yahoo.bullet.common.Config $r7;
        java.util.Optional $r8;
        java.util.Map r9;

        r0 := @this: com.yahoo.bullet.storm.drpc.DRPCPubSubTest;

        $r1 = new com.yahoo.bullet.storm.drpc.DRPCConfig;

        specialinvoke $r1.<com.yahoo.bullet.storm.drpc.DRPCConfig: void <init>(java.lang.String)>("test_drpc_config.yaml");

        r0.<com.yahoo.bullet.storm.drpc.DRPCPubSubTest: com.yahoo.bullet.storm.drpc.DRPCConfig config> = $r1;

        $r2 = new com.yahoo.bullet.storm.testing.CustomTopologyContext;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r3);

        specialinvoke $r2.<com.yahoo.bullet.storm.testing.CustomTopologyContext: void <init>(java.util.List,java.lang.String,int)>($r4, "foo", 0);

        $r6 = r0.<com.yahoo.bullet.storm.drpc.DRPCPubSubTest: com.yahoo.bullet.storm.drpc.DRPCConfig config>;

        virtualinvoke $r6.<com.yahoo.bullet.storm.drpc.DRPCConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.storm.context", $r2);

        $r7 = new com.yahoo.bullet.common.Config;

        specialinvoke $r7.<com.yahoo.bullet.common.Config: void <init>(java.lang.String)>("test_storm_config.yaml");

        $r8 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        r9 = virtualinvoke $r7.<com.yahoo.bullet.common.Config: java.util.Map getAll(java.util.Optional)>($r8);

        $r10 = r0.<com.yahoo.bullet.storm.drpc.DRPCPubSubTest: com.yahoo.bullet.storm.drpc.DRPCConfig config>;

        virtualinvoke $r10.<com.yahoo.bullet.storm.drpc.DRPCConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.storm.config", r9);

        return;
    }

    public void testCreation() throws java.lang.Exception
    {
        com.yahoo.bullet.storm.drpc.DRPCPubSub $r0;
        com.yahoo.bullet.storm.drpc.DRPCPubSubTest r1;
        com.yahoo.bullet.storm.drpc.DRPCConfig $r2;

        r1 := @this: com.yahoo.bullet.storm.drpc.DRPCPubSubTest;

        $r0 = new com.yahoo.bullet.storm.drpc.DRPCPubSub;

        $r2 = r1.<com.yahoo.bullet.storm.drpc.DRPCPubSubTest: com.yahoo.bullet.storm.drpc.DRPCConfig config>;

        specialinvoke $r0.<com.yahoo.bullet.storm.drpc.DRPCPubSub: void <init>(com.yahoo.bullet.common.BulletConfig)>($r2);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r0);

        return;
    }

    public void testQueryProcessingSingleInstanceTypes() throws java.lang.Exception
    {
        com.yahoo.bullet.storm.drpc.DRPCPubSubTest r0;
        com.yahoo.bullet.pubsub.PubSub$Context $r1;
        com.yahoo.bullet.storm.drpc.DRPCConfig $r2, $r5;
        java.lang.String $r3;
        com.yahoo.bullet.storm.drpc.DRPCPubSub $r4;
        com.yahoo.bullet.pubsub.Publisher r7;
        com.yahoo.bullet.pubsub.Subscriber r8;
        boolean $z0, $z1;

        r0 := @this: com.yahoo.bullet.storm.drpc.DRPCPubSubTest;

        $r2 = r0.<com.yahoo.bullet.storm.drpc.DRPCPubSubTest: com.yahoo.bullet.storm.drpc.DRPCConfig config>;

        $r1 = <com.yahoo.bullet.pubsub.PubSub$Context: com.yahoo.bullet.pubsub.PubSub$Context QUERY_PROCESSING>;

        $r3 = virtualinvoke $r1.<com.yahoo.bullet.pubsub.PubSub$Context: java.lang.String name()>();

        virtualinvoke $r2.<com.yahoo.bullet.storm.drpc.DRPCConfig: void set(java.lang.String,java.lang.Object)>("bullet.pubsub.context.name", $r3);

        $r4 = new com.yahoo.bullet.storm.drpc.DRPCPubSub;

        $r5 = r0.<com.yahoo.bullet.storm.drpc.DRPCPubSubTest: com.yahoo.bullet.storm.drpc.DRPCConfig config>;

        specialinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: void <init>(com.yahoo.bullet.common.BulletConfig)>($r5);

        r7 = virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: com.yahoo.bullet.pubsub.Publisher getPublisher()>();

        r8 = virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: com.yahoo.bullet.pubsub.Subscriber getSubscriber()>();

        $z0 = r7 instanceof com.yahoo.bullet.storm.drpc.DRPCResultPublisher;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = r8 instanceof com.yahoo.bullet.storm.drpc.DRPCQuerySubscriber;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testQueryProcessingMultipleInstancesTypes() throws java.lang.Exception
    {
        com.yahoo.bullet.storm.drpc.DRPCPubSubTest r0;
        com.yahoo.bullet.pubsub.PubSub$Context $r1;
        com.yahoo.bullet.storm.drpc.DRPCConfig $r2, $r5;
        java.lang.String $r3;
        com.yahoo.bullet.storm.drpc.DRPCPubSub $r4;
        java.util.List r7, r8;
        int $i0, $i2;
        long $l1, $l3;
        java.util.function.Consumer $r9, $r10;

        r0 := @this: com.yahoo.bullet.storm.drpc.DRPCPubSubTest;

        $r2 = r0.<com.yahoo.bullet.storm.drpc.DRPCPubSubTest: com.yahoo.bullet.storm.drpc.DRPCConfig config>;

        $r1 = <com.yahoo.bullet.pubsub.PubSub$Context: com.yahoo.bullet.pubsub.PubSub$Context QUERY_PROCESSING>;

        $r3 = virtualinvoke $r1.<com.yahoo.bullet.pubsub.PubSub$Context: java.lang.String name()>();

        virtualinvoke $r2.<com.yahoo.bullet.storm.drpc.DRPCConfig: void set(java.lang.String,java.lang.Object)>("bullet.pubsub.context.name", $r3);

        $r4 = new com.yahoo.bullet.storm.drpc.DRPCPubSub;

        $r5 = r0.<com.yahoo.bullet.storm.drpc.DRPCPubSubTest: com.yahoo.bullet.storm.drpc.DRPCConfig config>;

        specialinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: void <init>(com.yahoo.bullet.common.BulletConfig)>($r5);

        r7 = virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: java.util.List getPublishers(int)>(2);

        r8 = virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: java.util.List getSubscribers(int)>(4);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r7);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r8);

        $i0 = interfaceinvoke r7.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 2L);

        $r9 = staticinvoke <com.yahoo.bullet.storm.drpc.DRPCPubSubTest$lambda_testQueryProcessingMultipleInstancesTypes_0__205: java.util.function.Consumer bootstrap$()>();

        interfaceinvoke r7.<java.util.List: void forEach(java.util.function.Consumer)>($r9);

        $i2 = interfaceinvoke r8.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 4L);

        $r10 = staticinvoke <com.yahoo.bullet.storm.drpc.DRPCPubSubTest$lambda_testQueryProcessingMultipleInstancesTypes_1__206: java.util.function.Consumer bootstrap$()>();

        interfaceinvoke r8.<java.util.List: void forEach(java.util.function.Consumer)>($r10);

        return;
    }

    public void testQuerySubmissionSingleInstanceTypes() throws java.lang.Exception
    {
        com.yahoo.bullet.storm.drpc.DRPCPubSubTest r0;
        com.yahoo.bullet.pubsub.PubSub$Context $r1;
        com.yahoo.bullet.storm.drpc.DRPCConfig $r2, $r5;
        java.lang.String $r3;
        com.yahoo.bullet.storm.drpc.DRPCPubSub $r4;
        com.yahoo.bullet.pubsub.Publisher r7;
        com.yahoo.bullet.pubsub.Subscriber r8;
        boolean $z0, $z1;

        r0 := @this: com.yahoo.bullet.storm.drpc.DRPCPubSubTest;

        $r2 = r0.<com.yahoo.bullet.storm.drpc.DRPCPubSubTest: com.yahoo.bullet.storm.drpc.DRPCConfig config>;

        $r1 = <com.yahoo.bullet.pubsub.PubSub$Context: com.yahoo.bullet.pubsub.PubSub$Context QUERY_SUBMISSION>;

        $r3 = virtualinvoke $r1.<com.yahoo.bullet.pubsub.PubSub$Context: java.lang.String name()>();

        virtualinvoke $r2.<com.yahoo.bullet.storm.drpc.DRPCConfig: void set(java.lang.String,java.lang.Object)>("bullet.pubsub.context.name", $r3);

        $r4 = new com.yahoo.bullet.storm.drpc.DRPCPubSub;

        $r5 = r0.<com.yahoo.bullet.storm.drpc.DRPCPubSubTest: com.yahoo.bullet.storm.drpc.DRPCConfig config>;

        specialinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: void <init>(com.yahoo.bullet.common.BulletConfig)>($r5);

        r7 = virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: com.yahoo.bullet.pubsub.Publisher getPublisher()>();

        r8 = virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: com.yahoo.bullet.pubsub.Subscriber getSubscriber()>();

        $z0 = r7 instanceof com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = r8 instanceof com.yahoo.bullet.storm.drpc.DRPCQueryResultPubscriber;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testQuerySubmissionOneInstanceIsTheSameInstance() throws java.lang.Exception
    {
        com.yahoo.bullet.storm.drpc.DRPCPubSubTest r0;
        com.yahoo.bullet.pubsub.PubSub$Context $r1;
        com.yahoo.bullet.storm.drpc.DRPCConfig $r2, $r5;
        java.lang.String $r3;
        com.yahoo.bullet.storm.drpc.DRPCPubSub $r4;
        com.yahoo.bullet.pubsub.Publisher r7, $r9, $r12;
        com.yahoo.bullet.pubsub.Subscriber r8, $r10, $r11;
        java.util.List r13, r14;
        int $i0, $i2;
        long $l1, $l3;
        java.lang.Object $r15, $r16;

        r0 := @this: com.yahoo.bullet.storm.drpc.DRPCPubSubTest;

        $r2 = r0.<com.yahoo.bullet.storm.drpc.DRPCPubSubTest: com.yahoo.bullet.storm.drpc.DRPCConfig config>;

        $r1 = <com.yahoo.bullet.pubsub.PubSub$Context: com.yahoo.bullet.pubsub.PubSub$Context QUERY_SUBMISSION>;

        $r3 = virtualinvoke $r1.<com.yahoo.bullet.pubsub.PubSub$Context: java.lang.String name()>();

        virtualinvoke $r2.<com.yahoo.bullet.storm.drpc.DRPCConfig: void set(java.lang.String,java.lang.Object)>("bullet.pubsub.context.name", $r3);

        $r4 = new com.yahoo.bullet.storm.drpc.DRPCPubSub;

        $r5 = r0.<com.yahoo.bullet.storm.drpc.DRPCPubSubTest: com.yahoo.bullet.storm.drpc.DRPCConfig config>;

        specialinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: void <init>(com.yahoo.bullet.common.BulletConfig)>($r5);

        r7 = virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: com.yahoo.bullet.pubsub.Publisher getPublisher()>();

        r8 = virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: com.yahoo.bullet.pubsub.Subscriber getSubscriber()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>(r8, r7);

        $r9 = virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: com.yahoo.bullet.pubsub.Publisher getPublisher()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r9, r7);

        $r10 = virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: com.yahoo.bullet.pubsub.Subscriber getSubscriber()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r10, r8);

        $r11 = virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: com.yahoo.bullet.pubsub.Subscriber getSubscriber()>();

        $r12 = virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: com.yahoo.bullet.pubsub.Publisher getPublisher()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r11, $r12);

        r13 = virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: java.util.List getPublishers(int)>(42);

        r14 = virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: java.util.List getSubscribers(int)>(20);

        $i0 = interfaceinvoke r13.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 1L);

        $i2 = interfaceinvoke r14.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 1L);

        $r15 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, r7);

        $r16 = interfaceinvoke r14.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, r8);

        return;
    }

    public void testQuerySubmissionMultipleInstancesAreTheSameInstances() throws java.lang.Exception
    {
        com.yahoo.bullet.storm.drpc.DRPCPubSubTest r0;
        com.yahoo.bullet.pubsub.PubSub$Context $r1;
        com.yahoo.bullet.storm.drpc.DRPCConfig $r2, $r5;
        java.lang.String $r3;
        com.yahoo.bullet.storm.drpc.DRPCPubSub $r4;
        java.util.List r7, r8, $r9, $r10;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;
        com.yahoo.bullet.pubsub.Publisher r11;
        com.yahoo.bullet.pubsub.Subscriber r12;
        java.lang.Object $r13;

        r0 := @this: com.yahoo.bullet.storm.drpc.DRPCPubSubTest;

        $r2 = r0.<com.yahoo.bullet.storm.drpc.DRPCPubSubTest: com.yahoo.bullet.storm.drpc.DRPCConfig config>;

        $r1 = <com.yahoo.bullet.pubsub.PubSub$Context: com.yahoo.bullet.pubsub.PubSub$Context QUERY_SUBMISSION>;

        $r3 = virtualinvoke $r1.<com.yahoo.bullet.pubsub.PubSub$Context: java.lang.String name()>();

        virtualinvoke $r2.<com.yahoo.bullet.storm.drpc.DRPCConfig: void set(java.lang.String,java.lang.Object)>("bullet.pubsub.context.name", $r3);

        $r4 = new com.yahoo.bullet.storm.drpc.DRPCPubSub;

        $r5 = r0.<com.yahoo.bullet.storm.drpc.DRPCPubSubTest: com.yahoo.bullet.storm.drpc.DRPCConfig config>;

        specialinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: void <init>(com.yahoo.bullet.common.BulletConfig)>($r5);

        r7 = virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: java.util.List getPublishers(int)>(10);

        r8 = virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: java.util.List getSubscribers(int)>(20);

        $i0 = interfaceinvoke r7.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 10L);

        $i2 = interfaceinvoke r8.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 10L);

        $r9 = virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: java.util.List getSubscribers(int)>(1);

        $i4 = interfaceinvoke $r9.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, 10L);

        $r10 = virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: java.util.List getSubscribers(int)>(10);

        $i6 = interfaceinvoke $r10.<java.util.List: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, 10L);

        r11 = virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: com.yahoo.bullet.pubsub.Publisher getPublisher()>();

        r12 = virtualinvoke $r4.<com.yahoo.bullet.storm.drpc.DRPCPubSub: com.yahoo.bullet.pubsub.Subscriber getSubscriber()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>(r12, r11);

        $r13 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>(r11, $r13);

        return;
    }

    public static void lambda$testQueryProcessingMultipleInstancesTypes$1(com.yahoo.bullet.pubsub.Subscriber)
    {
        com.yahoo.bullet.pubsub.Subscriber r0;
        boolean $z0;

        r0 := @parameter0: com.yahoo.bullet.pubsub.Subscriber;

        $z0 = r0 instanceof com.yahoo.bullet.storm.drpc.DRPCQuerySubscriber;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public static void lambda$testQueryProcessingMultipleInstancesTypes$0(com.yahoo.bullet.pubsub.Publisher)
    {
        com.yahoo.bullet.pubsub.Publisher r0;
        boolean $z0;

        r0 := @parameter0: com.yahoo.bullet.pubsub.Publisher;

        $z0 = r0 instanceof com.yahoo.bullet.storm.drpc.DRPCResultPublisher;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }
}
