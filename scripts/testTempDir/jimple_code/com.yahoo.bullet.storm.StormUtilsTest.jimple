public class com.yahoo.bullet.storm.StormUtilsTest extends java.lang.Object
{
    private static final int NUM_TESTS;
    private static final int HASH_COUNT;
    private com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder;
    private com.yahoo.bullet.storm.BulletStormConfig config;

    public void <init>()
    {
        com.yahoo.bullet.storm.StormUtilsTest r0;

        r0 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private com.yahoo.bullet.storm.BulletStormConfig makeInvalidConfig(com.yahoo.bullet.storm.BulletStormConfig)
    {
        com.yahoo.bullet.storm.BulletStormConfig r0;
        com.yahoo.bullet.storm.StormUtilsTest$Unserializable $r1;
        com.yahoo.bullet.storm.StormUtilsTest r2;

        r2 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        r0 := @parameter0: com.yahoo.bullet.storm.BulletStormConfig;

        $r1 = new com.yahoo.bullet.storm.StormUtilsTest$Unserializable;

        specialinvoke $r1.<com.yahoo.bullet.storm.StormUtilsTest$Unserializable: void <init>(com.yahoo.bullet.storm.StormUtilsTest$1)>(null);

        virtualinvoke r0.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.custom.unserializable", $r1);

        return r0;
    }

    private void submitWithTopology(java.lang.String)
    {
        com.yahoo.bullet.storm.StormUtilsTest r0;
        com.yahoo.bullet.storm.BulletStormConfig $r1, $r2;
        java.lang.String r3;
        com.yahoo.bullet.storm.testing.CustomTopologyBuilder $r4;
        java.lang.Exception $r5;

        r0 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        r3 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r2 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig makeInvalidConfig(com.yahoo.bullet.storm.BulletStormConfig)>($r1);

        $r4 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        staticinvoke <com.yahoo.bullet.storm.StormUtils: void submit(com.yahoo.bullet.storm.BulletStormConfig,java.lang.String,org.apache.storm.topology.TopologyBuilder)>($r2, r3, $r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void submitWithConfig(com.yahoo.bullet.storm.BulletStormConfig)
    {
        com.yahoo.bullet.storm.StormUtilsTest r0;
        com.yahoo.bullet.storm.BulletStormConfig r1, $r2;
        com.yahoo.bullet.storm.testing.CustomTopologyBuilder $r3;
        java.lang.Exception $r4;

        r0 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        r1 := @parameter0: com.yahoo.bullet.storm.BulletStormConfig;

     label1:
        $r2 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig makeInvalidConfig(com.yahoo.bullet.storm.BulletStormConfig)>(r1);

        $r3 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        staticinvoke <com.yahoo.bullet.storm.StormUtils: void submit(com.yahoo.bullet.storm.BulletStormConfig,org.apache.storm.topology.TopologyBuilder)>($r2, $r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void submitWithTopologyAndConfig(java.lang.String, com.yahoo.bullet.storm.BulletStormConfig)
    {
        com.yahoo.bullet.storm.StormUtilsTest r0;
        com.yahoo.bullet.storm.BulletStormConfig r1, $r2;
        java.lang.String r3;
        com.yahoo.bullet.storm.testing.CustomTopologyBuilder $r4;
        java.lang.Exception $r5;

        r0 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: com.yahoo.bullet.storm.BulletStormConfig;

     label1:
        $r2 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig makeInvalidConfig(com.yahoo.bullet.storm.BulletStormConfig)>(r1);

        $r4 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        staticinvoke <com.yahoo.bullet.storm.StormUtils: void submit(com.yahoo.bullet.storm.BulletStormConfig,java.lang.String,org.apache.storm.topology.TopologyBuilder)>($r2, r3, $r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)
    {
        com.yahoo.bullet.storm.StormUtilsTest r0;
        com.yahoo.bullet.storm.testing.CustomTopologyBuilder $r1;
        java.util.List $r2;
        java.util.stream.Stream $r3, $r6;
        java.lang.String r4;
        java.util.function.Predicate $r5;
        java.util.Optional $r7;
        java.lang.Object $r8;
        com.yahoo.bullet.storm.testing.CustomBoltDeclarer $r9;

        r0 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r2 = virtualinvoke $r1.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: java.util.List getCreatedBolts()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.stream.Stream stream()>();

        $r5 = staticinvoke <com.yahoo.bullet.storm.StormUtilsTest$lambda_getBolt_0__219: java.util.function.Predicate bootstrap$(java.lang.String)>(r4);

        $r6 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r5);

        $r7 = interfaceinvoke $r6.<java.util.stream.Stream: java.util.Optional findFirst()>();

        $r8 = virtualinvoke $r7.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);

        $r9 = (com.yahoo.bullet.storm.testing.CustomBoltDeclarer) $r8;

        return $r9;
    }

    private com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)
    {
        com.yahoo.bullet.storm.StormUtilsTest r0;
        com.yahoo.bullet.storm.testing.CustomTopologyBuilder $r1;
        java.util.List $r2;
        java.util.stream.Stream $r3, $r6;
        java.lang.String r4;
        java.util.function.Predicate $r5;
        java.util.Optional $r7;
        java.lang.Object $r8;
        com.yahoo.bullet.storm.testing.CustomSpoutDeclarer $r9;

        r0 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r2 = virtualinvoke $r1.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: java.util.List getCreatedSpouts()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.stream.Stream stream()>();

        $r5 = staticinvoke <com.yahoo.bullet.storm.StormUtilsTest$lambda_getSpout_1__220: java.util.function.Predicate bootstrap$(java.lang.String)>(r4);

        $r6 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r5);

        $r7 = interfaceinvoke $r6.<java.util.stream.Stream: java.util.Optional findFirst()>();

        $r8 = virtualinvoke $r7.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);

        $r9 = (com.yahoo.bullet.storm.testing.CustomSpoutDeclarer) $r8;

        return $r9;
    }

    private void assertContains(java.util.List, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        org.apache.commons.lang3.tuple.Pair r2;
        java.util.List r3;
        java.util.stream.Stream $r4;
        java.util.function.Predicate $r6;
        boolean $z0;
        com.yahoo.bullet.storm.StormUtilsTest r7;

        r7 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        r3 := @parameter0: java.util.List;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r2 = staticinvoke <org.apache.commons.lang3.tuple.Pair: org.apache.commons.lang3.tuple.Pair of(java.lang.Object,java.lang.Object)>(r0, r1);

        $r4 = interfaceinvoke r3.<java.util.List: java.util.stream.Stream stream()>();

        virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = staticinvoke <com.yahoo.bullet.storm.StormUtilsTest$equals__221: java.util.function.Predicate bootstrap$(org.apache.commons.lang3.tuple.Pair)>(r2);

        $z0 = interfaceinvoke $r4.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>($r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    private transient void assertContains(java.util.Map, java.lang.String, java.lang.String, org.apache.storm.tuple.Fields[])
    {
        java.util.Map r0;
        java.lang.String r1, r2;
        org.apache.commons.lang3.tuple.Pair $r3;
        java.lang.Object $r4, $r8, $r11;
        java.util.List r5, r7, $r10, $r13;
        org.apache.storm.tuple.Fields[] r6;
        int $i0, $i2, $i4, i5;
        long $l1, $l3;
        org.apache.storm.tuple.Fields $r9, $r12;
        com.yahoo.bullet.storm.StormUtilsTest r14;

        r14 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r6 := @parameter3: org.apache.storm.tuple.Fields[];

        $r3 = staticinvoke <org.apache.commons.lang3.tuple.Pair: org.apache.commons.lang3.tuple.Pair of(java.lang.Object,java.lang.Object)>(r1, r2);

        $r4 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (java.util.List) $r4;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r5);

        r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r6);

        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        $l1 = (long) $i0;

        $i2 = interfaceinvoke r7.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        i5 = 0;

     label1:
        $i4 = interfaceinvoke r5.<java.util.List: int size()>();

        if i5 >= $i4 goto label2;

        $r8 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i5);

        $r9 = (org.apache.storm.tuple.Fields) $r8;

        $r10 = virtualinvoke $r9.<org.apache.storm.tuple.Fields: java.util.List toList()>();

        $r11 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(i5);

        $r12 = (org.apache.storm.tuple.Fields) $r11;

        $r13 = virtualinvoke $r12.<org.apache.storm.tuple.Fields: java.util.List toList()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r13);

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    private void assertContains(java.util.Map, java.lang.String, java.lang.String, java.lang.Class)
    {
        com.yahoo.bullet.storm.StormUtilsTest r0;
        java.util.Map r1;
        java.lang.String r2, r3;
        java.lang.Class r4;

        r0 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Class;

        return;
    }

    public void setup()
    {
        com.yahoo.bullet.storm.StormUtilsTest r0;
        com.yahoo.bullet.storm.testing.CustomTopologyBuilder $r1, $r2;
        com.yahoo.bullet.storm.BulletStormConfig $r3;

        r0 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        $r1 = new com.yahoo.bullet.storm.testing.CustomTopologyBuilder;

        specialinvoke $r1.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: void <init>()>();

        r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder> = $r1;

        $r2 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        virtualinvoke $r2.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: void setThrowExceptionOnCreate(boolean)>(0);

        $r3 = new com.yahoo.bullet.storm.BulletStormConfig;

        specialinvoke $r3.<com.yahoo.bullet.storm.BulletStormConfig: void <init>()>();

        r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config> = $r3;

        return;
    }

    public void testConstructor()
    {
        com.yahoo.bullet.storm.StormUtils $r0;
        com.yahoo.bullet.storm.StormUtilsTest r1;

        r1 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        $r0 = new com.yahoo.bullet.storm.StormUtils;

        specialinvoke $r0.<com.yahoo.bullet.storm.StormUtils: void <init>()>();

        return;
    }

    public void testHookingIntoExistingRecordSource()
    {
        com.yahoo.bullet.storm.StormUtilsTest r0;
        com.yahoo.bullet.storm.testing.CustomIRichSpout $r1;
        com.yahoo.bullet.storm.testing.CustomTopologyBuilder $r2, $r5, $r6, $r7, $r9;
        java.lang.Integer $r3, $r15, $r24, $r36, $r68, $r102, $r120;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        java.util.List $r8, $r10, r55, r59, $r60, r75, $r94, $r95, r109, $r111, $r112, r127, $r130, $r131;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15;
        com.yahoo.bullet.storm.testing.CustomSpoutDeclarer r11, r20, r32;
        org.apache.storm.topology.IRichSpout $r12, $r21, $r33;
        java.lang.Class $r13, $r22, $r34, $r46, $r66, $r100, $r118;
        java.lang.Number $r14, $r16, $r17, $r18, $r23, $r25, $r27, $r29, $r35, $r37, $r39, $r41, $r47, $r48, $r49, $r51, $r53, $r67, $r69, $r71, $r73, $r101, $r103, $r105, $r107, $r119, $r121, $r123, $r125;
        java.lang.String $r19, $r31, $r43, $r56, $r57, $r58, $r63, $r76, $r81, $r85, $r89, $r93, $r97, $r110, $r115, $r128, $r129, $r134;
        java.lang.Double $r26, $r28, $r30, $r38, $r40, $r42, $r50, $r52, $r54, $r70, $r72, $r74, $r104, $r106, $r108, $r122, $r124, $r126;
        com.yahoo.bullet.storm.testing.CustomBoltDeclarer r44, r64, r98, r116, r135;
        org.apache.storm.topology.IRichBolt $r45, $r65, $r99, $r117;
        java.util.Map $r61, $r62, r77, $r96, $r113, $r114, $r132, $r133;
        org.apache.storm.tuple.Fields[] $r78, $r82, $r86, $r90;
        org.apache.storm.tuple.Fields $r79, $r83, $r87, $r91;
        java.lang.String[] $r80, $r84, $r88, $r92;

        r0 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        $r2 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r1 = new com.yahoo.bullet.storm.testing.CustomIRichSpout;

        specialinvoke $r1.<com.yahoo.bullet.storm.testing.CustomIRichSpout: void <init>()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        virtualinvoke $r2.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: org.apache.storm.topology.SpoutDeclarer setSpout(java.lang.String,org.apache.storm.topology.IRichSpout,java.lang.Number)>("source", $r1, $r3);

        $r5 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $z0 = virtualinvoke $r5.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: boolean isTopologyCreated()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void submitWithTopology(java.lang.String)>("source");

        $r6 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $z1 = virtualinvoke $r6.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: boolean isTopologyCreated()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r7 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r8 = virtualinvoke $r7.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: java.util.List getCreatedSpouts()>();

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 3L);

        $r9 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r10 = virtualinvoke $r9.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: java.util.List getCreatedBolts()>();

        $i2 = interfaceinvoke $r10.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 4L);

        r11 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>("source");

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r11);

        $r12 = virtualinvoke r11.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: org.apache.storm.topology.IRichSpout getSpout()>();

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, class "Lcom/yahoo/bullet/storm/testing/CustomIRichSpout;");

        $r14 = virtualinvoke r11.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getParallelism()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        $r16 = virtualinvoke r11.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getCpuLoad()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r16);

        $r17 = virtualinvoke r11.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOnHeap()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r17);

        $r18 = virtualinvoke r11.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOffHeap()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r18);

        $r19 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        r20 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>($r19);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r20);

        $r21 = virtualinvoke r20.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: org.apache.storm.topology.IRichSpout getSpout()>();

        $r22 = virtualinvoke $r21.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r22, class "Lcom/yahoo/bullet/storm/TickSpout;");

        $r23 = virtualinvoke r20.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getParallelism()>();

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r23, $r24);

        $r25 = virtualinvoke r20.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getCpuLoad()>();

        $r26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r25, $r26);

        $r27 = virtualinvoke r20.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOnHeap()>();

        $r28 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(128.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r27, $r28);

        $r29 = virtualinvoke r20.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOffHeap()>();

        $r30 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r29, $r30);

        $r31 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        r32 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>($r31);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r32);

        $r33 = virtualinvoke r32.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: org.apache.storm.topology.IRichSpout getSpout()>();

        $r34 = virtualinvoke $r33.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r34, class "Lcom/yahoo/bullet/storm/QuerySpout;");

        $r35 = virtualinvoke r32.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getParallelism()>();

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r35, $r36);

        $r37 = virtualinvoke r32.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getCpuLoad()>();

        $r38 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r37, $r38);

        $r39 = virtualinvoke r32.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOnHeap()>();

        $r40 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r39, $r40);

        $r41 = virtualinvoke r32.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOffHeap()>();

        $r42 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r41, $r42);

        $r43 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        r44 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r43);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r44);

        $r45 = virtualinvoke r44.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r46 = virtualinvoke $r45.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r46, class "Lcom/yahoo/bullet/storm/FilterBolt;");

        $r47 = virtualinvoke r44.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r48 = <com.yahoo.bullet.storm.BulletStormConfig: java.lang.Number DEFAULT_FILTER_BOLT_PARALLELISM>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r47, $r48);

        $r49 = virtualinvoke r44.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r50 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(100.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r49, $r50);

        $r51 = virtualinvoke r44.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r52 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r51, $r52);

        $r53 = virtualinvoke r44.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r54 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r53, $r54);

        r55 = virtualinvoke r44.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $i4 = interfaceinvoke r55.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, 3L);

        $r56 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r55, $r56, "default");

        $r57 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r55, $r57, "default");

        $r58 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r55, $r58, "metadata");

        r59 = virtualinvoke r44.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i6 = interfaceinvoke r59.<java.util.List: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, 1L);

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r59, "source", "default");

        $r60 = virtualinvoke r44.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z2 = interfaceinvoke $r60.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r61 = virtualinvoke r44.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z3 = interfaceinvoke $r61.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r62 = virtualinvoke r44.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z4 = interfaceinvoke $r62.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r63 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        r64 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r63);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r64);

        $r65 = virtualinvoke r64.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r66 = virtualinvoke $r65.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r66, class "Lcom/yahoo/bullet/storm/JoinBolt;");

        $r67 = virtualinvoke r64.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r68 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r67, $r68);

        $r69 = virtualinvoke r64.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r70 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(100.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r69, $r70);

        $r71 = virtualinvoke r64.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r72 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(512.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r71, $r72);

        $r73 = virtualinvoke r64.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r74 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r73, $r74);

        r75 = virtualinvoke r64.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $i8 = interfaceinvoke r75.<java.util.List: int size()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, 1L);

        $r76 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r75, $r76, "default");

        r77 = virtualinvoke r64.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $i10 = interfaceinvoke r77.<java.util.Map: int size()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l11, 4L);

        $r81 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        $r78 = newarray (org.apache.storm.tuple.Fields)[1];

        $r79 = new org.apache.storm.tuple.Fields;

        $r80 = newarray (java.lang.String)[1];

        $r80[0] = "id";

        specialinvoke $r79.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r80);

        $r78[0] = $r79;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r77, $r81, "default", $r78);

        $r85 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        $r82 = newarray (org.apache.storm.tuple.Fields)[1];

        $r83 = new org.apache.storm.tuple.Fields;

        $r84 = newarray (java.lang.String)[1];

        $r84[0] = "id";

        specialinvoke $r83.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r84);

        $r82[0] = $r83;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r77, $r85, "metadata", $r82);

        $r89 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        $r86 = newarray (org.apache.storm.tuple.Fields)[1];

        $r87 = new org.apache.storm.tuple.Fields;

        $r88 = newarray (java.lang.String)[1];

        $r88[0] = "id";

        specialinvoke $r87.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r88);

        $r86[0] = $r87;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r77, $r89, "default", $r86);

        $r93 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        $r90 = newarray (org.apache.storm.tuple.Fields)[1];

        $r91 = new org.apache.storm.tuple.Fields;

        $r92 = newarray (java.lang.String)[1];

        $r92[0] = "id";

        specialinvoke $r91.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r92);

        $r90[0] = $r91;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r77, $r93, "error", $r90);

        $r94 = virtualinvoke r64.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $z5 = interfaceinvoke $r94.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r95 = virtualinvoke r64.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z6 = interfaceinvoke $r95.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r96 = virtualinvoke r64.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z7 = interfaceinvoke $r96.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r97 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String RESULT_COMPONENT>;

        r98 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r97);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r98);

        $r99 = virtualinvoke r98.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r100 = virtualinvoke $r99.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r100, class "Lcom/yahoo/bullet/storm/ResultBolt;");

        $r101 = virtualinvoke r98.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r102 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r101, $r102);

        $r103 = virtualinvoke r98.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r104 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r103, $r104);

        $r105 = virtualinvoke r98.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r106 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r105, $r106);

        $r107 = virtualinvoke r98.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r108 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r107, $r108);

        r109 = virtualinvoke r98.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i12 = interfaceinvoke r109.<java.util.List: int size()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l13, 1L);

        $r110 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r109, $r110, "default");

        $r111 = virtualinvoke r98.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $z8 = interfaceinvoke $r111.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r112 = virtualinvoke r98.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z9 = interfaceinvoke $r112.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $r113 = virtualinvoke r98.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z10 = interfaceinvoke $r113.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

        $r114 = virtualinvoke r98.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z11 = interfaceinvoke $r114.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

        $r115 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String LOOP_COMPONENT>;

        r116 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r115);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r116);

        $r117 = virtualinvoke r116.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r118 = virtualinvoke $r117.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r118, class "Lcom/yahoo/bullet/storm/LoopBolt;");

        $r119 = virtualinvoke r116.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r120 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r119, $r120);

        $r121 = virtualinvoke r116.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r122 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r121, $r122);

        $r123 = virtualinvoke r116.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r124 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r123, $r124);

        $r125 = virtualinvoke r116.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r126 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r125, $r126);

        r127 = virtualinvoke r116.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i14 = interfaceinvoke r127.<java.util.List: int size()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l15, 2L);

        $r128 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r127, $r128, "feedback");

        $r129 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r127, $r129, "feedback");

        $r130 = virtualinvoke r116.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $z12 = interfaceinvoke $r130.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        $r131 = virtualinvoke r116.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z13 = interfaceinvoke $r131.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        $r132 = virtualinvoke r116.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z14 = interfaceinvoke $r132.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

        $r133 = virtualinvoke r116.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z15 = interfaceinvoke $r133.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

        $r134 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String REPLAY_COMPONENT>;

        r135 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r134);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>(r135);

        return;
    }

    public void testHookingWithReplay()
    {
        com.yahoo.bullet.storm.StormUtilsTest r0;
        com.yahoo.bullet.storm.BulletStormConfig $r1, $r3, $r10;
        java.lang.Boolean $r2;
        com.yahoo.bullet.storm.testing.CustomIRichSpout $r5;
        com.yahoo.bullet.storm.testing.CustomTopologyBuilder $r6, $r9, $r11, $r12, $r14;
        java.lang.Integer $r7, $r20, $r29, $r41, $r74, $r98, $r116, $r135;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        java.util.List $r13, $r15, r60, r64, r65, r81, r84, $r91, r105, $r107, $r108, r123, $r126, $r127, r142, $r150, $r151;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19, $l21, $l23;
        com.yahoo.bullet.storm.testing.CustomSpoutDeclarer r16, r25, r37;
        org.apache.storm.topology.IRichSpout $r17, $r26, $r38;
        java.lang.Class $r18, $r27, $r39, $r51, $r72, $r96, $r114, $r133;
        java.lang.Number $r19, $r21, $r22, $r23, $r28, $r30, $r32, $r34, $r40, $r42, $r44, $r46, $r52, $r53, $r54, $r56, $r58, $r73, $r75, $r77, $r79, $r97, $r99, $r101, $r103, $r115, $r117, $r119, $r121, $r134, $r136, $r138, $r140;
        java.lang.String $r24, $r36, $r48, $r61, $r62, $r63, $r66, $r69, $r82, $r83, $r85, $r87, $r88, $r89, $r90, $r93, $r106, $r111, $r124, $r125, $r130, $r143, $r144, $r149;
        java.lang.Double $r31, $r33, $r35, $r43, $r45, $r47, $r55, $r57, $r59, $r76, $r78, $r80, $r100, $r102, $r104, $r118, $r120, $r122, $r137, $r139, $r141;
        com.yahoo.bullet.storm.testing.CustomBoltDeclarer r49, r70, r94, r112, r131;
        org.apache.storm.topology.IRichBolt $r50, $r71, $r95, $r113, $r132;
        java.util.Map $r67, $r68, r86, $r92, $r109, $r110, $r128, $r129, r145, $r152;
        org.apache.storm.tuple.Fields[] $r146;
        org.apache.storm.tuple.Fields $r147;
        java.lang.String[] $r148;

        r0 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        $r1 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r1.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.replay.enable", $r2);

        $r3 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        virtualinvoke $r3.<com.yahoo.bullet.storm.BulletStormConfig: com.yahoo.bullet.storm.BulletStormConfig validate()>();

        $r6 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r5 = new com.yahoo.bullet.storm.testing.CustomIRichSpout;

        specialinvoke $r5.<com.yahoo.bullet.storm.testing.CustomIRichSpout: void <init>()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        virtualinvoke $r6.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: org.apache.storm.topology.SpoutDeclarer setSpout(java.lang.String,org.apache.storm.topology.IRichSpout,java.lang.Number)>("source", $r5, $r7);

        $r9 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $z0 = virtualinvoke $r9.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: boolean isTopologyCreated()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r10 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void submitWithTopologyAndConfig(java.lang.String,com.yahoo.bullet.storm.BulletStormConfig)>("source", $r10);

        $r11 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $z1 = virtualinvoke $r11.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: boolean isTopologyCreated()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r12 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r13 = virtualinvoke $r12.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: java.util.List getCreatedSpouts()>();

        $i0 = interfaceinvoke $r13.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 3L);

        $r14 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r15 = virtualinvoke $r14.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: java.util.List getCreatedBolts()>();

        $i2 = interfaceinvoke $r15.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 5L);

        r16 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>("source");

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r16);

        $r17 = virtualinvoke r16.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: org.apache.storm.topology.IRichSpout getSpout()>();

        $r18 = virtualinvoke $r17.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r18, class "Lcom/yahoo/bullet/storm/testing/CustomIRichSpout;");

        $r19 = virtualinvoke r16.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getParallelism()>();

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r20);

        $r21 = virtualinvoke r16.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getCpuLoad()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r21);

        $r22 = virtualinvoke r16.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOnHeap()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r22);

        $r23 = virtualinvoke r16.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOffHeap()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r23);

        $r24 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        r25 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>($r24);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r25);

        $r26 = virtualinvoke r25.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: org.apache.storm.topology.IRichSpout getSpout()>();

        $r27 = virtualinvoke $r26.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r27, class "Lcom/yahoo/bullet/storm/TickSpout;");

        $r28 = virtualinvoke r25.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getParallelism()>();

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r28, $r29);

        $r30 = virtualinvoke r25.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getCpuLoad()>();

        $r31 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r30, $r31);

        $r32 = virtualinvoke r25.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOnHeap()>();

        $r33 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(128.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r32, $r33);

        $r34 = virtualinvoke r25.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOffHeap()>();

        $r35 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r34, $r35);

        $r36 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        r37 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>($r36);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r37);

        $r38 = virtualinvoke r37.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: org.apache.storm.topology.IRichSpout getSpout()>();

        $r39 = virtualinvoke $r38.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r39, class "Lcom/yahoo/bullet/storm/QuerySpout;");

        $r40 = virtualinvoke r37.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getParallelism()>();

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r40, $r41);

        $r42 = virtualinvoke r37.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getCpuLoad()>();

        $r43 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r42, $r43);

        $r44 = virtualinvoke r37.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOnHeap()>();

        $r45 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r44, $r45);

        $r46 = virtualinvoke r37.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOffHeap()>();

        $r47 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r46, $r47);

        $r48 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        r49 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r48);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r49);

        $r50 = virtualinvoke r49.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r51 = virtualinvoke $r50.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r51, class "Lcom/yahoo/bullet/storm/FilterBolt;");

        $r52 = virtualinvoke r49.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r53 = <com.yahoo.bullet.storm.BulletStormConfig: java.lang.Number DEFAULT_FILTER_BOLT_PARALLELISM>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r52, $r53);

        $r54 = virtualinvoke r49.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r55 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(100.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r54, $r55);

        $r56 = virtualinvoke r49.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r57 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r56, $r57);

        $r58 = virtualinvoke r49.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r59 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r58, $r59);

        r60 = virtualinvoke r49.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $i4 = interfaceinvoke r60.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, 3L);

        $r61 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r60, $r61, "default");

        $r62 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r60, $r62, "default");

        $r63 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r60, $r63, "metadata");

        r64 = virtualinvoke r49.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i6 = interfaceinvoke r64.<java.util.List: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, 1L);

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r64, "source", "default");

        r65 = virtualinvoke r49.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $i8 = interfaceinvoke r65.<java.util.List: int size()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, 1L);

        $r66 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String REPLAY_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r65, $r66, "replay");

        $r67 = virtualinvoke r49.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z2 = interfaceinvoke $r67.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r68 = virtualinvoke r49.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z3 = interfaceinvoke $r68.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r69 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        r70 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r69);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r70);

        $r71 = virtualinvoke r70.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r72 = virtualinvoke $r71.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r72, class "Lcom/yahoo/bullet/storm/JoinBolt;");

        $r73 = virtualinvoke r70.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r74 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r73, $r74);

        $r75 = virtualinvoke r70.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r76 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(100.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r75, $r76);

        $r77 = virtualinvoke r70.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r78 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(512.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r77, $r78);

        $r79 = virtualinvoke r70.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r80 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r79, $r80);

        r81 = virtualinvoke r70.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $i10 = interfaceinvoke r81.<java.util.List: int size()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l11, 2L);

        $r82 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r81, $r82, "default");

        $r83 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r81, $r83, "metadata");

        r84 = virtualinvoke r70.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $i12 = interfaceinvoke r84.<java.util.List: int size()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l13, 1L);

        $r85 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String REPLAY_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r84, $r85, "replay");

        r86 = virtualinvoke r70.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $i14 = interfaceinvoke r86.<java.util.Map: int size()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l15, 4L);

        $r87 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,java.lang.Class)>(r86, $r87, "default", class "Lcom/yahoo/bullet/storm/grouping/IDGrouping;");

        $r88 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,java.lang.Class)>(r86, $r88, "default", class "Lcom/yahoo/bullet/storm/grouping/IDGrouping;");

        $r89 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,java.lang.Class)>(r86, $r89, "error", class "Lcom/yahoo/bullet/storm/grouping/IDGrouping;");

        $r90 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String REPLAY_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,java.lang.Class)>(r86, $r90, "capture", class "Lcom/yahoo/bullet/storm/grouping/TaskIndexCaptureGrouping;");

        $r91 = virtualinvoke r70.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $z4 = interfaceinvoke $r91.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r92 = virtualinvoke r70.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z5 = interfaceinvoke $r92.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r93 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String RESULT_COMPONENT>;

        r94 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r93);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r94);

        $r95 = virtualinvoke r94.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r96 = virtualinvoke $r95.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r96, class "Lcom/yahoo/bullet/storm/ResultBolt;");

        $r97 = virtualinvoke r94.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r98 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r97, $r98);

        $r99 = virtualinvoke r94.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r100 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r99, $r100);

        $r101 = virtualinvoke r94.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r102 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r101, $r102);

        $r103 = virtualinvoke r94.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r104 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r103, $r104);

        r105 = virtualinvoke r94.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i16 = interfaceinvoke r105.<java.util.List: int size()>();

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l17, 1L);

        $r106 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r105, $r106, "default");

        $r107 = virtualinvoke r94.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $z6 = interfaceinvoke $r107.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r108 = virtualinvoke r94.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z7 = interfaceinvoke $r108.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r109 = virtualinvoke r94.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z8 = interfaceinvoke $r109.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r110 = virtualinvoke r94.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z9 = interfaceinvoke $r110.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $r111 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String LOOP_COMPONENT>;

        r112 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r111);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r112);

        $r113 = virtualinvoke r112.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r114 = virtualinvoke $r113.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r114, class "Lcom/yahoo/bullet/storm/LoopBolt;");

        $r115 = virtualinvoke r112.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r116 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r115, $r116);

        $r117 = virtualinvoke r112.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r118 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r117, $r118);

        $r119 = virtualinvoke r112.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r120 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r119, $r120);

        $r121 = virtualinvoke r112.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r122 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r121, $r122);

        r123 = virtualinvoke r112.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i18 = interfaceinvoke r123.<java.util.List: int size()>();

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l19, 2L);

        $r124 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r123, $r124, "feedback");

        $r125 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r123, $r125, "feedback");

        $r126 = virtualinvoke r112.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $z10 = interfaceinvoke $r126.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

        $r127 = virtualinvoke r112.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z11 = interfaceinvoke $r127.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

        $r128 = virtualinvoke r112.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z12 = interfaceinvoke $r128.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        $r129 = virtualinvoke r112.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z13 = interfaceinvoke $r129.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        $r130 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String REPLAY_COMPONENT>;

        r131 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r130);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r131);

        $r132 = virtualinvoke r131.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r133 = virtualinvoke $r132.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r133, class "Lcom/yahoo/bullet/storm/ReplayBolt;");

        $r134 = virtualinvoke r131.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r135 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r134, $r135);

        $r136 = virtualinvoke r131.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r137 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(100.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r136, $r137);

        $r138 = virtualinvoke r131.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r139 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r138, $r139);

        $r140 = virtualinvoke r131.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r141 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r140, $r141);

        r142 = virtualinvoke r131.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $i20 = interfaceinvoke r142.<java.util.List: int size()>();

        $l21 = (long) $i20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l21, 2L);

        $r143 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r142, $r143, "default");

        $r144 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r142, $r144, "metadata");

        r145 = virtualinvoke r131.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $i22 = interfaceinvoke r145.<java.util.Map: int size()>();

        $l23 = (long) $i22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l23, 1L);

        $r149 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        $r146 = newarray (org.apache.storm.tuple.Fields)[1];

        $r147 = new org.apache.storm.tuple.Fields;

        $r148 = newarray (java.lang.String)[1];

        $r148[0] = "id";

        specialinvoke $r147.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r148);

        $r146[0] = $r147;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r145, $r149, "replay", $r146);

        $r150 = virtualinvoke r131.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $z14 = interfaceinvoke $r150.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

        $r151 = virtualinvoke r131.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z15 = interfaceinvoke $r151.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

        $r152 = virtualinvoke r131.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z16 = interfaceinvoke $r152.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z16);

        return;
    }

    public void testHookingInDSLSpout()
    {
        com.yahoo.bullet.storm.StormUtilsTest r0;
        com.yahoo.bullet.storm.BulletStormConfig $r1, $r2, $r5;
        java.lang.Boolean $r3;
        com.yahoo.bullet.storm.testing.CustomTopologyBuilder $r4, $r6, $r7, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        java.util.List $r8, $r10, r58, r62, $r63, r78, $r97, $r98, r112, $r114, $r115, r130, $r133, $r134;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15;
        com.yahoo.bullet.storm.testing.CustomSpoutDeclarer r11, r23, r35;
        org.apache.storm.topology.IRichSpout $r12, $r24, $r36;
        java.lang.Class $r13, $r25, $r37, $r49, $r69, $r103, $r121;
        java.lang.Number $r14, $r16, $r18, $r20, $r26, $r28, $r30, $r32, $r38, $r40, $r42, $r44, $r50, $r51, $r52, $r54, $r56, $r70, $r72, $r74, $r76, $r104, $r106, $r108, $r110, $r122, $r124, $r126, $r128;
        java.lang.Integer $r15, $r27, $r39, $r71, $r105, $r123;
        java.lang.Double $r17, $r19, $r21, $r29, $r31, $r33, $r41, $r43, $r45, $r53, $r55, $r57, $r73, $r75, $r77, $r107, $r109, $r111, $r125, $r127, $r129;
        java.lang.String $r22, $r34, $r46, $r59, $r60, $r61, $r66, $r79, $r84, $r88, $r92, $r96, $r100, $r113, $r118, $r131, $r132, $r137;
        com.yahoo.bullet.storm.testing.CustomBoltDeclarer r47, r67, r101, r119, r138;
        org.apache.storm.topology.IRichBolt $r48, $r68, $r102, $r120;
        java.util.Map $r64, $r65, r80, $r99, $r116, $r117, $r135, $r136;
        org.apache.storm.tuple.Fields[] $r81, $r85, $r89, $r93;
        org.apache.storm.tuple.Fields $r82, $r86, $r90, $r94;
        java.lang.String[] $r83, $r87, $r91, $r95;

        r0 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        $r1 = new com.yahoo.bullet.storm.BulletStormConfig;

        specialinvoke $r1.<com.yahoo.bullet.storm.BulletStormConfig: void <init>(java.lang.String)>("test_dsl_config.yaml");

        r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config> = $r1;

        $r2 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r2.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.dsl.spout.enable", $r3);

        $r4 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $z0 = virtualinvoke $r4.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: boolean isTopologyCreated()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r5 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void submitWithConfig(com.yahoo.bullet.storm.BulletStormConfig)>($r5);

        $r6 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $z1 = virtualinvoke $r6.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: boolean isTopologyCreated()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r7 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r8 = virtualinvoke $r7.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: java.util.List getCreatedSpouts()>();

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 3L);

        $r9 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r10 = virtualinvoke $r9.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: java.util.List getCreatedBolts()>();

        $i2 = interfaceinvoke $r10.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 4L);

        r11 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>("DataSource");

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r11);

        $r12 = virtualinvoke r11.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: org.apache.storm.topology.IRichSpout getSpout()>();

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, class "Lcom/yahoo/bullet/storm/DSLSpout;");

        $r14 = virtualinvoke r11.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getParallelism()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        $r16 = virtualinvoke r11.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getCpuLoad()>();

        $r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(50.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r17);

        $r18 = virtualinvoke r11.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOnHeap()>();

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r19);

        $r20 = virtualinvoke r11.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOffHeap()>();

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r20, $r21);

        $r22 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        r23 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>($r22);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r23);

        $r24 = virtualinvoke r23.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: org.apache.storm.topology.IRichSpout getSpout()>();

        $r25 = virtualinvoke $r24.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r25, class "Lcom/yahoo/bullet/storm/TickSpout;");

        $r26 = virtualinvoke r23.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getParallelism()>();

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r26, $r27);

        $r28 = virtualinvoke r23.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getCpuLoad()>();

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r28, $r29);

        $r30 = virtualinvoke r23.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOnHeap()>();

        $r31 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(128.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r30, $r31);

        $r32 = virtualinvoke r23.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOffHeap()>();

        $r33 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r32, $r33);

        $r34 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        r35 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>($r34);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r35);

        $r36 = virtualinvoke r35.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: org.apache.storm.topology.IRichSpout getSpout()>();

        $r37 = virtualinvoke $r36.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r37, class "Lcom/yahoo/bullet/storm/QuerySpout;");

        $r38 = virtualinvoke r35.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getParallelism()>();

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r38, $r39);

        $r40 = virtualinvoke r35.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getCpuLoad()>();

        $r41 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r40, $r41);

        $r42 = virtualinvoke r35.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOnHeap()>();

        $r43 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r42, $r43);

        $r44 = virtualinvoke r35.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOffHeap()>();

        $r45 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r44, $r45);

        $r46 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        r47 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r46);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r47);

        $r48 = virtualinvoke r47.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r49 = virtualinvoke $r48.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r49, class "Lcom/yahoo/bullet/storm/FilterBolt;");

        $r50 = virtualinvoke r47.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r51 = <com.yahoo.bullet.storm.BulletStormConfig: java.lang.Number DEFAULT_FILTER_BOLT_PARALLELISM>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r50, $r51);

        $r52 = virtualinvoke r47.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r53 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(100.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r52, $r53);

        $r54 = virtualinvoke r47.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r55 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r54, $r55);

        $r56 = virtualinvoke r47.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r57 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r56, $r57);

        r58 = virtualinvoke r47.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $i4 = interfaceinvoke r58.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, 3L);

        $r59 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r58, $r59, "default");

        $r60 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r58, $r60, "default");

        $r61 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r58, $r61, "metadata");

        r62 = virtualinvoke r47.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i6 = interfaceinvoke r62.<java.util.List: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, 1L);

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r62, "DataSource", "default");

        $r63 = virtualinvoke r47.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z2 = interfaceinvoke $r63.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r64 = virtualinvoke r47.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z3 = interfaceinvoke $r64.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r65 = virtualinvoke r47.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z4 = interfaceinvoke $r65.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r66 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        r67 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r66);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r67);

        $r68 = virtualinvoke r67.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r69 = virtualinvoke $r68.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r69, class "Lcom/yahoo/bullet/storm/JoinBolt;");

        $r70 = virtualinvoke r67.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r71 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r70, $r71);

        $r72 = virtualinvoke r67.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r73 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(100.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r72, $r73);

        $r74 = virtualinvoke r67.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r75 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(512.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r74, $r75);

        $r76 = virtualinvoke r67.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r77 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r76, $r77);

        r78 = virtualinvoke r67.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $i8 = interfaceinvoke r78.<java.util.List: int size()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, 1L);

        $r79 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r78, $r79, "default");

        r80 = virtualinvoke r67.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $i10 = interfaceinvoke r80.<java.util.Map: int size()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l11, 4L);

        $r84 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        $r81 = newarray (org.apache.storm.tuple.Fields)[1];

        $r82 = new org.apache.storm.tuple.Fields;

        $r83 = newarray (java.lang.String)[1];

        $r83[0] = "id";

        specialinvoke $r82.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r83);

        $r81[0] = $r82;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r80, $r84, "default", $r81);

        $r88 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        $r85 = newarray (org.apache.storm.tuple.Fields)[1];

        $r86 = new org.apache.storm.tuple.Fields;

        $r87 = newarray (java.lang.String)[1];

        $r87[0] = "id";

        specialinvoke $r86.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r87);

        $r85[0] = $r86;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r80, $r88, "metadata", $r85);

        $r92 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        $r89 = newarray (org.apache.storm.tuple.Fields)[1];

        $r90 = new org.apache.storm.tuple.Fields;

        $r91 = newarray (java.lang.String)[1];

        $r91[0] = "id";

        specialinvoke $r90.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r91);

        $r89[0] = $r90;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r80, $r92, "default", $r89);

        $r96 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        $r93 = newarray (org.apache.storm.tuple.Fields)[1];

        $r94 = new org.apache.storm.tuple.Fields;

        $r95 = newarray (java.lang.String)[1];

        $r95[0] = "id";

        specialinvoke $r94.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r95);

        $r93[0] = $r94;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r80, $r96, "error", $r93);

        $r97 = virtualinvoke r67.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $z5 = interfaceinvoke $r97.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r98 = virtualinvoke r67.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z6 = interfaceinvoke $r98.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r99 = virtualinvoke r67.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z7 = interfaceinvoke $r99.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r100 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String RESULT_COMPONENT>;

        r101 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r100);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r101);

        $r102 = virtualinvoke r101.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r103 = virtualinvoke $r102.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r103, class "Lcom/yahoo/bullet/storm/ResultBolt;");

        $r104 = virtualinvoke r101.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r105 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r104, $r105);

        $r106 = virtualinvoke r101.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r107 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r106, $r107);

        $r108 = virtualinvoke r101.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r109 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r108, $r109);

        $r110 = virtualinvoke r101.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r111 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r110, $r111);

        r112 = virtualinvoke r101.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i12 = interfaceinvoke r112.<java.util.List: int size()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l13, 1L);

        $r113 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r112, $r113, "default");

        $r114 = virtualinvoke r101.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $z8 = interfaceinvoke $r114.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r115 = virtualinvoke r101.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z9 = interfaceinvoke $r115.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $r116 = virtualinvoke r101.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z10 = interfaceinvoke $r116.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

        $r117 = virtualinvoke r101.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z11 = interfaceinvoke $r117.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

        $r118 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String LOOP_COMPONENT>;

        r119 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r118);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r119);

        $r120 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r121 = virtualinvoke $r120.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r121, class "Lcom/yahoo/bullet/storm/LoopBolt;");

        $r122 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r123 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r122, $r123);

        $r124 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r125 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r124, $r125);

        $r126 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r127 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r126, $r127);

        $r128 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r129 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r128, $r129);

        r130 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i14 = interfaceinvoke r130.<java.util.List: int size()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l15, 2L);

        $r131 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r130, $r131, "feedback");

        $r132 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r130, $r132, "feedback");

        $r133 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $z12 = interfaceinvoke $r133.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        $r134 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z13 = interfaceinvoke $r134.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        $r135 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z14 = interfaceinvoke $r135.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

        $r136 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z15 = interfaceinvoke $r136.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

        $r137 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String REPLAY_COMPONENT>;

        r138 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r137);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>(r138);

        return;
    }

    public void testHookingInDSLSpoutAndBolt()
    {
        com.yahoo.bullet.storm.StormUtilsTest r0;
        com.yahoo.bullet.storm.BulletStormConfig $r1, $r2, $r4, $r7;
        java.lang.Boolean $r3, $r5;
        com.yahoo.bullet.storm.testing.CustomTopologyBuilder $r6, $r8, $r9, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        java.util.List $r10, $r12, r35, $r36, $r37, r76, r80, $r81, r96, $r115, $r116, r130, $r132, $r133, r148, $r151, $r152;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17;
        com.yahoo.bullet.storm.testing.CustomSpoutDeclarer r13, r41, r53;
        org.apache.storm.topology.IRichSpout $r14, $r42, $r54;
        java.lang.Class $r15, $r26, $r43, $r55, $r67, $r87, $r121, $r139;
        java.lang.Number $r16, $r18, $r20, $r22, $r27, $r29, $r31, $r33, $r44, $r46, $r48, $r50, $r56, $r58, $r60, $r62, $r68, $r69, $r70, $r72, $r74, $r88, $r90, $r92, $r94, $r122, $r124, $r126, $r128, $r140, $r142, $r144, $r146;
        java.lang.Integer $r17, $r28, $r45, $r57, $r89, $r123, $r141;
        java.lang.Double $r19, $r21, $r23, $r30, $r32, $r34, $r47, $r49, $r51, $r59, $r61, $r63, $r71, $r73, $r75, $r91, $r93, $r95, $r125, $r127, $r129, $r143, $r145, $r147;
        com.yahoo.bullet.storm.testing.CustomBoltDeclarer r24, r65, r85, r119, r137, r156;
        org.apache.storm.topology.IRichBolt $r25, $r66, $r86, $r120, $r138;
        java.util.Map $r38, $r39, $r82, $r83, r98, $r117, $r134, $r135, $r153, $r154;
        java.lang.String $r40, $r52, $r64, $r77, $r78, $r79, $r84, $r97, $r102, $r106, $r110, $r114, $r118, $r131, $r136, $r149, $r150, $r155;
        org.apache.storm.tuple.Fields[] $r99, $r103, $r107, $r111;
        org.apache.storm.tuple.Fields $r100, $r104, $r108, $r112;
        java.lang.String[] $r101, $r105, $r109, $r113;

        r0 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        $r1 = new com.yahoo.bullet.storm.BulletStormConfig;

        specialinvoke $r1.<com.yahoo.bullet.storm.BulletStormConfig: void <init>(java.lang.String)>("test_dsl_config.yaml");

        r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config> = $r1;

        $r2 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r2.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.dsl.spout.enable", $r3);

        $r4 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r4.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.dsl.bolt.enable", $r5);

        $r6 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $z0 = virtualinvoke $r6.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: boolean isTopologyCreated()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r7 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void submitWithConfig(com.yahoo.bullet.storm.BulletStormConfig)>($r7);

        $r8 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $z1 = virtualinvoke $r8.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: boolean isTopologyCreated()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r9 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r10 = virtualinvoke $r9.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: java.util.List getCreatedSpouts()>();

        $i0 = interfaceinvoke $r10.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 3L);

        $r11 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r12 = virtualinvoke $r11.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: java.util.List getCreatedBolts()>();

        $i2 = interfaceinvoke $r12.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 5L);

        r13 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>("DataSpout");

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r13);

        $r14 = virtualinvoke r13.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: org.apache.storm.topology.IRichSpout getSpout()>();

        $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, class "Lcom/yahoo/bullet/storm/DSLSpout;");

        $r16 = virtualinvoke r13.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getParallelism()>();

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r17);

        $r18 = virtualinvoke r13.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getCpuLoad()>();

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(50.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r19);

        $r20 = virtualinvoke r13.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOnHeap()>();

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r20, $r21);

        $r22 = virtualinvoke r13.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOffHeap()>();

        $r23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r22, $r23);

        r24 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>("DataSource");

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r24);

        $r25 = virtualinvoke r24.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r26 = virtualinvoke $r25.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r26, class "Lcom/yahoo/bullet/storm/DSLBolt;");

        $r27 = virtualinvoke r24.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r27, $r28);

        $r29 = virtualinvoke r24.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r30 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(50.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r29, $r30);

        $r31 = virtualinvoke r24.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r32 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r31, $r32);

        $r33 = virtualinvoke r24.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r34 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r33, $r34);

        r35 = virtualinvoke r24.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i4 = interfaceinvoke r35.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, 1L);

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r35, "DataSpout", "default");

        $r36 = virtualinvoke r24.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $z2 = interfaceinvoke $r36.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r37 = virtualinvoke r24.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z3 = interfaceinvoke $r37.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r38 = virtualinvoke r24.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z4 = interfaceinvoke $r38.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r39 = virtualinvoke r24.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z5 = interfaceinvoke $r39.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r40 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        r41 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>($r40);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r41);

        $r42 = virtualinvoke r41.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: org.apache.storm.topology.IRichSpout getSpout()>();

        $r43 = virtualinvoke $r42.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r43, class "Lcom/yahoo/bullet/storm/TickSpout;");

        $r44 = virtualinvoke r41.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getParallelism()>();

        $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r44, $r45);

        $r46 = virtualinvoke r41.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getCpuLoad()>();

        $r47 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r46, $r47);

        $r48 = virtualinvoke r41.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOnHeap()>();

        $r49 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(128.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r48, $r49);

        $r50 = virtualinvoke r41.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOffHeap()>();

        $r51 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r50, $r51);

        $r52 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        r53 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>($r52);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r53);

        $r54 = virtualinvoke r53.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: org.apache.storm.topology.IRichSpout getSpout()>();

        $r55 = virtualinvoke $r54.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r55, class "Lcom/yahoo/bullet/storm/QuerySpout;");

        $r56 = virtualinvoke r53.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getParallelism()>();

        $r57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r56, $r57);

        $r58 = virtualinvoke r53.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getCpuLoad()>();

        $r59 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r58, $r59);

        $r60 = virtualinvoke r53.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOnHeap()>();

        $r61 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r60, $r61);

        $r62 = virtualinvoke r53.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOffHeap()>();

        $r63 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r62, $r63);

        $r64 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        r65 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r64);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r65);

        $r66 = virtualinvoke r65.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r67 = virtualinvoke $r66.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r67, class "Lcom/yahoo/bullet/storm/FilterBolt;");

        $r68 = virtualinvoke r65.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r69 = <com.yahoo.bullet.storm.BulletStormConfig: java.lang.Number DEFAULT_FILTER_BOLT_PARALLELISM>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r68, $r69);

        $r70 = virtualinvoke r65.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r71 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(100.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r70, $r71);

        $r72 = virtualinvoke r65.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r73 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r72, $r73);

        $r74 = virtualinvoke r65.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r75 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r74, $r75);

        r76 = virtualinvoke r65.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $i6 = interfaceinvoke r76.<java.util.List: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, 3L);

        $r77 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r76, $r77, "default");

        $r78 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r76, $r78, "default");

        $r79 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r76, $r79, "metadata");

        r80 = virtualinvoke r65.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i8 = interfaceinvoke r80.<java.util.List: int size()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, 1L);

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r80, "DataSource", "default");

        $r81 = virtualinvoke r65.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z6 = interfaceinvoke $r81.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r82 = virtualinvoke r65.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z7 = interfaceinvoke $r82.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r83 = virtualinvoke r65.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z8 = interfaceinvoke $r83.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r84 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        r85 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r84);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r85);

        $r86 = virtualinvoke r85.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r87 = virtualinvoke $r86.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r87, class "Lcom/yahoo/bullet/storm/JoinBolt;");

        $r88 = virtualinvoke r85.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r89 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r88, $r89);

        $r90 = virtualinvoke r85.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r91 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(100.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r90, $r91);

        $r92 = virtualinvoke r85.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r93 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(512.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r92, $r93);

        $r94 = virtualinvoke r85.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r95 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r94, $r95);

        r96 = virtualinvoke r85.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $i10 = interfaceinvoke r96.<java.util.List: int size()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l11, 1L);

        $r97 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r96, $r97, "default");

        r98 = virtualinvoke r85.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $i12 = interfaceinvoke r98.<java.util.Map: int size()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l13, 4L);

        $r102 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        $r99 = newarray (org.apache.storm.tuple.Fields)[1];

        $r100 = new org.apache.storm.tuple.Fields;

        $r101 = newarray (java.lang.String)[1];

        $r101[0] = "id";

        specialinvoke $r100.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r101);

        $r99[0] = $r100;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r98, $r102, "default", $r99);

        $r106 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        $r103 = newarray (org.apache.storm.tuple.Fields)[1];

        $r104 = new org.apache.storm.tuple.Fields;

        $r105 = newarray (java.lang.String)[1];

        $r105[0] = "id";

        specialinvoke $r104.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r105);

        $r103[0] = $r104;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r98, $r106, "metadata", $r103);

        $r110 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        $r107 = newarray (org.apache.storm.tuple.Fields)[1];

        $r108 = new org.apache.storm.tuple.Fields;

        $r109 = newarray (java.lang.String)[1];

        $r109[0] = "id";

        specialinvoke $r108.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r109);

        $r107[0] = $r108;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r98, $r110, "default", $r107);

        $r114 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        $r111 = newarray (org.apache.storm.tuple.Fields)[1];

        $r112 = new org.apache.storm.tuple.Fields;

        $r113 = newarray (java.lang.String)[1];

        $r113[0] = "id";

        specialinvoke $r112.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r113);

        $r111[0] = $r112;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r98, $r114, "error", $r111);

        $r115 = virtualinvoke r85.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $z9 = interfaceinvoke $r115.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $r116 = virtualinvoke r85.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z10 = interfaceinvoke $r116.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

        $r117 = virtualinvoke r85.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z11 = interfaceinvoke $r117.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

        $r118 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String RESULT_COMPONENT>;

        r119 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r118);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r119);

        $r120 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r121 = virtualinvoke $r120.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r121, class "Lcom/yahoo/bullet/storm/ResultBolt;");

        $r122 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r123 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r122, $r123);

        $r124 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r125 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r124, $r125);

        $r126 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r127 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r126, $r127);

        $r128 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r129 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r128, $r129);

        r130 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i14 = interfaceinvoke r130.<java.util.List: int size()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l15, 1L);

        $r131 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r130, $r131, "default");

        $r132 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $z12 = interfaceinvoke $r132.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        $r133 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z13 = interfaceinvoke $r133.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        $r134 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z14 = interfaceinvoke $r134.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

        $r135 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z15 = interfaceinvoke $r135.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

        $r136 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String LOOP_COMPONENT>;

        r137 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r136);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r137);

        $r138 = virtualinvoke r137.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r139 = virtualinvoke $r138.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r139, class "Lcom/yahoo/bullet/storm/LoopBolt;");

        $r140 = virtualinvoke r137.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r141 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r140, $r141);

        $r142 = virtualinvoke r137.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r143 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r142, $r143);

        $r144 = virtualinvoke r137.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r145 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r144, $r145);

        $r146 = virtualinvoke r137.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r147 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r146, $r147);

        r148 = virtualinvoke r137.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i16 = interfaceinvoke r148.<java.util.List: int size()>();

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l17, 2L);

        $r149 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r148, $r149, "feedback");

        $r150 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r148, $r150, "feedback");

        $r151 = virtualinvoke r137.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $z16 = interfaceinvoke $r151.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z16);

        $r152 = virtualinvoke r137.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z17 = interfaceinvoke $r152.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z17);

        $r153 = virtualinvoke r137.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z18 = interfaceinvoke $r153.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z18);

        $r154 = virtualinvoke r137.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z19 = interfaceinvoke $r154.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z19);

        $r155 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String REPLAY_COMPONENT>;

        r156 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r155);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>(r156);

        return;
    }

    public void testHookingInDSLConnectorSpout()
    {
        com.yahoo.bullet.storm.StormUtilsTest r0;
        com.yahoo.bullet.storm.BulletStormConfig $r1, $r2, $r4, $r6, $r9, $r12, $r15;
        java.lang.Boolean $r3, $r5, $r7;
        java.lang.Class $r8, $r11, $r23, $r35, $r47, $r59, $r79, $r113, $r131;
        java.lang.String $r10, $r13, $r32, $r44, $r56, $r69, $r70, $r71, $r76, $r89, $r94, $r98, $r102, $r106, $r110, $r123, $r128, $r141, $r142, $r147;
        com.yahoo.bullet.storm.testing.CustomTopologyBuilder $r14, $r16, $r17, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        java.util.List $r18, $r20, r68, r72, $r73, r88, $r107, $r108, r122, $r124, $r125, r140, $r143, $r144;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15;
        com.yahoo.bullet.storm.testing.CustomSpoutDeclarer r21, r33, r45;
        org.apache.storm.topology.IRichSpout $r22, $r34, $r46;
        java.lang.Number $r24, $r26, $r28, $r30, $r36, $r38, $r40, $r42, $r48, $r50, $r52, $r54, $r60, $r61, $r62, $r64, $r66, $r80, $r82, $r84, $r86, $r114, $r116, $r118, $r120, $r132, $r134, $r136, $r138;
        java.lang.Integer $r25, $r37, $r49, $r81, $r115, $r133;
        java.lang.Double $r27, $r29, $r31, $r39, $r41, $r43, $r51, $r53, $r55, $r63, $r65, $r67, $r83, $r85, $r87, $r117, $r119, $r121, $r135, $r137, $r139;
        com.yahoo.bullet.storm.testing.CustomBoltDeclarer r57, r77, r111, r129, r148;
        org.apache.storm.topology.IRichBolt $r58, $r78, $r112, $r130;
        java.util.Map $r74, $r75, r90, $r109, $r126, $r127, $r145, $r146;
        org.apache.storm.tuple.Fields[] $r91, $r95, $r99, $r103;
        org.apache.storm.tuple.Fields $r92, $r96, $r100, $r104;
        java.lang.String[] $r93, $r97, $r101, $r105;

        r0 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        $r1 = new com.yahoo.bullet.storm.BulletStormConfig;

        specialinvoke $r1.<com.yahoo.bullet.storm.BulletStormConfig: void <init>(java.lang.String)>("test_dsl_config.yaml");

        r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config> = $r1;

        $r2 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r2.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.dsl.spout.enable", $r3);

        $r4 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r4.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.dsl.spout.connector.as.spout.enable", $r5);

        $r6 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke $r6.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.dsl.bolt.enable", $r7);

        $r9 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r8 = class "Lcom/yahoo/bullet/storm/testing/CallCountingSpoutConnector;";

        $r10 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r9.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.dsl.connector.class.name", $r10);

        $r12 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r11 = class "Lcom/yahoo/bullet/storm/testing/CallCountingCredentialsSpout;";

        $r13 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r12.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.dsl.spout.connector.class.name", $r13);

        $r14 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $z0 = virtualinvoke $r14.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: boolean isTopologyCreated()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r15 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void submitWithConfig(com.yahoo.bullet.storm.BulletStormConfig)>($r15);

        $r16 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $z1 = virtualinvoke $r16.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: boolean isTopologyCreated()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r17 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r18 = virtualinvoke $r17.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: java.util.List getCreatedSpouts()>();

        $i0 = interfaceinvoke $r18.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 3L);

        $r19 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r20 = virtualinvoke $r19.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: java.util.List getCreatedBolts()>();

        $i2 = interfaceinvoke $r20.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 4L);

        r21 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>("DataSource");

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r21);

        $r22 = virtualinvoke r21.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: org.apache.storm.topology.IRichSpout getSpout()>();

        $r23 = virtualinvoke $r22.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r23, class "Lcom/yahoo/bullet/storm/DSLConnectorSpout;");

        $r24 = virtualinvoke r21.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getParallelism()>();

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r24, $r25);

        $r26 = virtualinvoke r21.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getCpuLoad()>();

        $r27 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(50.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r26, $r27);

        $r28 = virtualinvoke r21.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOnHeap()>();

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r28, $r29);

        $r30 = virtualinvoke r21.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOffHeap()>();

        $r31 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r30, $r31);

        $r32 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        r33 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>($r32);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r33);

        $r34 = virtualinvoke r33.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: org.apache.storm.topology.IRichSpout getSpout()>();

        $r35 = virtualinvoke $r34.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r35, class "Lcom/yahoo/bullet/storm/TickSpout;");

        $r36 = virtualinvoke r33.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getParallelism()>();

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r36, $r37);

        $r38 = virtualinvoke r33.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getCpuLoad()>();

        $r39 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r38, $r39);

        $r40 = virtualinvoke r33.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOnHeap()>();

        $r41 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(128.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r40, $r41);

        $r42 = virtualinvoke r33.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOffHeap()>();

        $r43 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r42, $r43);

        $r44 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        r45 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>($r44);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r45);

        $r46 = virtualinvoke r45.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: org.apache.storm.topology.IRichSpout getSpout()>();

        $r47 = virtualinvoke $r46.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r47, class "Lcom/yahoo/bullet/storm/QuerySpout;");

        $r48 = virtualinvoke r45.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getParallelism()>();

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r48, $r49);

        $r50 = virtualinvoke r45.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getCpuLoad()>();

        $r51 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r50, $r51);

        $r52 = virtualinvoke r45.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOnHeap()>();

        $r53 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r52, $r53);

        $r54 = virtualinvoke r45.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOffHeap()>();

        $r55 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r54, $r55);

        $r56 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        r57 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r56);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r57);

        $r58 = virtualinvoke r57.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r59 = virtualinvoke $r58.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r59, class "Lcom/yahoo/bullet/storm/FilterBolt;");

        $r60 = virtualinvoke r57.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r61 = <com.yahoo.bullet.storm.BulletStormConfig: java.lang.Number DEFAULT_FILTER_BOLT_PARALLELISM>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r60, $r61);

        $r62 = virtualinvoke r57.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r63 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(100.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r62, $r63);

        $r64 = virtualinvoke r57.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r65 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r64, $r65);

        $r66 = virtualinvoke r57.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r67 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r66, $r67);

        r68 = virtualinvoke r57.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $i4 = interfaceinvoke r68.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, 3L);

        $r69 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r68, $r69, "default");

        $r70 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r68, $r70, "default");

        $r71 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r68, $r71, "metadata");

        r72 = virtualinvoke r57.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i6 = interfaceinvoke r72.<java.util.List: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, 1L);

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r72, "DataSource", "default");

        $r73 = virtualinvoke r57.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z2 = interfaceinvoke $r73.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r74 = virtualinvoke r57.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z3 = interfaceinvoke $r74.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r75 = virtualinvoke r57.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z4 = interfaceinvoke $r75.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r76 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        r77 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r76);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r77);

        $r78 = virtualinvoke r77.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r79 = virtualinvoke $r78.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r79, class "Lcom/yahoo/bullet/storm/JoinBolt;");

        $r80 = virtualinvoke r77.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r81 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r80, $r81);

        $r82 = virtualinvoke r77.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r83 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(100.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r82, $r83);

        $r84 = virtualinvoke r77.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r85 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(512.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r84, $r85);

        $r86 = virtualinvoke r77.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r87 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r86, $r87);

        r88 = virtualinvoke r77.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $i8 = interfaceinvoke r88.<java.util.List: int size()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, 1L);

        $r89 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r88, $r89, "default");

        r90 = virtualinvoke r77.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $i10 = interfaceinvoke r90.<java.util.Map: int size()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l11, 4L);

        $r94 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        $r91 = newarray (org.apache.storm.tuple.Fields)[1];

        $r92 = new org.apache.storm.tuple.Fields;

        $r93 = newarray (java.lang.String)[1];

        $r93[0] = "id";

        specialinvoke $r92.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r93);

        $r91[0] = $r92;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r90, $r94, "default", $r91);

        $r98 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        $r95 = newarray (org.apache.storm.tuple.Fields)[1];

        $r96 = new org.apache.storm.tuple.Fields;

        $r97 = newarray (java.lang.String)[1];

        $r97[0] = "id";

        specialinvoke $r96.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r97);

        $r95[0] = $r96;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r90, $r98, "metadata", $r95);

        $r102 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        $r99 = newarray (org.apache.storm.tuple.Fields)[1];

        $r100 = new org.apache.storm.tuple.Fields;

        $r101 = newarray (java.lang.String)[1];

        $r101[0] = "id";

        specialinvoke $r100.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r101);

        $r99[0] = $r100;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r90, $r102, "default", $r99);

        $r106 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        $r103 = newarray (org.apache.storm.tuple.Fields)[1];

        $r104 = new org.apache.storm.tuple.Fields;

        $r105 = newarray (java.lang.String)[1];

        $r105[0] = "id";

        specialinvoke $r104.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r105);

        $r103[0] = $r104;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r90, $r106, "error", $r103);

        $r107 = virtualinvoke r77.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $z5 = interfaceinvoke $r107.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r108 = virtualinvoke r77.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z6 = interfaceinvoke $r108.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r109 = virtualinvoke r77.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z7 = interfaceinvoke $r109.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r110 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String RESULT_COMPONENT>;

        r111 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r110);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r111);

        $r112 = virtualinvoke r111.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r113 = virtualinvoke $r112.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r113, class "Lcom/yahoo/bullet/storm/ResultBolt;");

        $r114 = virtualinvoke r111.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r115 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r114, $r115);

        $r116 = virtualinvoke r111.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r117 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r116, $r117);

        $r118 = virtualinvoke r111.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r119 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r118, $r119);

        $r120 = virtualinvoke r111.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r121 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r120, $r121);

        r122 = virtualinvoke r111.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i12 = interfaceinvoke r122.<java.util.List: int size()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l13, 1L);

        $r123 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r122, $r123, "default");

        $r124 = virtualinvoke r111.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $z8 = interfaceinvoke $r124.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r125 = virtualinvoke r111.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z9 = interfaceinvoke $r125.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $r126 = virtualinvoke r111.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z10 = interfaceinvoke $r126.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

        $r127 = virtualinvoke r111.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z11 = interfaceinvoke $r127.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

        $r128 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String LOOP_COMPONENT>;

        r129 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r128);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r129);

        $r130 = virtualinvoke r129.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r131 = virtualinvoke $r130.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r131, class "Lcom/yahoo/bullet/storm/LoopBolt;");

        $r132 = virtualinvoke r129.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r133 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r132, $r133);

        $r134 = virtualinvoke r129.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r135 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r134, $r135);

        $r136 = virtualinvoke r129.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r137 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r136, $r137);

        $r138 = virtualinvoke r129.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r139 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r138, $r139);

        r140 = virtualinvoke r129.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i14 = interfaceinvoke r140.<java.util.List: int size()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l15, 2L);

        $r141 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r140, $r141, "feedback");

        $r142 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r140, $r142, "feedback");

        $r143 = virtualinvoke r129.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $z12 = interfaceinvoke $r143.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        $r144 = virtualinvoke r129.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z13 = interfaceinvoke $r144.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        $r145 = virtualinvoke r129.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z14 = interfaceinvoke $r145.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

        $r146 = virtualinvoke r129.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z15 = interfaceinvoke $r146.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

        $r147 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String REPLAY_COMPONENT>;

        r148 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r147);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>(r148);

        return;
    }

    public void testHookingInDSLConnectorSpoutAndBolt()
    {
        com.yahoo.bullet.storm.StormUtilsTest r0;
        com.yahoo.bullet.storm.BulletStormConfig $r1, $r2, $r4, $r6, $r9, $r12, $r15;
        java.lang.Boolean $r3, $r5, $r7;
        java.lang.Class $r8, $r11, $r23, $r34, $r51, $r63, $r75, $r95, $r129, $r147;
        java.lang.String $r10, $r13, $r48, $r60, $r72, $r85, $r86, $r87, $r92, $r105, $r110, $r114, $r118, $r122, $r126, $r139, $r144, $r157, $r158, $r163;
        com.yahoo.bullet.storm.testing.CustomTopologyBuilder $r14, $r16, $r17, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        java.util.List $r18, $r20, r43, $r44, $r45, r84, r88, $r89, r104, $r123, $r124, r138, $r140, $r141, r156, $r159, $r160;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17;
        com.yahoo.bullet.storm.testing.CustomSpoutDeclarer r21, r49, r61;
        org.apache.storm.topology.IRichSpout $r22, $r50, $r62;
        java.lang.Number $r24, $r26, $r28, $r30, $r35, $r37, $r39, $r41, $r52, $r54, $r56, $r58, $r64, $r66, $r68, $r70, $r76, $r77, $r78, $r80, $r82, $r96, $r98, $r100, $r102, $r130, $r132, $r134, $r136, $r148, $r150, $r152, $r154;
        java.lang.Integer $r25, $r36, $r53, $r65, $r97, $r131, $r149;
        java.lang.Double $r27, $r29, $r31, $r38, $r40, $r42, $r55, $r57, $r59, $r67, $r69, $r71, $r79, $r81, $r83, $r99, $r101, $r103, $r133, $r135, $r137, $r151, $r153, $r155;
        com.yahoo.bullet.storm.testing.CustomBoltDeclarer r32, r73, r93, r127, r145, r164;
        org.apache.storm.topology.IRichBolt $r33, $r74, $r94, $r128, $r146;
        java.util.Map $r46, $r47, $r90, $r91, r106, $r125, $r142, $r143, $r161, $r162;
        org.apache.storm.tuple.Fields[] $r107, $r111, $r115, $r119;
        org.apache.storm.tuple.Fields $r108, $r112, $r116, $r120;
        java.lang.String[] $r109, $r113, $r117, $r121;

        r0 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        $r1 = new com.yahoo.bullet.storm.BulletStormConfig;

        specialinvoke $r1.<com.yahoo.bullet.storm.BulletStormConfig: void <init>(java.lang.String)>("test_dsl_config.yaml");

        r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config> = $r1;

        $r2 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r2.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.dsl.spout.enable", $r3);

        $r4 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r4.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.dsl.spout.connector.as.spout.enable", $r5);

        $r6 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r6.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.dsl.bolt.enable", $r7);

        $r9 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r8 = class "Lcom/yahoo/bullet/storm/testing/CallCountingSpoutConnector;";

        $r10 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r9.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.dsl.connector.class.name", $r10);

        $r12 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r11 = class "Lcom/yahoo/bullet/storm/testing/CallCountingCredentialsSpout;";

        $r13 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r12.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.dsl.spout.connector.class.name", $r13);

        $r14 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $z0 = virtualinvoke $r14.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: boolean isTopologyCreated()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r15 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void submitWithConfig(com.yahoo.bullet.storm.BulletStormConfig)>($r15);

        $r16 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $z1 = virtualinvoke $r16.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: boolean isTopologyCreated()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r17 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r18 = virtualinvoke $r17.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: java.util.List getCreatedSpouts()>();

        $i0 = interfaceinvoke $r18.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 3L);

        $r19 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r20 = virtualinvoke $r19.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: java.util.List getCreatedBolts()>();

        $i2 = interfaceinvoke $r20.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 5L);

        r21 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>("DataSpout");

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r21);

        $r22 = virtualinvoke r21.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: org.apache.storm.topology.IRichSpout getSpout()>();

        $r23 = virtualinvoke $r22.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r23, class "Lcom/yahoo/bullet/storm/DSLConnectorSpout;");

        $r24 = virtualinvoke r21.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getParallelism()>();

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r24, $r25);

        $r26 = virtualinvoke r21.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getCpuLoad()>();

        $r27 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(50.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r26, $r27);

        $r28 = virtualinvoke r21.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOnHeap()>();

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r28, $r29);

        $r30 = virtualinvoke r21.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOffHeap()>();

        $r31 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r30, $r31);

        r32 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>("DataSource");

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r32);

        $r33 = virtualinvoke r32.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r34 = virtualinvoke $r33.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r34, class "Lcom/yahoo/bullet/storm/DSLBolt;");

        $r35 = virtualinvoke r32.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r35, $r36);

        $r37 = virtualinvoke r32.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r38 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(50.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r37, $r38);

        $r39 = virtualinvoke r32.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r40 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r39, $r40);

        $r41 = virtualinvoke r32.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r42 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r41, $r42);

        r43 = virtualinvoke r32.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i4 = interfaceinvoke r43.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, 1L);

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r43, "DataSpout", "default");

        $r44 = virtualinvoke r32.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $z2 = interfaceinvoke $r44.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r45 = virtualinvoke r32.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z3 = interfaceinvoke $r45.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r46 = virtualinvoke r32.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z4 = interfaceinvoke $r46.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r47 = virtualinvoke r32.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z5 = interfaceinvoke $r47.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r48 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        r49 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>($r48);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r49);

        $r50 = virtualinvoke r49.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: org.apache.storm.topology.IRichSpout getSpout()>();

        $r51 = virtualinvoke $r50.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r51, class "Lcom/yahoo/bullet/storm/TickSpout;");

        $r52 = virtualinvoke r49.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getParallelism()>();

        $r53 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r52, $r53);

        $r54 = virtualinvoke r49.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getCpuLoad()>();

        $r55 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r54, $r55);

        $r56 = virtualinvoke r49.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOnHeap()>();

        $r57 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(128.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r56, $r57);

        $r58 = virtualinvoke r49.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOffHeap()>();

        $r59 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r58, $r59);

        $r60 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        r61 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>($r60);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r61);

        $r62 = virtualinvoke r61.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: org.apache.storm.topology.IRichSpout getSpout()>();

        $r63 = virtualinvoke $r62.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r63, class "Lcom/yahoo/bullet/storm/QuerySpout;");

        $r64 = virtualinvoke r61.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getParallelism()>();

        $r65 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r64, $r65);

        $r66 = virtualinvoke r61.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getCpuLoad()>();

        $r67 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r66, $r67);

        $r68 = virtualinvoke r61.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOnHeap()>();

        $r69 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r68, $r69);

        $r70 = virtualinvoke r61.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOffHeap()>();

        $r71 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r70, $r71);

        $r72 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        r73 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r72);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r73);

        $r74 = virtualinvoke r73.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r75 = virtualinvoke $r74.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r75, class "Lcom/yahoo/bullet/storm/FilterBolt;");

        $r76 = virtualinvoke r73.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r77 = <com.yahoo.bullet.storm.BulletStormConfig: java.lang.Number DEFAULT_FILTER_BOLT_PARALLELISM>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r76, $r77);

        $r78 = virtualinvoke r73.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r79 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(100.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r78, $r79);

        $r80 = virtualinvoke r73.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r81 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r80, $r81);

        $r82 = virtualinvoke r73.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r83 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r82, $r83);

        r84 = virtualinvoke r73.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $i6 = interfaceinvoke r84.<java.util.List: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, 3L);

        $r85 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r84, $r85, "default");

        $r86 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r84, $r86, "default");

        $r87 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r84, $r87, "metadata");

        r88 = virtualinvoke r73.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i8 = interfaceinvoke r88.<java.util.List: int size()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, 1L);

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r88, "DataSource", "default");

        $r89 = virtualinvoke r73.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z6 = interfaceinvoke $r89.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r90 = virtualinvoke r73.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z7 = interfaceinvoke $r90.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r91 = virtualinvoke r73.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z8 = interfaceinvoke $r91.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r92 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        r93 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r92);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r93);

        $r94 = virtualinvoke r93.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r95 = virtualinvoke $r94.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r95, class "Lcom/yahoo/bullet/storm/JoinBolt;");

        $r96 = virtualinvoke r93.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r97 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r96, $r97);

        $r98 = virtualinvoke r93.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r99 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(100.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r98, $r99);

        $r100 = virtualinvoke r93.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r101 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(512.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r100, $r101);

        $r102 = virtualinvoke r93.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r103 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r102, $r103);

        r104 = virtualinvoke r93.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $i10 = interfaceinvoke r104.<java.util.List: int size()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l11, 1L);

        $r105 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r104, $r105, "default");

        r106 = virtualinvoke r93.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $i12 = interfaceinvoke r106.<java.util.Map: int size()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l13, 4L);

        $r110 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        $r107 = newarray (org.apache.storm.tuple.Fields)[1];

        $r108 = new org.apache.storm.tuple.Fields;

        $r109 = newarray (java.lang.String)[1];

        $r109[0] = "id";

        specialinvoke $r108.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r109);

        $r107[0] = $r108;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r106, $r110, "default", $r107);

        $r114 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        $r111 = newarray (org.apache.storm.tuple.Fields)[1];

        $r112 = new org.apache.storm.tuple.Fields;

        $r113 = newarray (java.lang.String)[1];

        $r113[0] = "id";

        specialinvoke $r112.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r113);

        $r111[0] = $r112;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r106, $r114, "metadata", $r111);

        $r118 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        $r115 = newarray (org.apache.storm.tuple.Fields)[1];

        $r116 = new org.apache.storm.tuple.Fields;

        $r117 = newarray (java.lang.String)[1];

        $r117[0] = "id";

        specialinvoke $r116.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r117);

        $r115[0] = $r116;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r106, $r118, "default", $r115);

        $r122 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        $r119 = newarray (org.apache.storm.tuple.Fields)[1];

        $r120 = new org.apache.storm.tuple.Fields;

        $r121 = newarray (java.lang.String)[1];

        $r121[0] = "id";

        specialinvoke $r120.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r121);

        $r119[0] = $r120;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r106, $r122, "error", $r119);

        $r123 = virtualinvoke r93.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $z9 = interfaceinvoke $r123.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $r124 = virtualinvoke r93.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z10 = interfaceinvoke $r124.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

        $r125 = virtualinvoke r93.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z11 = interfaceinvoke $r125.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

        $r126 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String RESULT_COMPONENT>;

        r127 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r126);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r127);

        $r128 = virtualinvoke r127.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r129 = virtualinvoke $r128.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r129, class "Lcom/yahoo/bullet/storm/ResultBolt;");

        $r130 = virtualinvoke r127.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r131 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r130, $r131);

        $r132 = virtualinvoke r127.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r133 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r132, $r133);

        $r134 = virtualinvoke r127.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r135 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r134, $r135);

        $r136 = virtualinvoke r127.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r137 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r136, $r137);

        r138 = virtualinvoke r127.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i14 = interfaceinvoke r138.<java.util.List: int size()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l15, 1L);

        $r139 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r138, $r139, "default");

        $r140 = virtualinvoke r127.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $z12 = interfaceinvoke $r140.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        $r141 = virtualinvoke r127.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z13 = interfaceinvoke $r141.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        $r142 = virtualinvoke r127.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z14 = interfaceinvoke $r142.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

        $r143 = virtualinvoke r127.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z15 = interfaceinvoke $r143.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

        $r144 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String LOOP_COMPONENT>;

        r145 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r144);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r145);

        $r146 = virtualinvoke r145.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r147 = virtualinvoke $r146.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r147, class "Lcom/yahoo/bullet/storm/LoopBolt;");

        $r148 = virtualinvoke r145.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r149 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r148, $r149);

        $r150 = virtualinvoke r145.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r151 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r150, $r151);

        $r152 = virtualinvoke r145.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r153 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r152, $r153);

        $r154 = virtualinvoke r145.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r155 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r154, $r155);

        r156 = virtualinvoke r145.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i16 = interfaceinvoke r156.<java.util.List: int size()>();

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l17, 2L);

        $r157 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r156, $r157, "feedback");

        $r158 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r156, $r158, "feedback");

        $r159 = virtualinvoke r145.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $z16 = interfaceinvoke $r159.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z16);

        $r160 = virtualinvoke r145.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z17 = interfaceinvoke $r160.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z17);

        $r161 = virtualinvoke r145.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z18 = interfaceinvoke $r161.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z18);

        $r162 = virtualinvoke r145.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z19 = interfaceinvoke $r162.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z19);

        $r163 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String REPLAY_COMPONENT>;

        r164 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r163);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>(r164);

        return;
    }

    public void testHookingInBulletSpout()
    {
        com.yahoo.bullet.storm.StormUtilsTest r0;
        java.lang.Class $r1, $r13, $r25, $r37, $r49, $r69, $r103, $r121;
        com.yahoo.bullet.storm.BulletStormConfig $r2, $r5;
        java.lang.String $r3, $r22, $r34, $r46, $r59, $r60, $r61, $r66, $r79, $r84, $r88, $r92, $r96, $r100, $r113, $r118, $r131, $r132, $r137;
        com.yahoo.bullet.storm.testing.CustomTopologyBuilder $r4, $r6, $r7, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        java.util.List $r8, $r10, r58, r62, $r63, r78, $r97, $r98, r112, $r114, $r115, r130, $r133, $r134;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15;
        com.yahoo.bullet.storm.testing.CustomSpoutDeclarer r11, r23, r35;
        org.apache.storm.topology.IRichSpout $r12, $r24, $r36;
        java.lang.Number $r14, $r16, $r18, $r20, $r26, $r28, $r30, $r32, $r38, $r40, $r42, $r44, $r50, $r51, $r52, $r54, $r56, $r70, $r72, $r74, $r76, $r104, $r106, $r108, $r110, $r122, $r124, $r126, $r128;
        java.lang.Integer $r15, $r27, $r39, $r71, $r105, $r123;
        java.lang.Double $r17, $r19, $r21, $r29, $r31, $r33, $r41, $r43, $r45, $r53, $r55, $r57, $r73, $r75, $r77, $r107, $r109, $r111, $r125, $r127, $r129;
        com.yahoo.bullet.storm.testing.CustomBoltDeclarer r47, r67, r101, r119, r138;
        org.apache.storm.topology.IRichBolt $r48, $r68, $r102, $r120;
        java.util.Map $r64, $r65, r80, $r99, $r116, $r117, $r135, $r136;
        org.apache.storm.tuple.Fields[] $r81, $r85, $r89, $r93;
        org.apache.storm.tuple.Fields $r82, $r86, $r90, $r94;
        java.lang.String[] $r83, $r87, $r91, $r95;

        r0 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        $r2 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r1 = class "Lcom/yahoo/bullet/storm/testing/CustomIRichSpout;";

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r2.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.bullet.spout.class.name", $r3);

        $r4 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $z0 = virtualinvoke $r4.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: boolean isTopologyCreated()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r5 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void submitWithConfig(com.yahoo.bullet.storm.BulletStormConfig)>($r5);

        $r6 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $z1 = virtualinvoke $r6.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: boolean isTopologyCreated()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r7 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r8 = virtualinvoke $r7.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: java.util.List getCreatedSpouts()>();

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 3L);

        $r9 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r10 = virtualinvoke $r9.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: java.util.List getCreatedBolts()>();

        $i2 = interfaceinvoke $r10.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 4L);

        r11 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>("DataSource");

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r11);

        $r12 = virtualinvoke r11.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: org.apache.storm.topology.IRichSpout getSpout()>();

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, class "Lcom/yahoo/bullet/storm/testing/CustomIRichSpout;");

        $r14 = virtualinvoke r11.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getParallelism()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        $r16 = virtualinvoke r11.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getCpuLoad()>();

        $r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(50.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r17);

        $r18 = virtualinvoke r11.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOnHeap()>();

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r19);

        $r20 = virtualinvoke r11.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOffHeap()>();

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r20, $r21);

        $r22 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        r23 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>($r22);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r23);

        $r24 = virtualinvoke r23.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: org.apache.storm.topology.IRichSpout getSpout()>();

        $r25 = virtualinvoke $r24.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r25, class "Lcom/yahoo/bullet/storm/TickSpout;");

        $r26 = virtualinvoke r23.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getParallelism()>();

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r26, $r27);

        $r28 = virtualinvoke r23.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getCpuLoad()>();

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r28, $r29);

        $r30 = virtualinvoke r23.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOnHeap()>();

        $r31 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(128.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r30, $r31);

        $r32 = virtualinvoke r23.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOffHeap()>();

        $r33 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r32, $r33);

        $r34 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        r35 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>($r34);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r35);

        $r36 = virtualinvoke r35.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: org.apache.storm.topology.IRichSpout getSpout()>();

        $r37 = virtualinvoke $r36.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r37, class "Lcom/yahoo/bullet/storm/QuerySpout;");

        $r38 = virtualinvoke r35.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getParallelism()>();

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r38, $r39);

        $r40 = virtualinvoke r35.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getCpuLoad()>();

        $r41 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r40, $r41);

        $r42 = virtualinvoke r35.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOnHeap()>();

        $r43 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r42, $r43);

        $r44 = virtualinvoke r35.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.Number getOffHeap()>();

        $r45 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r44, $r45);

        $r46 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        r47 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r46);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r47);

        $r48 = virtualinvoke r47.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r49 = virtualinvoke $r48.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r49, class "Lcom/yahoo/bullet/storm/FilterBolt;");

        $r50 = virtualinvoke r47.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r51 = <com.yahoo.bullet.storm.BulletStormConfig: java.lang.Number DEFAULT_FILTER_BOLT_PARALLELISM>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r50, $r51);

        $r52 = virtualinvoke r47.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r53 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(100.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r52, $r53);

        $r54 = virtualinvoke r47.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r55 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r54, $r55);

        $r56 = virtualinvoke r47.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r57 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r56, $r57);

        r58 = virtualinvoke r47.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $i4 = interfaceinvoke r58.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, 3L);

        $r59 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r58, $r59, "default");

        $r60 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r58, $r60, "default");

        $r61 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r58, $r61, "metadata");

        r62 = virtualinvoke r47.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i6 = interfaceinvoke r62.<java.util.List: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, 1L);

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r62, "DataSource", "default");

        $r63 = virtualinvoke r47.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z2 = interfaceinvoke $r63.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r64 = virtualinvoke r47.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z3 = interfaceinvoke $r64.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r65 = virtualinvoke r47.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z4 = interfaceinvoke $r65.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r66 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        r67 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r66);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r67);

        $r68 = virtualinvoke r67.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r69 = virtualinvoke $r68.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r69, class "Lcom/yahoo/bullet/storm/JoinBolt;");

        $r70 = virtualinvoke r67.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r71 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r70, $r71);

        $r72 = virtualinvoke r67.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r73 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(100.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r72, $r73);

        $r74 = virtualinvoke r67.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r75 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(512.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r74, $r75);

        $r76 = virtualinvoke r67.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r77 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r76, $r77);

        r78 = virtualinvoke r67.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $i8 = interfaceinvoke r78.<java.util.List: int size()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, 1L);

        $r79 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r78, $r79, "default");

        r80 = virtualinvoke r67.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $i10 = interfaceinvoke r80.<java.util.Map: int size()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l11, 4L);

        $r84 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        $r81 = newarray (org.apache.storm.tuple.Fields)[1];

        $r82 = new org.apache.storm.tuple.Fields;

        $r83 = newarray (java.lang.String)[1];

        $r83[0] = "id";

        specialinvoke $r82.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r83);

        $r81[0] = $r82;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r80, $r84, "default", $r81);

        $r88 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        $r85 = newarray (org.apache.storm.tuple.Fields)[1];

        $r86 = new org.apache.storm.tuple.Fields;

        $r87 = newarray (java.lang.String)[1];

        $r87[0] = "id";

        specialinvoke $r86.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r87);

        $r85[0] = $r86;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r80, $r88, "metadata", $r85);

        $r92 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        $r89 = newarray (org.apache.storm.tuple.Fields)[1];

        $r90 = new org.apache.storm.tuple.Fields;

        $r91 = newarray (java.lang.String)[1];

        $r91[0] = "id";

        specialinvoke $r90.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r91);

        $r89[0] = $r90;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r80, $r92, "default", $r89);

        $r96 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        $r93 = newarray (org.apache.storm.tuple.Fields)[1];

        $r94 = new org.apache.storm.tuple.Fields;

        $r95 = newarray (java.lang.String)[1];

        $r95[0] = "id";

        specialinvoke $r94.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r95);

        $r93[0] = $r94;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.Map,java.lang.String,java.lang.String,org.apache.storm.tuple.Fields[])>(r80, $r96, "error", $r93);

        $r97 = virtualinvoke r67.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $z5 = interfaceinvoke $r97.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r98 = virtualinvoke r67.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z6 = interfaceinvoke $r98.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r99 = virtualinvoke r67.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z7 = interfaceinvoke $r99.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r100 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String RESULT_COMPONENT>;

        r101 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r100);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r101);

        $r102 = virtualinvoke r101.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r103 = virtualinvoke $r102.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r103, class "Lcom/yahoo/bullet/storm/ResultBolt;");

        $r104 = virtualinvoke r101.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r105 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r104, $r105);

        $r106 = virtualinvoke r101.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r107 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r106, $r107);

        $r108 = virtualinvoke r101.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r109 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r108, $r109);

        $r110 = virtualinvoke r101.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r111 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r110, $r111);

        r112 = virtualinvoke r101.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i12 = interfaceinvoke r112.<java.util.List: int size()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l13, 1L);

        $r113 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r112, $r113, "default");

        $r114 = virtualinvoke r101.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $z8 = interfaceinvoke $r114.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r115 = virtualinvoke r101.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z9 = interfaceinvoke $r115.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $r116 = virtualinvoke r101.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z10 = interfaceinvoke $r116.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

        $r117 = virtualinvoke r101.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z11 = interfaceinvoke $r117.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

        $r118 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String LOOP_COMPONENT>;

        r119 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r118);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r119);

        $r120 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: org.apache.storm.topology.IRichBolt getBolt()>();

        $r121 = virtualinvoke $r120.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r121, class "Lcom/yahoo/bullet/storm/LoopBolt;");

        $r122 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getParallelism()>();

        $r123 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r122, $r123);

        $r124 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getCpuLoad()>();

        $r125 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r124, $r125);

        $r126 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOnHeap()>();

        $r127 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(256.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r126, $r127);

        $r128 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.Number getOffHeap()>();

        $r129 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(160.0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r128, $r129);

        r130 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getShuffleGroupings()>();

        $i14 = interfaceinvoke r130.<java.util.List: int size()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l15, 2L);

        $r131 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r130, $r131, "feedback");

        $r132 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void assertContains(java.util.List,java.lang.String,java.lang.String)>(r130, $r132, "feedback");

        $r133 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getAllGroupings()>();

        $z12 = interfaceinvoke $r133.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        $r134 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.List getDirectGroupings()>();

        $z13 = interfaceinvoke $r134.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        $r135 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getFieldsGroupings()>();

        $z14 = interfaceinvoke $r135.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

        $r136 = virtualinvoke r119.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.util.Map getCustomGroupings()>();

        $z15 = interfaceinvoke $r136.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

        $r137 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String REPLAY_COMPONENT>;

        r138 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r137);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>(r138);

        return;
    }

    public void testDisabledLoopBoltOnNoWindowing()
    {
        com.yahoo.bullet.storm.StormUtilsTest r0;
        com.yahoo.bullet.storm.testing.CustomIRichSpout $r1;
        com.yahoo.bullet.storm.testing.CustomTopologyBuilder $r2, $r7, $r8, $r9, $r11;
        java.lang.Integer $r3;
        com.yahoo.bullet.storm.BulletStormConfig $r5;
        java.lang.Boolean $r6;
        boolean $z0, $z1;
        java.util.List $r10, $r12;
        int $i0, $i2;
        long $l1, $l3;
        com.yahoo.bullet.storm.testing.CustomSpoutDeclarer $r13, $r15, $r17;
        java.lang.String $r14, $r16, $r18, $r20, $r22, $r24;
        com.yahoo.bullet.storm.testing.CustomBoltDeclarer $r19, $r21, $r23, $r25;

        r0 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        $r2 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r1 = new com.yahoo.bullet.storm.testing.CustomIRichSpout;

        specialinvoke $r1.<com.yahoo.bullet.storm.testing.CustomIRichSpout: void <init>()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        virtualinvoke $r2.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: org.apache.storm.topology.SpoutDeclarer setSpout(java.lang.String,org.apache.storm.topology.IRichSpout,java.lang.Number)>("source", $r1, $r3);

        $r5 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r5.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.query.window.disable", $r6);

        $r7 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $z0 = virtualinvoke $r7.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: boolean isTopologyCreated()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void submitWithTopology(java.lang.String)>("source");

        $r8 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $z1 = virtualinvoke $r8.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: boolean isTopologyCreated()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r9 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r10 = virtualinvoke $r9.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: java.util.List getCreatedSpouts()>();

        $i0 = interfaceinvoke $r10.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 3L);

        $r11 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r12 = virtualinvoke $r11.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: java.util.List getCreatedBolts()>();

        $i2 = interfaceinvoke $r12.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 3L);

        $r13 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>("source");

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r13);

        $r14 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        $r15 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>($r14);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r15);

        $r16 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        $r17 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>($r16);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r17);

        $r18 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        $r19 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r18);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r19);

        $r20 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        $r21 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r20);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r21);

        $r22 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String RESULT_COMPONENT>;

        $r23 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r22);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r23);

        $r24 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String LOOP_COMPONENT>;

        $r25 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r24);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r25);

        return;
    }

    public void testEnabledLoopBoltOnNoWindowingButReplay()
    {
        com.yahoo.bullet.storm.StormUtilsTest r0;
        com.yahoo.bullet.storm.testing.CustomIRichSpout $r1;
        com.yahoo.bullet.storm.testing.CustomTopologyBuilder $r2, $r9, $r10, $r11, $r13;
        java.lang.Integer $r3;
        com.yahoo.bullet.storm.BulletStormConfig $r5, $r7;
        java.lang.Boolean $r6, $r8;
        boolean $z0, $z1;
        java.util.List $r12, $r14;
        int $i0, $i2;
        long $l1, $l3;
        com.yahoo.bullet.storm.testing.CustomSpoutDeclarer $r15, $r17, $r19;
        java.lang.String $r16, $r18, $r20, $r22, $r24, $r26, $r28;
        com.yahoo.bullet.storm.testing.CustomBoltDeclarer $r21, $r23, $r25, $r27, $r29;

        r0 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        $r2 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r1 = new com.yahoo.bullet.storm.testing.CustomIRichSpout;

        specialinvoke $r1.<com.yahoo.bullet.storm.testing.CustomIRichSpout: void <init>()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        virtualinvoke $r2.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: org.apache.storm.topology.SpoutDeclarer setSpout(java.lang.String,org.apache.storm.topology.IRichSpout,java.lang.Number)>("source", $r1, $r3);

        $r5 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r5.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.query.window.disable", $r6);

        $r7 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r7.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.replay.enable", $r8);

        $r9 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $z0 = virtualinvoke $r9.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: boolean isTopologyCreated()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void submitWithTopology(java.lang.String)>("source");

        $r10 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $z1 = virtualinvoke $r10.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: boolean isTopologyCreated()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r11 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r12 = virtualinvoke $r11.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: java.util.List getCreatedSpouts()>();

        $i0 = interfaceinvoke $r12.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 3L);

        $r13 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r14 = virtualinvoke $r13.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: java.util.List getCreatedBolts()>();

        $i2 = interfaceinvoke $r14.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 5L);

        $r15 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>("source");

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r15);

        $r16 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String TICK_COMPONENT>;

        $r17 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>($r16);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r17);

        $r18 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String QUERY_COMPONENT>;

        $r19 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer getSpout(java.lang.String)>($r18);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r19);

        $r20 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String FILTER_COMPONENT>;

        $r21 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r20);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r21);

        $r22 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String JOIN_COMPONENT>;

        $r23 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r22);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r23);

        $r24 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String RESULT_COMPONENT>;

        $r25 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r24);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r25);

        $r26 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String LOOP_COMPONENT>;

        $r27 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r26);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r27);

        $r28 = <com.yahoo.bullet.storm.TopologyConstants: java.lang.String REPLAY_COMPONENT>;

        $r29 = specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomBoltDeclarer getBolt(java.lang.String)>($r28);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r29);

        return;
    }

    public void testHookingInCustomMetricsConsumer()
    {
        com.yahoo.bullet.storm.StormUtilsTest r0;
        com.yahoo.bullet.storm.testing.CustomIRichSpout $r1;
        com.yahoo.bullet.storm.testing.CustomTopologyBuilder $r2, $r15, $r16;
        java.lang.Integer $r3;
        com.yahoo.bullet.storm.BulletStormConfig $r5, $r8, $r11, $r13, $r17, $r20;
        java.lang.Boolean $r6, $r19, $r22;
        java.lang.Class $r7;
        java.lang.String $r9;
        java.util.List $r10;
        java.lang.Object $r12, $r14, $r18, $r21;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        $r2 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $r1 = new com.yahoo.bullet.storm.testing.CustomIRichSpout;

        specialinvoke $r1.<com.yahoo.bullet.storm.testing.CustomIRichSpout: void <init>()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        virtualinvoke $r2.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: org.apache.storm.topology.SpoutDeclarer setSpout(java.lang.String,org.apache.storm.topology.IRichSpout,java.lang.Number)>("source", $r1, $r3);

        $r5 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r5.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.metrics.enable", $r6);

        $r8 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r7 = class "Lcom/yahoo/bullet/storm/testing/CustomIMetricsConsumer;";

        $r9 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r10 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r9);

        virtualinvoke $r8.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.metrics.classes", $r10);

        $r11 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r12 = virtualinvoke $r11.<com.yahoo.bullet.storm.BulletStormConfig: java.lang.Object get(java.lang.String)>("bullet.topology.custom.metrics.consumer.was.registered");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r12);

        $r13 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r14 = virtualinvoke $r13.<com.yahoo.bullet.storm.BulletStormConfig: java.lang.Object get(java.lang.String)>("bullet.topology.custom.metrics.consumer.v2.enabled");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r14);

        $r15 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $z0 = virtualinvoke $r15.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: boolean isTopologyCreated()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        specialinvoke r0.<com.yahoo.bullet.storm.StormUtilsTest: void submitWithTopology(java.lang.String)>("source");

        $r16 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.testing.CustomTopologyBuilder builder>;

        $z1 = virtualinvoke $r16.<com.yahoo.bullet.storm.testing.CustomTopologyBuilder: boolean isTopologyCreated()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r17 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r18 = virtualinvoke $r17.<com.yahoo.bullet.storm.BulletStormConfig: java.lang.Object get(java.lang.String)>("bullet.topology.custom.metrics.consumer.v2.enabled");

        $r19 = (java.lang.Boolean) $r18;

        $z2 = virtualinvoke $r19.<java.lang.Boolean: boolean booleanValue()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r20 = r0.<com.yahoo.bullet.storm.StormUtilsTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r21 = virtualinvoke $r20.<com.yahoo.bullet.storm.BulletStormConfig: java.lang.Object get(java.lang.String)>("bullet.topology.custom.metrics.consumer.was.registered");

        $r22 = (java.lang.Boolean) $r21;

        $z3 = virtualinvoke $r22.<java.lang.Boolean: boolean booleanValue()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        return;
    }

    public void testGetHashIndex()
    {
        java.util.Random $r0;
        int $i0, i1, i2;
        java.lang.Integer $r2;
        com.yahoo.bullet.storm.StormUtilsTest r3;
        boolean $z0;

        r3 := @this: com.yahoo.bullet.storm.StormUtilsTest;

        $r0 = new java.util.Random;

        specialinvoke $r0.<java.util.Random: void <init>()>();

        i2 = 0;

     label1:
        if i2 >= 10000 goto label4;

        $i0 = virtualinvoke $r0.<java.util.Random: int nextInt()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        i1 = staticinvoke <com.yahoo.bullet.storm.StormUtils: int getHashIndex(java.lang.Object,int)>($r2, 10);

        if 0 > i1 goto label2;

        if i1 >= 10 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    public static boolean lambda$getSpout$1(java.lang.String, com.yahoo.bullet.storm.testing.CustomSpoutDeclarer)
    {
        java.lang.String r0, $r2;
        com.yahoo.bullet.storm.testing.CustomSpoutDeclarer r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.yahoo.bullet.storm.testing.CustomSpoutDeclarer;

        $r2 = virtualinvoke r1.<com.yahoo.bullet.storm.testing.CustomSpoutDeclarer: java.lang.String getId()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public static boolean lambda$getBolt$0(java.lang.String, com.yahoo.bullet.storm.testing.CustomBoltDeclarer)
    {
        java.lang.String r0, $r2;
        com.yahoo.bullet.storm.testing.CustomBoltDeclarer r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.yahoo.bullet.storm.testing.CustomBoltDeclarer;

        $r2 = virtualinvoke r1.<com.yahoo.bullet.storm.testing.CustomBoltDeclarer: java.lang.String getId()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public static void <clinit>()
    {
        <com.yahoo.bullet.storm.StormUtilsTest: int HASH_COUNT> = 10;

        <com.yahoo.bullet.storm.StormUtilsTest: int NUM_TESTS> = 10000;

        return;
    }
}
