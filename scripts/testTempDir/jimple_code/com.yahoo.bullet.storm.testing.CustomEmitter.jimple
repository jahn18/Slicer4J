public class com.yahoo.bullet.storm.testing.CustomEmitter extends java.lang.Object implements org.apache.storm.spout.ISpoutOutputCollector
{
    private java.util.List emitted;

    public void <init>()
    {
        com.yahoo.bullet.storm.testing.CustomEmitter r0;
        java.util.ArrayList $r1;

        r0 := @this: com.yahoo.bullet.storm.testing.CustomEmitter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List emitted> = $r1;

        return;
    }

    public java.util.List emit(java.lang.String, java.util.List, java.lang.Object)
    {
        com.yahoo.bullet.storm.testing.CustomEmitter r0;
        com.yahoo.bullet.storm.testing.CustomEmitter$Triplet $r1;
        java.lang.String r2;
        java.util.List r3, $r5, $r6, $r8;
        java.lang.Object r4;
        int $i0, $i1;
        java.lang.Integer $r7;

        r0 := @this: com.yahoo.bullet.storm.testing.CustomEmitter;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.List;

        r4 := @parameter2: java.lang.Object;

        $r5 = r0.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List emitted>;

        $r1 = new com.yahoo.bullet.storm.testing.CustomEmitter$Triplet;

        specialinvoke $r1.<com.yahoo.bullet.storm.testing.CustomEmitter$Triplet: void <init>(java.lang.String,java.util.List,java.lang.Object)>(r2, r3, r4);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r6 = r0.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List emitted>;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r8 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r7);

        return $r8;
    }

    public java.util.stream.Stream getAllEmitted()
    {
        com.yahoo.bullet.storm.testing.CustomEmitter r0;
        java.util.List $r1;
        java.util.stream.Stream $r2;

        r0 := @this: com.yahoo.bullet.storm.testing.CustomEmitter;

        $r1 = r0.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List emitted>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.stream.Stream stream()>();

        return $r2;
    }

    public java.util.stream.Stream getAllEmittedTo(java.lang.String)
    {
        com.yahoo.bullet.storm.testing.CustomEmitter r0;
        java.util.stream.Stream $r1, $r4;
        java.lang.String r2;
        java.util.function.Predicate $r3;

        r0 := @this: com.yahoo.bullet.storm.testing.CustomEmitter;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.stream.Stream getAllEmitted()>();

        $r3 = staticinvoke <com.yahoo.bullet.storm.testing.CustomEmitter$lambda_getAllEmittedTo_0__96: java.util.function.Predicate bootstrap$(java.lang.String)>(r2);

        $r4 = interfaceinvoke $r1.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r3);

        return $r4;
    }

    public java.util.stream.Stream getTuplesEmittedTo(java.lang.String)
    {
        com.yahoo.bullet.storm.testing.CustomEmitter r0;
        java.lang.String r1;
        java.util.stream.Stream $r2, $r4;
        java.util.function.Function $r3;

        r0 := @this: com.yahoo.bullet.storm.testing.CustomEmitter;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.stream.Stream getAllEmittedTo(java.lang.String)>(r1);

        $r3 = staticinvoke <com.yahoo.bullet.storm.testing.CustomEmitter$getTuple__101: java.util.function.Function bootstrap$()>();

        $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r3);

        return $r4;
    }

    public boolean wasTupleEmitted(java.util.List)
    {
        com.yahoo.bullet.storm.testing.CustomEmitter r0;
        java.util.stream.Stream $r1, $r3;
        java.util.function.Function $r2;
        java.util.List r4;
        java.util.function.Predicate $r5;
        boolean $z0;

        r0 := @this: com.yahoo.bullet.storm.testing.CustomEmitter;

        r4 := @parameter0: java.util.List;

        $r1 = virtualinvoke r0.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.stream.Stream getAllEmitted()>();

        $r2 = staticinvoke <com.yahoo.bullet.storm.testing.CustomEmitter$getTuple__100: java.util.function.Function bootstrap$()>();

        $r3 = interfaceinvoke $r1.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r2);

        $r5 = staticinvoke <com.yahoo.bullet.storm.testing.CustomEmitter$lambda_wasTupleEmitted_1__103: java.util.function.Predicate bootstrap$(java.util.List)>(r4);

        $z0 = interfaceinvoke $r3.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>($r5);

        return $z0;
    }

    public boolean wasTupleEmitted(java.util.List, int)
    {
        com.yahoo.bullet.storm.testing.CustomEmitter r0;
        java.util.stream.Stream $r1, $r3, $r6;
        java.util.function.Function $r2;
        java.util.List r4;
        java.util.function.Predicate $r5;
        long $l0, $l2;
        int i1;
        byte $b3;
        boolean $z0;

        r0 := @this: com.yahoo.bullet.storm.testing.CustomEmitter;

        r4 := @parameter0: java.util.List;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.stream.Stream getAllEmitted()>();

        $r2 = staticinvoke <com.yahoo.bullet.storm.testing.CustomEmitter$getTuple__97: java.util.function.Function bootstrap$()>();

        $r3 = interfaceinvoke $r1.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r2);

        $r5 = staticinvoke <com.yahoo.bullet.storm.testing.CustomEmitter$lambda_wasTupleEmitted_2__102: java.util.function.Predicate bootstrap$(java.util.List)>(r4);

        $r6 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r5);

        $l0 = interfaceinvoke $r6.<java.util.stream.Stream: long count()>();

        $l2 = (long) i1;

        $b3 = $l0 cmp $l2;

        if $b3 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean wasTupleEmittedTo(java.util.List, java.lang.String)
    {
        com.yahoo.bullet.storm.testing.CustomEmitter r0;
        java.lang.String r1;
        java.util.stream.Stream $r2;
        java.util.List r3;
        java.util.function.Predicate $r4;
        boolean $z0;

        r0 := @this: com.yahoo.bullet.storm.testing.CustomEmitter;

        r3 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.stream.Stream getTuplesEmittedTo(java.lang.String)>(r1);

        $r4 = staticinvoke <com.yahoo.bullet.storm.testing.CustomEmitter$lambda_wasTupleEmittedTo_3__98: java.util.function.Predicate bootstrap$(java.util.List)>(r3);

        $z0 = interfaceinvoke $r2.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>($r4);

        return $z0;
    }

    public boolean wasTupleEmittedTo(java.util.List, java.lang.String, int)
    {
        com.yahoo.bullet.storm.testing.CustomEmitter r0;
        java.lang.String r1;
        java.util.stream.Stream $r2, $r5;
        java.util.List r3;
        java.util.function.Predicate $r4;
        long $l0, $l2;
        int i1;
        byte $b3;
        boolean $z0;

        r0 := @this: com.yahoo.bullet.storm.testing.CustomEmitter;

        r3 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.stream.Stream getTuplesEmittedTo(java.lang.String)>(r1);

        $r4 = staticinvoke <com.yahoo.bullet.storm.testing.CustomEmitter$lambda_wasTupleEmittedTo_4__99: java.util.function.Predicate bootstrap$(java.util.List)>(r3);

        $r5 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r4);

        $l0 = interfaceinvoke $r5.<java.util.stream.Stream: long count()>();

        $l2 = (long) i1;

        $b3 = $l0 cmp $l2;

        if $b3 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean wasTupleEmitted(org.apache.storm.tuple.Tuple)
    {
        com.yahoo.bullet.storm.testing.CustomEmitter r0;
        org.apache.storm.tuple.Tuple r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: com.yahoo.bullet.storm.testing.CustomEmitter;

        r1 := @parameter0: org.apache.storm.tuple.Tuple;

        $r2 = interfaceinvoke r1.<org.apache.storm.tuple.Tuple: java.util.List getValues()>();

        $z0 = virtualinvoke r0.<com.yahoo.bullet.storm.testing.CustomEmitter: boolean wasTupleEmitted(java.util.List)>($r2);

        return $z0;
    }

    public boolean wasTupleEmitted(org.apache.storm.tuple.Tuple, int)
    {
        com.yahoo.bullet.storm.testing.CustomEmitter r0;
        org.apache.storm.tuple.Tuple r1;
        java.util.List $r2;
        int i0;
        boolean $z0;

        r0 := @this: com.yahoo.bullet.storm.testing.CustomEmitter;

        r1 := @parameter0: org.apache.storm.tuple.Tuple;

        i0 := @parameter1: int;

        $r2 = interfaceinvoke r1.<org.apache.storm.tuple.Tuple: java.util.List getValues()>();

        $z0 = virtualinvoke r0.<com.yahoo.bullet.storm.testing.CustomEmitter: boolean wasTupleEmitted(java.util.List,int)>($r2, i0);

        return $z0;
    }

    public boolean wasTupleEmittedTo(org.apache.storm.tuple.Tuple, java.lang.String)
    {
        com.yahoo.bullet.storm.testing.CustomEmitter r0;
        org.apache.storm.tuple.Tuple r1;
        java.util.List $r2;
        java.lang.String r3;
        boolean $z0;

        r0 := @this: com.yahoo.bullet.storm.testing.CustomEmitter;

        r1 := @parameter0: org.apache.storm.tuple.Tuple;

        r3 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r1.<org.apache.storm.tuple.Tuple: java.util.List getValues()>();

        $z0 = virtualinvoke r0.<com.yahoo.bullet.storm.testing.CustomEmitter: boolean wasTupleEmittedTo(java.util.List,java.lang.String)>($r2, r3);

        return $z0;
    }

    public boolean wasTupleEmittedTo(org.apache.storm.tuple.Tuple, java.lang.String, int)
    {
        com.yahoo.bullet.storm.testing.CustomEmitter r0;
        org.apache.storm.tuple.Tuple r1;
        java.util.List $r2;
        java.lang.String r3;
        int i0;
        boolean $z0;

        r0 := @this: com.yahoo.bullet.storm.testing.CustomEmitter;

        r1 := @parameter0: org.apache.storm.tuple.Tuple;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = interfaceinvoke r1.<org.apache.storm.tuple.Tuple: java.util.List getValues()>();

        $z0 = virtualinvoke r0.<com.yahoo.bullet.storm.testing.CustomEmitter: boolean wasTupleEmittedTo(java.util.List,java.lang.String,int)>($r2, r3, i0);

        return $z0;
    }

    public boolean wasNthEmitted(java.util.List, int)
    {
        com.yahoo.bullet.storm.testing.CustomEmitter r0;
        java.util.List $r1, $r2, $r5, r6;
        int $i0, i1, $i2;
        java.lang.Object $r3;
        com.yahoo.bullet.storm.testing.CustomEmitter$Triplet $r4;
        boolean $z0, $z1;

        r0 := @this: com.yahoo.bullet.storm.testing.CustomEmitter;

        r6 := @parameter0: java.util.List;

        i1 := @parameter1: int;

        $r1 = r0.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List emitted>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 < i1 goto label1;

        $r2 = r0.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List emitted>;

        $i2 = i1 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i2);

        $r4 = (com.yahoo.bullet.storm.testing.CustomEmitter$Triplet) $r3;

        $r5 = virtualinvoke $r4.<com.yahoo.bullet.storm.testing.CustomEmitter$Triplet: java.util.List getTuple()>();

        $z0 = interfaceinvoke $r5.<java.util.List: boolean equals(java.lang.Object)>(r6);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean wasNthEmitted(org.apache.storm.tuple.Tuple, int)
    {
        com.yahoo.bullet.storm.testing.CustomEmitter r0;
        org.apache.storm.tuple.Tuple r1;
        java.util.List $r2;
        int i0;
        boolean $z0;

        r0 := @this: com.yahoo.bullet.storm.testing.CustomEmitter;

        r1 := @parameter0: org.apache.storm.tuple.Tuple;

        i0 := @parameter1: int;

        $r2 = interfaceinvoke r1.<org.apache.storm.tuple.Tuple: java.util.List getValues()>();

        $z0 = virtualinvoke r0.<com.yahoo.bullet.storm.testing.CustomEmitter: boolean wasNthEmitted(java.util.List,int)>($r2, i0);

        return $z0;
    }

    public void emitDirect(int, java.lang.String, java.util.List, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        com.yahoo.bullet.storm.testing.CustomEmitter r1;
        int i0;
        java.lang.String r2;
        java.util.List r3;
        java.lang.Object r4;

        r1 := @this: com.yahoo.bullet.storm.testing.CustomEmitter;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Emit Direct not supported");

        throw $r0;
    }

    public long getPendingCount()
    {
        java.lang.UnsupportedOperationException $r0;
        com.yahoo.bullet.storm.testing.CustomEmitter r1;

        r1 := @this: com.yahoo.bullet.storm.testing.CustomEmitter;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Get Pending Count not supported");

        throw $r0;
    }

    public void flush()
    {
        java.lang.UnsupportedOperationException $r0;
        com.yahoo.bullet.storm.testing.CustomEmitter r1;

        r1 := @this: com.yahoo.bullet.storm.testing.CustomEmitter;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Flush not supported");

        throw $r0;
    }

    public void reportError(java.lang.Throwable)
    {
        java.lang.UnsupportedOperationException $r0;
        com.yahoo.bullet.storm.testing.CustomEmitter r1;
        java.lang.Throwable r2;

        r1 := @this: com.yahoo.bullet.storm.testing.CustomEmitter;

        r2 := @parameter0: java.lang.Throwable;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Report Error not supported");

        throw $r0;
    }

    public java.util.List getEmitted()
    {
        com.yahoo.bullet.storm.testing.CustomEmitter r0;
        java.util.List $r1;

        r0 := @this: com.yahoo.bullet.storm.testing.CustomEmitter;

        $r1 = r0.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List emitted>;

        return $r1;
    }

    public static boolean lambda$wasTupleEmittedTo$4(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        boolean $z0;

        r1 := @parameter0: java.util.List;

        r0 := @parameter1: java.util.List;

        $z0 = interfaceinvoke r0.<java.util.List: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public static boolean lambda$wasTupleEmittedTo$3(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        boolean $z0;

        r1 := @parameter0: java.util.List;

        r0 := @parameter1: java.util.List;

        $z0 = interfaceinvoke r0.<java.util.List: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public static boolean lambda$wasTupleEmitted$2(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        boolean $z0;

        r1 := @parameter0: java.util.List;

        r0 := @parameter1: java.util.List;

        $z0 = interfaceinvoke r0.<java.util.List: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public static boolean lambda$wasTupleEmitted$1(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        boolean $z0;

        r1 := @parameter0: java.util.List;

        r0 := @parameter1: java.util.List;

        $z0 = interfaceinvoke r0.<java.util.List: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public static boolean lambda$getAllEmittedTo$0(java.lang.String, com.yahoo.bullet.storm.testing.CustomEmitter$Triplet)
    {
        java.lang.String r0, $r2;
        com.yahoo.bullet.storm.testing.CustomEmitter$Triplet r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.yahoo.bullet.storm.testing.CustomEmitter$Triplet;

        $r2 = virtualinvoke r1.<com.yahoo.bullet.storm.testing.CustomEmitter$Triplet: java.lang.String getStreamId()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }
}
