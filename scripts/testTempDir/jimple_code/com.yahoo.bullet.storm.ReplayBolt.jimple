public class com.yahoo.bullet.storm.ReplayBolt extends com.yahoo.bullet.storm.ConfigComponent implements org.apache.storm.topology.IRichBolt
{
    private static final org.slf4j.Logger log;
    private static final long serialVersionUID;
    private transient com.yahoo.bullet.storm.metric.BulletMetrics metrics;
    private transient com.yahoo.bullet.storm.metric.AbsoluteCountMetric batchedQueriesCount;
    private transient com.yahoo.bullet.storm.metric.MapCountMetric activeReplaysCount;
    private transient com.yahoo.bullet.storm.metric.MapCountMetric createdReplaysCount;
    private transient org.apache.storm.task.OutputCollector collector;
    private transient com.yahoo.bullet.storm.TupleClassifier classifier;
    private transient com.yahoo.bullet.storage.StorageManager storageManager;
    private transient com.yahoo.bullet.storm.batching.BatchManager batchManager;
    private transient java.util.Map replays;
    private transient boolean replayBatchCompressEnable;

    public void <init>(com.yahoo.bullet.storm.BulletStormConfig)
    {
        com.yahoo.bullet.storm.ReplayBolt r0;
        com.yahoo.bullet.storm.BulletStormConfig r1;

        r0 := @this: com.yahoo.bullet.storm.ReplayBolt;

        r1 := @parameter0: com.yahoo.bullet.storm.BulletStormConfig;

        specialinvoke r0.<com.yahoo.bullet.storm.ConfigComponent: void <init>(com.yahoo.bullet.storm.BulletStormConfig)>(r1);

        return;
    }

    public void prepare(java.util.Map, org.apache.storm.task.TopologyContext, org.apache.storm.task.OutputCollector)
    {
        com.yahoo.bullet.storm.ReplayBolt r0;
        org.apache.storm.task.OutputCollector r1;
        com.yahoo.bullet.storm.TupleClassifier $r2;
        com.yahoo.bullet.storm.metric.BulletMetrics $r3, $r5, $r29, $r32, $r34, $r36;
        com.yahoo.bullet.storm.BulletStormConfig $r4, $r6, $r9, $r12, $r17;
        boolean $z0, $z1, $z2;
        java.lang.Object $r7, $r10, $r13;
        java.lang.Integer $r8, $r22, $r27;
        int i0, $i1, $i4, $i7, $i8;
        java.lang.Number r11;
        java.lang.Boolean $r14;
        com.yahoo.bullet.storm.batching.BatchManager $r15, $r23, $r26, $r28;
        java.util.HashMap $r16;
        com.yahoo.bullet.storage.StorageManager $r18;
        java.util.Map r19, r40;
        org.slf4j.Logger $r20, $r24;
        long $l2, $l3, $l5, $l6, $l9, l10, l11;
        java.lang.Long $r21, $r25;
        com.yahoo.bullet.storm.metric.AbsoluteCountMetric $r30, $r33;
        org.apache.storm.task.TopologyContext r31;
        com.yahoo.bullet.storm.metric.MapCountMetric $r35, $r37;
        java.lang.Exception $r38;
        java.lang.RuntimeException $r39;

        r0 := @this: com.yahoo.bullet.storm.ReplayBolt;

        r40 := @parameter0: java.util.Map;

        r31 := @parameter1: org.apache.storm.task.TopologyContext;

        r1 := @parameter2: org.apache.storm.task.OutputCollector;

        r0.<com.yahoo.bullet.storm.ReplayBolt: org.apache.storm.task.OutputCollector collector> = r1;

        $r2 = new com.yahoo.bullet.storm.TupleClassifier;

        specialinvoke $r2.<com.yahoo.bullet.storm.TupleClassifier: void <init>()>();

        r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.TupleClassifier classifier> = $r2;

        $r3 = new com.yahoo.bullet.storm.metric.BulletMetrics;

        $r4 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.BulletStormConfig config>;

        specialinvoke $r3.<com.yahoo.bullet.storm.metric.BulletMetrics: void <init>(com.yahoo.bullet.storm.BulletStormConfig)>($r4);

        r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.BulletMetrics metrics> = $r3;

        $r5 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.BulletMetrics metrics>;

        $z0 = virtualinvoke $r5.<com.yahoo.bullet.storm.metric.BulletMetrics: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r32 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.BulletMetrics metrics>;

        $r33 = virtualinvoke $r32.<com.yahoo.bullet.storm.metric.BulletMetrics: com.yahoo.bullet.storm.metric.AbsoluteCountMetric registerAbsoluteCountMetric(java.lang.String,org.apache.storm.task.TopologyContext)>("bullet_batched_queries", r31);

        r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.AbsoluteCountMetric batchedQueriesCount> = $r33;

        $r34 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.BulletMetrics metrics>;

        $r35 = virtualinvoke $r34.<com.yahoo.bullet.storm.metric.BulletMetrics: com.yahoo.bullet.storm.metric.MapCountMetric registerMapCountMetric(java.lang.String,org.apache.storm.task.TopologyContext)>("bullet_active_replays", r31);

        r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.MapCountMetric activeReplaysCount> = $r35;

        $r36 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.BulletMetrics metrics>;

        $r37 = virtualinvoke $r36.<com.yahoo.bullet.storm.metric.BulletMetrics: com.yahoo.bullet.storm.metric.MapCountMetric registerMapCountMetric(java.lang.String,org.apache.storm.task.TopologyContext)>("bullet_created_replays", r31);

        r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.MapCountMetric createdReplaysCount> = $r37;

     label1:
        $r6 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r7 = virtualinvoke $r6.<com.yahoo.bullet.storm.BulletStormConfig: java.lang.Object getAs(java.lang.String,java.lang.Class)>("bullet.topology.replay.batch.size", class "Ljava/lang/Integer;");

        $r8 = (java.lang.Integer) $r7;

        i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $r9 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r10 = virtualinvoke $r9.<com.yahoo.bullet.storm.BulletStormConfig: java.lang.Object getRequiredConfigAs(java.lang.String,java.lang.Class)>("bullet.topology.join.bolt.parallelism", class "Ljava/lang/Number;");

        r11 = (java.lang.Number) $r10;

        $r12 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r13 = virtualinvoke $r12.<com.yahoo.bullet.storm.BulletStormConfig: java.lang.Object getAs(java.lang.String,java.lang.Class)>("bullet.topology.replay.batch.compress.enable", class "Ljava/lang/Boolean;");

        $r14 = (java.lang.Boolean) $r13;

        $z1 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>();

        r0.<com.yahoo.bullet.storm.ReplayBolt: boolean replayBatchCompressEnable> = $z1;

        $r15 = new com.yahoo.bullet.storm.batching.BatchManager;

        $i1 = virtualinvoke r11.<java.lang.Number: int intValue()>();

        $z2 = r0.<com.yahoo.bullet.storm.ReplayBolt: boolean replayBatchCompressEnable>;

        specialinvoke $r15.<com.yahoo.bullet.storm.batching.BatchManager: void <init>(int,int,boolean)>(i0, $i1, $z2);

        r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.batching.BatchManager batchManager> = $r15;

        $r16 = new java.util.HashMap;

        specialinvoke $r16.<java.util.HashMap: void <init>()>();

        r0.<com.yahoo.bullet.storm.ReplayBolt: java.util.Map replays> = $r16;

     label2:
        $r17 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r18 = staticinvoke <com.yahoo.bullet.storage.StorageManager: com.yahoo.bullet.storage.StorageManager 'from'(com.yahoo.bullet.common.BulletConfig)>($r17);

        r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storage.StorageManager storageManager> = $r18;

     label3:
        goto label5;

     label4:
        $r38 := @caughtexception;

        $r39 = new java.lang.RuntimeException;

        specialinvoke $r39.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not create StorageManager.", $r38);

        throw $r39;

     label5:
        l10 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r19 = specialinvoke r0.<com.yahoo.bullet.storm.ReplayBolt: java.util.Map getStoredQueries()>();

        $r20 = <com.yahoo.bullet.storm.ReplayBolt: org.slf4j.Logger log>;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = $l2 - l10;

        $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $i4 = interfaceinvoke r19.<java.util.Map: int size()>();

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        interfaceinvoke $r20.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Took {} ms to get {} queries.", $r21, $r22);

        l11 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r23 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.batching.BatchManager batchManager>;

        virtualinvoke $r23.<com.yahoo.bullet.storm.batching.BatchManager: void addAll(java.util.Map)>(r19);

        $r24 = <com.yahoo.bullet.storm.ReplayBolt: org.slf4j.Logger log>;

        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l6 = $l5 - l11;

        $r25 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        $r26 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.batching.BatchManager batchManager>;

        $i7 = virtualinvoke $r26.<com.yahoo.bullet.storm.batching.BatchManager: int size()>();

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        interfaceinvoke $r24.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Took {} ms to batch {} queries.", $r25, $r27);

        $r29 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.BulletMetrics metrics>;

        $r30 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.AbsoluteCountMetric batchedQueriesCount>;

        $r28 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.batching.BatchManager batchManager>;

        $i8 = virtualinvoke $r28.<com.yahoo.bullet.storm.batching.BatchManager: int size()>();

        $l9 = (long) $i8;

        virtualinvoke $r29.<com.yahoo.bullet.storm.metric.BulletMetrics: void setCount(com.yahoo.bullet.storm.metric.AbsoluteCountMetric,long)>($r30, $l9);

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    private java.util.Map getStoredQueries()
    {
        com.yahoo.bullet.storm.ReplayBolt r0;
        com.yahoo.bullet.storage.StorageManager $r1;
        java.util.concurrent.CompletableFuture $r2;
        java.lang.Object $r3;
        java.util.Map $r4;
        java.lang.Exception $r5;
        java.lang.RuntimeException $r7;

        r0 := @this: com.yahoo.bullet.storm.ReplayBolt;

     label1:
        $r1 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storage.StorageManager storageManager>;

        $r2 = virtualinvoke $r1.<com.yahoo.bullet.storage.StorageManager: java.util.concurrent.CompletableFuture getAll()>();

        $r3 = virtualinvoke $r2.<java.util.concurrent.CompletableFuture: java.lang.Object get()>();

        $r4 = (java.util.Map) $r3;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to get queries from storage.", $r5);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void execute(org.apache.storm.tuple.Tuple)
    {
        com.yahoo.bullet.storm.ReplayBolt r0;
        org.apache.storm.tuple.Tuple r1;
        com.yahoo.bullet.storm.TupleClassifier $r2;
        java.util.Optional $r3;
        com.yahoo.bullet.storm.TupleClassifier$Type $r4, r6;
        java.lang.Object $r5;
        int[] $r7;
        int $i0, $i1;
        org.apache.storm.task.OutputCollector $r8;
        java.lang.Object[] $r9;
        org.slf4j.Logger $r10;
        java.lang.String $r11, $r12;

        r0 := @this: com.yahoo.bullet.storm.ReplayBolt;

        r1 := @parameter0: org.apache.storm.tuple.Tuple;

        $r2 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.TupleClassifier classifier>;

        $r3 = virtualinvoke $r2.<com.yahoo.bullet.storm.TupleClassifier: java.util.Optional classify(org.apache.storm.tuple.Tuple)>(r1);

        $r4 = <com.yahoo.bullet.storm.TupleClassifier$Type: com.yahoo.bullet.storm.TupleClassifier$Type UNKNOWN_TUPLE>;

        $r5 = virtualinvoke $r3.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r4);

        r6 = (com.yahoo.bullet.storm.TupleClassifier$Type) $r5;

        $r7 = <com.yahoo.bullet.storm.ReplayBolt$1: int[] $SwitchMap$com$yahoo$bullet$storm$TupleClassifier$Type>;

        $i0 = virtualinvoke r6.<com.yahoo.bullet.storm.TupleClassifier$Type: int ordinal()>();

        $i1 = $r7[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        specialinvoke r0.<com.yahoo.bullet.storm.ReplayBolt: void onQuery(org.apache.storm.tuple.Tuple)>(r1);

        goto label5;

     label2:
        specialinvoke r0.<com.yahoo.bullet.storm.ReplayBolt: void onMeta(org.apache.storm.tuple.Tuple)>(r1);

        goto label5;

     label3:
        specialinvoke r0.<com.yahoo.bullet.storm.ReplayBolt: void onReplay(org.apache.storm.tuple.Tuple)>(r1);

        return;

     label4:
        $r10 = <com.yahoo.bullet.storm.ReplayBolt: org.slf4j.Logger log>;

        $r9 = newarray (java.lang.Object)[3];

        $r9[0] = r6;

        $r11 = interfaceinvoke r1.<org.apache.storm.tuple.Tuple: java.lang.String getSourceComponent()>();

        $r9[1] = $r11;

        $r12 = interfaceinvoke r1.<org.apache.storm.tuple.Tuple: java.lang.String getSourceStreamId()>();

        $r9[2] = $r12;

        interfaceinvoke $r10.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object[])>("Unknown tuple encountered: {} from {}-{}", $r9);

        return;

     label5:
        $r8 = r0.<com.yahoo.bullet.storm.ReplayBolt: org.apache.storm.task.OutputCollector collector>;

        virtualinvoke $r8.<org.apache.storm.task.OutputCollector: void ack(org.apache.storm.tuple.Tuple)>(r1);

        return;
    }

    public void declareOutputFields(org.apache.storm.topology.OutputFieldsDeclarer)
    {
        org.apache.storm.topology.OutputFieldsDeclarer r0;
        org.apache.storm.tuple.Fields $r1, $r3;
        java.lang.String[] $r2, $r4;
        com.yahoo.bullet.storm.ReplayBolt r5;

        r5 := @this: com.yahoo.bullet.storm.ReplayBolt;

        r0 := @parameter0: org.apache.storm.topology.OutputFieldsDeclarer;

        $r1 = new org.apache.storm.tuple.Fields;

        $r2 = newarray (java.lang.String)[4];

        $r2[0] = "id";

        $r2[1] = "timestamp";

        $r2[2] = "index";

        $r2[3] = "batch";

        specialinvoke $r1.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r2);

        interfaceinvoke r0.<org.apache.storm.topology.OutputFieldsDeclarer: void declareStream(java.lang.String,org.apache.storm.tuple.Fields)>("replay", $r1);

        $r3 = new org.apache.storm.tuple.Fields;

        $r4 = newarray (java.lang.String)[0];

        specialinvoke $r3.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r4);

        interfaceinvoke r0.<org.apache.storm.topology.OutputFieldsDeclarer: void declareStream(java.lang.String,org.apache.storm.tuple.Fields)>("capture", $r3);

        return;
    }

    public void cleanup()
    {
        com.yahoo.bullet.storm.ReplayBolt r0;

        r0 := @this: com.yahoo.bullet.storm.ReplayBolt;

        return;
    }

    private void onQuery(org.apache.storm.tuple.Tuple)
    {
        org.apache.storm.tuple.Tuple r0;
        java.lang.String r1;
        java.lang.Object $r2;
        com.yahoo.bullet.pubsub.PubSubMessage r3;
        com.yahoo.bullet.storm.ReplayBolt r4;
        com.yahoo.bullet.storm.batching.BatchManager $r5, $r6;
        com.yahoo.bullet.storm.metric.BulletMetrics $r7;
        com.yahoo.bullet.storm.metric.AbsoluteCountMetric $r8;
        int $i0;
        long $l1;

        r4 := @this: com.yahoo.bullet.storm.ReplayBolt;

        r0 := @parameter0: org.apache.storm.tuple.Tuple;

        r1 = interfaceinvoke r0.<org.apache.storm.tuple.Tuple: java.lang.String getString(int)>(0);

        $r2 = interfaceinvoke r0.<org.apache.storm.tuple.Tuple: java.lang.Object getValue(int)>(1);

        r3 = (com.yahoo.bullet.pubsub.PubSubMessage) $r2;

        $r5 = r4.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.batching.BatchManager batchManager>;

        virtualinvoke $r5.<com.yahoo.bullet.storm.batching.BatchManager: void add(java.lang.String,java.lang.Object)>(r1, r3);

        $r7 = r4.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.BulletMetrics metrics>;

        $r8 = r4.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.AbsoluteCountMetric batchedQueriesCount>;

        $r6 = r4.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.batching.BatchManager batchManager>;

        $i0 = virtualinvoke $r6.<com.yahoo.bullet.storm.batching.BatchManager: int size()>();

        $l1 = (long) $i0;

        virtualinvoke $r7.<com.yahoo.bullet.storm.metric.BulletMetrics: void setCount(com.yahoo.bullet.storm.metric.AbsoluteCountMetric,long)>($r8, $l1);

        return;
    }

    private void onMeta(org.apache.storm.tuple.Tuple)
    {
        org.apache.storm.tuple.Tuple r0;
        java.lang.String r1;
        java.lang.Object $r2;
        com.yahoo.bullet.pubsub.Metadata r3;
        com.yahoo.bullet.pubsub.Metadata$Signal r4;
        boolean $z0, $z1;
        com.yahoo.bullet.storm.ReplayBolt r5;
        com.yahoo.bullet.storm.batching.BatchManager $r6, $r7;
        com.yahoo.bullet.storm.metric.BulletMetrics $r8;
        com.yahoo.bullet.storm.metric.AbsoluteCountMetric $r9;
        int $i0;
        long $l1;
        org.slf4j.Logger $r10;

        r5 := @this: com.yahoo.bullet.storm.ReplayBolt;

        r0 := @parameter0: org.apache.storm.tuple.Tuple;

        r1 = interfaceinvoke r0.<org.apache.storm.tuple.Tuple: java.lang.String getString(int)>(0);

        $r2 = interfaceinvoke r0.<org.apache.storm.tuple.Tuple: java.lang.Object getValue(int)>(1);

        r3 = (com.yahoo.bullet.pubsub.Metadata) $r2;

        if r3 != null goto label1;

        return;

     label1:
        r4 = virtualinvoke r3.<com.yahoo.bullet.pubsub.Metadata: com.yahoo.bullet.pubsub.Metadata$Signal getSignal()>();

        $z0 = staticinvoke <com.yahoo.bullet.storm.TopologyConstants: boolean isKillSignal(com.yahoo.bullet.pubsub.Metadata$Signal)>(r4);

        if $z0 == 0 goto label2;

        $r6 = r5.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.batching.BatchManager batchManager>;

        virtualinvoke $r6.<com.yahoo.bullet.storm.batching.BatchManager: void remove(java.lang.String)>(r1);

        $r8 = r5.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.BulletMetrics metrics>;

        $r9 = r5.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.AbsoluteCountMetric batchedQueriesCount>;

        $r7 = r5.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.batching.BatchManager batchManager>;

        $i0 = virtualinvoke $r7.<com.yahoo.bullet.storm.batching.BatchManager: int size()>();

        $l1 = (long) $i0;

        virtualinvoke $r8.<com.yahoo.bullet.storm.metric.BulletMetrics: void setCount(com.yahoo.bullet.storm.metric.AbsoluteCountMetric,long)>($r9, $l1);

        $r10 = <com.yahoo.bullet.storm.ReplayBolt: org.slf4j.Logger log>;

        interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Received {} signal and killed query: {}", r4, r1);

        goto label3;

     label2:
        $z1 = staticinvoke <com.yahoo.bullet.storm.TopologyConstants: boolean isReplaySignal(com.yahoo.bullet.pubsub.Metadata$Signal)>(r4);

        if $z1 == 0 goto label3;

        specialinvoke r5.<com.yahoo.bullet.storm.ReplayBolt: void handleReplaySignal()>();

     label3:
        return;
    }

    private void handleReplaySignal()
    {
        com.yahoo.bullet.pubsub.Metadata$Signal $r0;
        org.slf4j.Logger $r1, $r12;
        long l0, $l2, $l3, $l4;
        com.yahoo.bullet.storm.ReplayBolt r2;
        com.yahoo.bullet.storm.metric.MapCountMetric $r3;
        com.yahoo.bullet.storm.metric.BulletMetrics $r4, $r10;
        java.util.Map $r5, $r8;
        com.yahoo.bullet.storm.batching.BatchManager $r6, $r7, $r9, $r14;
        com.yahoo.bullet.storm.metric.AbsoluteCountMetric $r11;
        int $i1, $i5;
        java.lang.Long $r13;
        java.lang.Integer $r15;

        r2 := @this: com.yahoo.bullet.storm.ReplayBolt;

        $r1 = <com.yahoo.bullet.storm.ReplayBolt: org.slf4j.Logger log>;

        $r0 = <com.yahoo.bullet.pubsub.Metadata$Signal: com.yahoo.bullet.pubsub.Metadata$Signal REPLAY>;

        interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Received {} signal.", $r0);

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r4 = r2.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.BulletMetrics metrics>;

        $r3 = r2.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.MapCountMetric activeReplaysCount>;

        virtualinvoke $r4.<com.yahoo.bullet.storm.metric.BulletMetrics: void clearCount(com.yahoo.bullet.storm.metric.MapCountMetric)>($r3);

        $r5 = r2.<com.yahoo.bullet.storm.ReplayBolt: java.util.Map replays>;

        interfaceinvoke $r5.<java.util.Map: void clear()>();

        $r6 = r2.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.batching.BatchManager batchManager>;

        virtualinvoke $r6.<com.yahoo.bullet.storm.batching.BatchManager: void clear()>();

        $r7 = r2.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.batching.BatchManager batchManager>;

        $r8 = specialinvoke r2.<com.yahoo.bullet.storm.ReplayBolt: java.util.Map getStoredQueries()>();

        virtualinvoke $r7.<com.yahoo.bullet.storm.batching.BatchManager: void addAll(java.util.Map)>($r8);

        $r10 = r2.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.BulletMetrics metrics>;

        $r11 = r2.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.AbsoluteCountMetric batchedQueriesCount>;

        $r9 = r2.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.batching.BatchManager batchManager>;

        $i1 = virtualinvoke $r9.<com.yahoo.bullet.storm.batching.BatchManager: int size()>();

        $l2 = (long) $i1;

        virtualinvoke $r10.<com.yahoo.bullet.storm.metric.BulletMetrics: void setCount(com.yahoo.bullet.storm.metric.AbsoluteCountMetric,long)>($r11, $l2);

        $r12 = <com.yahoo.bullet.storm.ReplayBolt: org.slf4j.Logger log>;

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l4 = $l3 - l0;

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r14 = r2.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.batching.BatchManager batchManager>;

        $i5 = virtualinvoke $r14.<com.yahoo.bullet.storm.batching.BatchManager: int size()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Took {} ms to get and batch {} queries.", $r13, $r15);

        return;
    }

    private void onReplay(org.apache.storm.tuple.Tuple)
    {
        org.apache.storm.tuple.Tuple r0;
        java.lang.String r1;
        java.lang.Long $r2;
        long l0;
        java.lang.Boolean $r3;
        boolean z0;
        com.yahoo.bullet.storm.ReplayBolt r4;
        java.util.Map $r5;
        java.lang.Object $r6;
        com.yahoo.bullet.storm.ReplayBolt$Replay r7;
        int[] $r8;
        com.yahoo.bullet.storm.ReplayBolt$ReplayState $r9;
        int $i1, $i2;
        org.slf4j.Logger $r10, $r12, $r14;
        org.apache.storm.task.OutputCollector $r11, $r13, $r15;

        r4 := @this: com.yahoo.bullet.storm.ReplayBolt;

        r0 := @parameter0: org.apache.storm.tuple.Tuple;

        r1 = interfaceinvoke r0.<org.apache.storm.tuple.Tuple: java.lang.String getString(int)>(0);

        $r2 = interfaceinvoke r0.<org.apache.storm.tuple.Tuple: java.lang.Long getLong(int)>(1);

        l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        $r3 = interfaceinvoke r0.<org.apache.storm.tuple.Tuple: java.lang.Boolean getBoolean(int)>(2);

        z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        $r5 = r4.<com.yahoo.bullet.storm.ReplayBolt: java.util.Map replays>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r7 = (com.yahoo.bullet.storm.ReplayBolt$Replay) $r6;

        $r8 = <com.yahoo.bullet.storm.ReplayBolt$1: int[] $SwitchMap$com$yahoo$bullet$storm$ReplayBolt$ReplayState>;

        $r9 = specialinvoke r4.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.ReplayBolt$ReplayState classifyReplay(long,boolean,org.apache.storm.tuple.Tuple,com.yahoo.bullet.storm.ReplayBolt$Replay)>(l0, z0, r0, r7);

        $i1 = virtualinvoke $r9.<com.yahoo.bullet.storm.ReplayBolt$ReplayState: int ordinal()>();

        $i2 = $r8[$i1];

        tableswitch($i2)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            default: goto label7;
        };

     label1:
        specialinvoke r4.<com.yahoo.bullet.storm.ReplayBolt: void startReplay(java.lang.String,long,org.apache.storm.tuple.Tuple)>(r1, l0, r0);

        goto label7;

     label2:
        $r14 = <com.yahoo.bullet.storm.ReplayBolt: org.slf4j.Logger log>;

        interfaceinvoke $r14.<org.slf4j.Logger: void warn(java.lang.String)>("Received replay tuple for past replay.");

        $r15 = r4.<com.yahoo.bullet.storm.ReplayBolt: org.apache.storm.task.OutputCollector collector>;

        virtualinvoke $r15.<org.apache.storm.task.OutputCollector: void fail(org.apache.storm.tuple.Tuple)>(r0);

        goto label7;

     label3:
        $r12 = <com.yahoo.bullet.storm.ReplayBolt: org.slf4j.Logger log>;

        interfaceinvoke $r12.<org.slf4j.Logger: void warn(java.lang.String)>("Received replay tuple for finished replay.");

        $r13 = r4.<com.yahoo.bullet.storm.ReplayBolt: org.apache.storm.task.OutputCollector collector>;

        virtualinvoke $r13.<org.apache.storm.task.OutputCollector: void fail(org.apache.storm.tuple.Tuple)>(r0);

        goto label7;

     label4:
        $r10 = <com.yahoo.bullet.storm.ReplayBolt: org.slf4j.Logger log>;

        interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String)>("Received replay tuple for old replay.");

        $r11 = r4.<com.yahoo.bullet.storm.ReplayBolt: org.apache.storm.task.OutputCollector collector>;

        virtualinvoke $r11.<org.apache.storm.task.OutputCollector: void fail(org.apache.storm.tuple.Tuple)>(r0);

        goto label7;

     label5:
        specialinvoke r4.<com.yahoo.bullet.storm.ReplayBolt: void handleAck(java.lang.String,org.apache.storm.tuple.Tuple,com.yahoo.bullet.storm.ReplayBolt$Replay)>(r1, r0, r7);

        goto label7;

     label6:
        specialinvoke r4.<com.yahoo.bullet.storm.ReplayBolt: void emitBatch(java.lang.String,org.apache.storm.tuple.Tuple,com.yahoo.bullet.storm.ReplayBolt$Replay)>(r1, r0, r7);

     label7:
        return;
    }

    private com.yahoo.bullet.storm.ReplayBolt$ReplayState classifyReplay(long, boolean, org.apache.storm.tuple.Tuple, com.yahoo.bullet.storm.ReplayBolt$Replay)
    {
        com.yahoo.bullet.storm.ReplayBolt$Replay r0;
        com.yahoo.bullet.storm.ReplayBolt$ReplayState $r1, $r3, $r4, $r6, $r7, $r8;
        long l0, $l1, $l3;
        byte $b2, $b4;
        java.util.List $r2;
        boolean z0;
        int $i5, $i6;
        org.apache.storm.tuple.Tuple r5;
        com.yahoo.bullet.storm.ReplayBolt r9;

        r9 := @this: com.yahoo.bullet.storm.ReplayBolt;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        r5 := @parameter2: org.apache.storm.tuple.Tuple;

        r0 := @parameter3: com.yahoo.bullet.storm.ReplayBolt$Replay;

        if r0 == null goto label1;

        $l1 = staticinvoke <com.yahoo.bullet.storm.ReplayBolt$Replay: long access$000(com.yahoo.bullet.storm.ReplayBolt$Replay)>(r0);

        $b2 = l0 cmp $l1;

        if $b2 <= 0 goto label2;

     label1:
        $r1 = <com.yahoo.bullet.storm.ReplayBolt$ReplayState: com.yahoo.bullet.storm.ReplayBolt$ReplayState START_REPLAY>;

        return $r1;

     label2:
        $l3 = staticinvoke <com.yahoo.bullet.storm.ReplayBolt$Replay: long access$000(com.yahoo.bullet.storm.ReplayBolt$Replay)>(r0);

        $b4 = l0 cmp $l3;

        if $b4 >= 0 goto label3;

        $r8 = <com.yahoo.bullet.storm.ReplayBolt$ReplayState: com.yahoo.bullet.storm.ReplayBolt$ReplayState PAST_REPLAY>;

        return $r8;

     label3:
        $r2 = staticinvoke <com.yahoo.bullet.storm.ReplayBolt$Replay: java.util.List access$100(com.yahoo.bullet.storm.ReplayBolt$Replay)>(r0);

        if $r2 != null goto label4;

        $r7 = <com.yahoo.bullet.storm.ReplayBolt$ReplayState: com.yahoo.bullet.storm.ReplayBolt$ReplayState FINISHED_REPLAY>;

        return $r7;

     label4:
        if z0 == 0 goto label5;

        $i5 = staticinvoke <com.yahoo.bullet.storm.ReplayBolt$Replay: int access$200(com.yahoo.bullet.storm.ReplayBolt$Replay)>(r0);

        $i6 = interfaceinvoke r5.<org.apache.storm.tuple.Tuple: int getSourceTask()>();

        if $i5 != $i6 goto label5;

        $r6 = <com.yahoo.bullet.storm.ReplayBolt$ReplayState: com.yahoo.bullet.storm.ReplayBolt$ReplayState ACK>;

        return $r6;

     label5:
        if z0 != 0 goto label6;

        $r4 = <com.yahoo.bullet.storm.ReplayBolt$ReplayState: com.yahoo.bullet.storm.ReplayBolt$ReplayState NEW_REPLAY>;

        return $r4;

     label6:
        $r3 = <com.yahoo.bullet.storm.ReplayBolt$ReplayState: com.yahoo.bullet.storm.ReplayBolt$ReplayState OLD_REPLAY>;

        return $r3;
    }

    private void startReplay(java.lang.String, long, org.apache.storm.tuple.Tuple)
    {
        java.lang.String r0, $r3;
        org.slf4j.Logger $r1;
        java.lang.String[] $r2;
        java.lang.Integer $r4, $r6, r8;
        int i0, $i4, $i5;
        java.util.Map $r5, $r21;
        java.lang.Object $r7;
        com.yahoo.bullet.storm.ReplayBolt$Replay $r9, $r15, r19;
        long l1;
        com.yahoo.bullet.storm.ReplayBolt r10;
        boolean $z0, $z1;
        com.yahoo.bullet.storm.batching.BatchManager $r11, $r14, $r16, $r17;
        org.apache.storm.tuple.Tuple r13;
        java.util.List $r18, $r20;
        com.yahoo.bullet.storm.metric.BulletMetrics $r22, $r24;
        com.yahoo.bullet.storm.metric.MapCountMetric $r23, $r25;

        r10 := @this: com.yahoo.bullet.storm.ReplayBolt;

        r0 := @parameter0: java.lang.String;

        l1 := @parameter1: long;

        r13 := @parameter2: org.apache.storm.tuple.Tuple;

        $r1 = <com.yahoo.bullet.storm.ReplayBolt: org.slf4j.Logger log>;

        interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Starting replay to {}", r0);

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("-");

        $r3 = $r2[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r3);

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = <com.yahoo.bullet.storm.grouping.TaskIndexCaptureGrouping: java.util.Map TASK_INDEX_MAP>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        r8 = (java.lang.Integer) $r7;

        if r8 == null goto label3;

        $r15 = new com.yahoo.bullet.storm.ReplayBolt$Replay;

        $z1 = r10.<com.yahoo.bullet.storm.ReplayBolt: boolean replayBatchCompressEnable>;

        if $z1 == 0 goto label1;

        $r17 = r10.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.batching.BatchManager batchManager>;

        $i5 = virtualinvoke r8.<java.lang.Integer: int intValue()>();

        $r18 = virtualinvoke $r17.<com.yahoo.bullet.storm.batching.BatchManager: java.util.List getCompressedBatchesForPartition(int)>($i5);

        goto label2;

     label1:
        $r16 = r10.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.batching.BatchManager batchManager>;

        $i4 = virtualinvoke r8.<java.lang.Integer: int intValue()>();

        $r18 = virtualinvoke $r16.<com.yahoo.bullet.storm.batching.BatchManager: java.util.List getBatchesForPartition(int)>($i4);

     label2:
        specialinvoke $r15.<com.yahoo.bullet.storm.ReplayBolt$Replay: void <init>(int,long,java.util.List)>(i0, l1, $r18);

        r19 = $r15;

        goto label6;

     label3:
        $r9 = new com.yahoo.bullet.storm.ReplayBolt$Replay;

        $z0 = r10.<com.yahoo.bullet.storm.ReplayBolt: boolean replayBatchCompressEnable>;

        if $z0 == 0 goto label4;

        $r14 = r10.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.batching.BatchManager batchManager>;

        $r20 = virtualinvoke $r14.<com.yahoo.bullet.storm.batching.BatchManager: java.util.List getCompressedBatches()>();

        goto label5;

     label4:
        $r11 = r10.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.batching.BatchManager batchManager>;

        $r20 = virtualinvoke $r11.<com.yahoo.bullet.storm.batching.BatchManager: java.util.List getBatches()>();

     label5:
        specialinvoke $r9.<com.yahoo.bullet.storm.ReplayBolt$Replay: void <init>(int,long,java.util.List)>(i0, l1, $r20);

        r19 = $r9;

     label6:
        $r21 = r10.<com.yahoo.bullet.storm.ReplayBolt: java.util.Map replays>;

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r19);

        $r22 = r10.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.BulletMetrics metrics>;

        $r23 = r10.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.MapCountMetric activeReplaysCount>;

        virtualinvoke $r22.<com.yahoo.bullet.storm.metric.BulletMetrics: void setCount(com.yahoo.bullet.storm.metric.MapCountMetric,java.lang.String,long)>($r23, r0, 1L);

        $r24 = r10.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.BulletMetrics metrics>;

        $r25 = r10.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.MapCountMetric createdReplaysCount>;

        virtualinvoke $r24.<com.yahoo.bullet.storm.metric.BulletMetrics: void updateCount(com.yahoo.bullet.storm.metric.MapCountMetric,java.lang.String,long)>($r25, r0, 1L);

        specialinvoke r10.<com.yahoo.bullet.storm.ReplayBolt: void emitBatch(java.lang.String,org.apache.storm.tuple.Tuple,com.yahoo.bullet.storm.ReplayBolt$Replay)>(r0, r13, r19);

        return;
    }

    private void handleAck(java.lang.String, org.apache.storm.tuple.Tuple, com.yahoo.bullet.storm.ReplayBolt$Replay)
    {
        com.yahoo.bullet.storm.ReplayBolt$Replay r0;
        int $i0, $i1;
        java.util.List $r1;
        com.yahoo.bullet.storm.ReplayBolt r2;
        java.lang.String r3;
        org.apache.storm.tuple.Tuple r4;
        org.slf4j.Logger $r5;
        com.yahoo.bullet.storm.metric.MapCountMetric $r7;
        com.yahoo.bullet.storm.metric.BulletMetrics $r8;
        org.apache.storm.task.OutputCollector $r9;

        r2 := @this: com.yahoo.bullet.storm.ReplayBolt;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: org.apache.storm.tuple.Tuple;

        r0 := @parameter2: com.yahoo.bullet.storm.ReplayBolt$Replay;

        $i0 = staticinvoke <com.yahoo.bullet.storm.ReplayBolt$Replay: int access$300(com.yahoo.bullet.storm.ReplayBolt$Replay)>(r0);

        $r1 = staticinvoke <com.yahoo.bullet.storm.ReplayBolt$Replay: java.util.List access$100(com.yahoo.bullet.storm.ReplayBolt$Replay)>(r0);

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 < $i1 goto label1;

        $r5 = <com.yahoo.bullet.storm.ReplayBolt: org.slf4j.Logger log>;

        interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Ending replay to {}", r3);

        staticinvoke <com.yahoo.bullet.storm.ReplayBolt$Replay: java.util.List access$102(com.yahoo.bullet.storm.ReplayBolt$Replay,java.util.List)>(r0, null);

        staticinvoke <com.yahoo.bullet.storm.ReplayBolt$Replay: int access$202(com.yahoo.bullet.storm.ReplayBolt$Replay,int)>(r0, -1);

        $r8 = r2.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.BulletMetrics metrics>;

        $r7 = r2.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.MapCountMetric activeReplaysCount>;

        virtualinvoke $r8.<com.yahoo.bullet.storm.metric.BulletMetrics: void setCount(com.yahoo.bullet.storm.metric.MapCountMetric,java.lang.String,long)>($r7, r3, 0L);

        $r9 = r2.<com.yahoo.bullet.storm.ReplayBolt: org.apache.storm.task.OutputCollector collector>;

        virtualinvoke $r9.<org.apache.storm.task.OutputCollector: void fail(org.apache.storm.tuple.Tuple)>(r4);

        return;

     label1:
        staticinvoke <com.yahoo.bullet.storm.ReplayBolt$Replay: int access$308(com.yahoo.bullet.storm.ReplayBolt$Replay)>(r0);

        specialinvoke r2.<com.yahoo.bullet.storm.ReplayBolt: void emitBatch(java.lang.String,org.apache.storm.tuple.Tuple,com.yahoo.bullet.storm.ReplayBolt$Replay)>(r3, r4, r0);

        return;
    }

    private void emitBatch(java.lang.String, org.apache.storm.tuple.Tuple, com.yahoo.bullet.storm.ReplayBolt$Replay)
    {
        com.yahoo.bullet.storm.ReplayBolt$Replay r0;
        int i0, i1, $i2, $i4, $i6;
        java.util.List $r1, $r20, $r24, $r25;
        org.slf4j.Logger $r2, $r13;
        java.lang.Integer $r3, $r11, $r14, $r19;
        java.lang.String r4;
        com.yahoo.bullet.storm.ReplayBolt r5;
        org.apache.storm.task.OutputCollector $r6, $r12, $r15;
        org.apache.storm.tuple.Tuple r7;
        java.lang.Object[] $r9, $r17;
        long $l3, $l7;
        java.lang.Long $r10, $r18;
        java.lang.Object $r21;
        org.apache.storm.tuple.Values $r22, $r23;

        r5 := @this: com.yahoo.bullet.storm.ReplayBolt;

        r4 := @parameter0: java.lang.String;

        r7 := @parameter1: org.apache.storm.tuple.Tuple;

        r0 := @parameter2: com.yahoo.bullet.storm.ReplayBolt$Replay;

        i0 = staticinvoke <com.yahoo.bullet.storm.ReplayBolt$Replay: int access$300(com.yahoo.bullet.storm.ReplayBolt$Replay)>(r0);

        $r1 = staticinvoke <com.yahoo.bullet.storm.ReplayBolt$Replay: java.util.List access$100(com.yahoo.bullet.storm.ReplayBolt$Replay)>(r0);

        i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 >= i1 goto label1;

        $r13 = <com.yahoo.bullet.storm.ReplayBolt: org.slf4j.Logger log>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Emitting replay batch with index {} to {}", $r14, r4);

        $r15 = r5.<com.yahoo.bullet.storm.ReplayBolt: org.apache.storm.task.OutputCollector collector>;

        $i6 = staticinvoke <com.yahoo.bullet.storm.ReplayBolt$Replay: int access$400(com.yahoo.bullet.storm.ReplayBolt$Replay)>(r0);

        $r22 = new org.apache.storm.tuple.Values;

        $r17 = newarray (java.lang.Object)[4];

        $r17[0] = r4;

        $l7 = staticinvoke <com.yahoo.bullet.storm.ReplayBolt$Replay: long access$000(com.yahoo.bullet.storm.ReplayBolt$Replay)>(r0);

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7);

        $r17[1] = $r18;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r17[2] = $r19;

        $r20 = staticinvoke <com.yahoo.bullet.storm.ReplayBolt$Replay: java.util.List access$100(com.yahoo.bullet.storm.ReplayBolt$Replay)>(r0);

        $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object get(int)>(i0);

        $r17[3] = $r21;

        specialinvoke $r22.<org.apache.storm.tuple.Values: void <init>(java.lang.Object[])>($r17);

        $r24 = (java.util.List) $r22;

        virtualinvoke $r15.<org.apache.storm.task.OutputCollector: void emitDirect(int,java.lang.String,org.apache.storm.tuple.Tuple,java.util.List)>($i6, "replay", r7, $r24);

        goto label2;

     label1:
        $r2 = <com.yahoo.bullet.storm.ReplayBolt: org.slf4j.Logger log>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Emitting replay batch NULL (index {}) to {}", $r3, r4);

        $r6 = r5.<com.yahoo.bullet.storm.ReplayBolt: org.apache.storm.task.OutputCollector collector>;

        $i2 = staticinvoke <com.yahoo.bullet.storm.ReplayBolt$Replay: int access$400(com.yahoo.bullet.storm.ReplayBolt$Replay)>(r0);

        $r23 = new org.apache.storm.tuple.Values;

        $r9 = newarray (java.lang.Object)[4];

        $r9[0] = r4;

        $l3 = staticinvoke <com.yahoo.bullet.storm.ReplayBolt$Replay: long access$000(com.yahoo.bullet.storm.ReplayBolt$Replay)>(r0);

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r9[1] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9[2] = $r11;

        $r9[3] = null;

        specialinvoke $r23.<org.apache.storm.tuple.Values: void <init>(java.lang.Object[])>($r9);

        $r25 = (java.util.List) $r23;

        virtualinvoke $r6.<org.apache.storm.task.OutputCollector: void emitDirect(int,java.lang.String,org.apache.storm.tuple.Tuple,java.util.List)>($i2, "replay", r7, $r25);

     label2:
        $i4 = interfaceinvoke r7.<org.apache.storm.tuple.Tuple: int getSourceTask()>();

        staticinvoke <com.yahoo.bullet.storm.ReplayBolt$Replay: int access$202(com.yahoo.bullet.storm.ReplayBolt$Replay,int)>(r0, $i4);

        $r12 = r5.<com.yahoo.bullet.storm.ReplayBolt: org.apache.storm.task.OutputCollector collector>;

        virtualinvoke $r12.<org.apache.storm.task.OutputCollector: void ack(org.apache.storm.tuple.Tuple)>(r7);

        return;
    }

    com.yahoo.bullet.storm.metric.BulletMetrics getMetrics()
    {
        com.yahoo.bullet.storm.ReplayBolt r0;
        com.yahoo.bullet.storm.metric.BulletMetrics $r1;

        r0 := @this: com.yahoo.bullet.storm.ReplayBolt;

        $r1 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.BulletMetrics metrics>;

        return $r1;
    }

    com.yahoo.bullet.storm.metric.AbsoluteCountMetric getBatchedQueriesCount()
    {
        com.yahoo.bullet.storm.ReplayBolt r0;
        com.yahoo.bullet.storm.metric.AbsoluteCountMetric $r1;

        r0 := @this: com.yahoo.bullet.storm.ReplayBolt;

        $r1 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.AbsoluteCountMetric batchedQueriesCount>;

        return $r1;
    }

    com.yahoo.bullet.storm.metric.MapCountMetric getActiveReplaysCount()
    {
        com.yahoo.bullet.storm.ReplayBolt r0;
        com.yahoo.bullet.storm.metric.MapCountMetric $r1;

        r0 := @this: com.yahoo.bullet.storm.ReplayBolt;

        $r1 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.MapCountMetric activeReplaysCount>;

        return $r1;
    }

    com.yahoo.bullet.storm.metric.MapCountMetric getCreatedReplaysCount()
    {
        com.yahoo.bullet.storm.ReplayBolt r0;
        com.yahoo.bullet.storm.metric.MapCountMetric $r1;

        r0 := @this: com.yahoo.bullet.storm.ReplayBolt;

        $r1 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.metric.MapCountMetric createdReplaysCount>;

        return $r1;
    }

    org.apache.storm.task.OutputCollector getCollector()
    {
        com.yahoo.bullet.storm.ReplayBolt r0;
        org.apache.storm.task.OutputCollector $r1;

        r0 := @this: com.yahoo.bullet.storm.ReplayBolt;

        $r1 = r0.<com.yahoo.bullet.storm.ReplayBolt: org.apache.storm.task.OutputCollector collector>;

        return $r1;
    }

    com.yahoo.bullet.storm.TupleClassifier getClassifier()
    {
        com.yahoo.bullet.storm.ReplayBolt r0;
        com.yahoo.bullet.storm.TupleClassifier $r1;

        r0 := @this: com.yahoo.bullet.storm.ReplayBolt;

        $r1 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.TupleClassifier classifier>;

        return $r1;
    }

    com.yahoo.bullet.storage.StorageManager getStorageManager()
    {
        com.yahoo.bullet.storm.ReplayBolt r0;
        com.yahoo.bullet.storage.StorageManager $r1;

        r0 := @this: com.yahoo.bullet.storm.ReplayBolt;

        $r1 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storage.StorageManager storageManager>;

        return $r1;
    }

    com.yahoo.bullet.storm.batching.BatchManager getBatchManager()
    {
        com.yahoo.bullet.storm.ReplayBolt r0;
        com.yahoo.bullet.storm.batching.BatchManager $r1;

        r0 := @this: com.yahoo.bullet.storm.ReplayBolt;

        $r1 = r0.<com.yahoo.bullet.storm.ReplayBolt: com.yahoo.bullet.storm.batching.BatchManager batchManager>;

        return $r1;
    }

    java.util.Map getReplays()
    {
        com.yahoo.bullet.storm.ReplayBolt r0;
        java.util.Map $r1;

        r0 := @this: com.yahoo.bullet.storm.ReplayBolt;

        $r1 = r0.<com.yahoo.bullet.storm.ReplayBolt: java.util.Map replays>;

        return $r1;
    }

    boolean isReplayBatchCompressEnable()
    {
        com.yahoo.bullet.storm.ReplayBolt r0;
        boolean $z0;

        r0 := @this: com.yahoo.bullet.storm.ReplayBolt;

        $z0 = r0.<com.yahoo.bullet.storm.ReplayBolt: boolean replayBatchCompressEnable>;

        return $z0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <com.yahoo.bullet.storm.ReplayBolt: long serialVersionUID> = 7678526821834215930L;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/yahoo/bullet/storm/ReplayBolt;");

        <com.yahoo.bullet.storm.ReplayBolt: org.slf4j.Logger log> = $r0;

        return;
    }
}
