public class com.yahoo.bullet.storm.batching.BatchManager extends java.lang.Object
{
    private static final org.slf4j.Logger log;
    private final java.util.List partitions;
    private final int partitionCount;
    private final boolean batchCompressEnable;

    public void <init>(int, int, boolean)
    {
        com.yahoo.bullet.storm.batching.BatchManager r0;
        java.lang.Object[] $r1;
        int i0, i1, i2;
        org.slf4j.Logger $r2;
        java.lang.Integer $r3, $r4;
        boolean z0;
        java.lang.Boolean $r5;
        java.util.ArrayList $r6;
        com.yahoo.bullet.storm.batching.Partition $r7;
        java.util.List $r8;
        java.lang.RuntimeException $r9;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.String $r13;

        r0 := @this: com.yahoo.bullet.storm.batching.BatchManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <com.yahoo.bullet.storm.batching.BatchManager: org.slf4j.Logger log>;

        $r1 = newarray (java.lang.Object)[3];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[1] = $r4;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r1[2] = $r5;

        interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Creating BatchManager with batch size {}, partition count {}, and batch compression enabled {}.", $r1);

        if i1 >= 1 goto label1;

        $r9 = new java.lang.RuntimeException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Partition count must be greater than 0. The parameter given was ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label1:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(i1);

        r0.<com.yahoo.bullet.storm.batching.BatchManager: java.util.List partitions> = $r6;

        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        $r8 = r0.<com.yahoo.bullet.storm.batching.BatchManager: java.util.List partitions>;

        $r7 = new com.yahoo.bullet.storm.batching.Partition;

        specialinvoke $r7.<com.yahoo.bullet.storm.batching.Partition: void <init>(int,int,boolean)>(i2, i0, z0);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r7);

        i2 = i2 + 1;

        goto label2;

     label3:
        r0.<com.yahoo.bullet.storm.batching.BatchManager: int partitionCount> = i1;

        r0.<com.yahoo.bullet.storm.batching.BatchManager: boolean batchCompressEnable> = z0;

        return;
    }

    public java.util.List getBatches()
    {
        com.yahoo.bullet.storm.batching.BatchManager r0;
        java.util.List $r1, $r9;
        java.util.stream.Stream $r2, $r4, $r6;
        java.util.function.Function $r3, $r5;
        java.util.stream.Collector $r7;
        java.lang.Object $r8;

        r0 := @this: com.yahoo.bullet.storm.batching.BatchManager;

        $r1 = r0.<com.yahoo.bullet.storm.batching.BatchManager: java.util.List partitions>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.stream.Stream stream()>();

        $r3 = staticinvoke <com.yahoo.bullet.storm.batching.BatchManager$getImmutableBatches__112: java.util.function.Function bootstrap$()>();

        $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r3);

        $r5 = staticinvoke <com.yahoo.bullet.storm.batching.BatchManager$stream__116: java.util.function.Function bootstrap$()>();

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream flatMap(java.util.function.Function)>($r5);

        $r7 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r8 = interfaceinvoke $r6.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r7);

        $r9 = (java.util.List) $r8;

        return $r9;
    }

    public java.util.List getBatchesForPartition(int)
    {
        com.yahoo.bullet.storm.batching.BatchManager r0;
        int i0;
        java.util.List $r1, $r4;
        java.lang.Object $r2;
        com.yahoo.bullet.storm.batching.Partition $r3;

        r0 := @this: com.yahoo.bullet.storm.batching.BatchManager;

        i0 := @parameter0: int;

        $r1 = r0.<com.yahoo.bullet.storm.batching.BatchManager: java.util.List partitions>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (com.yahoo.bullet.storm.batching.Partition) $r2;

        $r4 = virtualinvoke $r3.<com.yahoo.bullet.storm.batching.Partition: java.util.List getImmutableBatches()>();

        return $r4;
    }

    public java.util.Map getPartitionedBatches()
    {
        com.yahoo.bullet.storm.batching.BatchManager r0;
        java.util.List $r1;
        java.util.stream.Stream $r2;
        java.util.function.Function $r3, $r4;
        java.util.stream.Collector $r5;
        java.lang.Object $r6;
        java.util.Map $r7;

        r0 := @this: com.yahoo.bullet.storm.batching.BatchManager;

        $r1 = r0.<com.yahoo.bullet.storm.batching.BatchManager: java.util.List partitions>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.stream.Stream stream()>();

        $r3 = staticinvoke <com.yahoo.bullet.storm.batching.BatchManager$getId__113: java.util.function.Function bootstrap$()>();

        $r4 = staticinvoke <com.yahoo.bullet.storm.batching.BatchManager$getImmutableBatches__122: java.util.function.Function bootstrap$()>();

        $r5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r3, $r4);

        $r6 = interfaceinvoke $r2.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r5);

        $r7 = (java.util.Map) $r6;

        return $r7;
    }

    public java.util.List getCompressedBatches()
    {
        com.yahoo.bullet.storm.batching.BatchManager r0;
        boolean $z0;
        java.util.List $r1, $r3, $r11;
        java.util.function.Consumer $r2;
        java.util.stream.Stream $r4, $r6, $r8;
        java.util.function.Function $r5, $r7;
        java.util.stream.Collector $r9;
        java.lang.Object $r10;
        java.lang.RuntimeException $r12;

        r0 := @this: com.yahoo.bullet.storm.batching.BatchManager;

        $z0 = r0.<com.yahoo.bullet.storm.batching.BatchManager: boolean batchCompressEnable>;

        if $z0 != 0 goto label1;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>("Throwing runtime exception since batch compression is not enabled.");

        throw $r12;

     label1:
        $r1 = r0.<com.yahoo.bullet.storm.batching.BatchManager: java.util.List partitions>;

        $r2 = staticinvoke <com.yahoo.bullet.storm.batching.BatchManager$compress__115: java.util.function.Consumer bootstrap$()>();

        interfaceinvoke $r1.<java.util.List: void forEach(java.util.function.Consumer)>($r2);

        $r3 = r0.<com.yahoo.bullet.storm.batching.BatchManager: java.util.List partitions>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.stream.Stream stream()>();

        $r5 = staticinvoke <com.yahoo.bullet.storm.batching.BatchManager$getImmutableData__120: java.util.function.Function bootstrap$()>();

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r5);

        $r7 = staticinvoke <com.yahoo.bullet.storm.batching.BatchManager$stream__124: java.util.function.Function bootstrap$()>();

        $r8 = interfaceinvoke $r6.<java.util.stream.Stream: java.util.stream.Stream flatMap(java.util.function.Function)>($r7);

        $r9 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r10 = interfaceinvoke $r8.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r9);

        $r11 = (java.util.List) $r10;

        return $r11;
    }

    public java.util.List getCompressedBatchesForPartition(int)
    {
        com.yahoo.bullet.storm.batching.BatchManager r0;
        boolean $z0;
        int i0;
        java.util.List $r1, $r4, $r7;
        java.lang.Object $r2, $r5;
        com.yahoo.bullet.storm.batching.Partition $r3, $r6;
        java.lang.RuntimeException $r8;

        r0 := @this: com.yahoo.bullet.storm.batching.BatchManager;

        i0 := @parameter0: int;

        $z0 = r0.<com.yahoo.bullet.storm.batching.BatchManager: boolean batchCompressEnable>;

        if $z0 != 0 goto label1;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("Throwing runtime exception since batch compression is not enabled.");

        throw $r8;

     label1:
        $r1 = r0.<com.yahoo.bullet.storm.batching.BatchManager: java.util.List partitions>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (com.yahoo.bullet.storm.batching.Partition) $r2;

        virtualinvoke $r3.<com.yahoo.bullet.storm.batching.Partition: void compress()>();

        $r4 = r0.<com.yahoo.bullet.storm.batching.BatchManager: java.util.List partitions>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i0);

        $r6 = (com.yahoo.bullet.storm.batching.Partition) $r5;

        $r7 = virtualinvoke $r6.<com.yahoo.bullet.storm.batching.Partition: java.util.List getImmutableData()>();

        return $r7;
    }

    public java.util.Map getPartitionedCompressedBatches()
    {
        com.yahoo.bullet.storm.batching.BatchManager r0;
        boolean $z0;
        java.util.List $r1, $r3;
        java.util.function.Consumer $r2;
        java.util.stream.Stream $r4;
        java.util.function.Function $r5, $r6;
        java.util.stream.Collector $r7;
        java.lang.Object $r8;
        java.util.Map $r9;
        java.lang.RuntimeException $r10;

        r0 := @this: com.yahoo.bullet.storm.batching.BatchManager;

        $z0 = r0.<com.yahoo.bullet.storm.batching.BatchManager: boolean batchCompressEnable>;

        if $z0 != 0 goto label1;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("Throwing runtime exception since batch compression is not enabled.");

        throw $r10;

     label1:
        $r1 = r0.<com.yahoo.bullet.storm.batching.BatchManager: java.util.List partitions>;

        $r2 = staticinvoke <com.yahoo.bullet.storm.batching.BatchManager$compress__117: java.util.function.Consumer bootstrap$()>();

        interfaceinvoke $r1.<java.util.List: void forEach(java.util.function.Consumer)>($r2);

        $r3 = r0.<com.yahoo.bullet.storm.batching.BatchManager: java.util.List partitions>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.stream.Stream stream()>();

        $r5 = staticinvoke <com.yahoo.bullet.storm.batching.BatchManager$getId__123: java.util.function.Function bootstrap$()>();

        $r6 = staticinvoke <com.yahoo.bullet.storm.batching.BatchManager$getImmutableData__128: java.util.function.Function bootstrap$()>();

        $r7 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r5, $r6);

        $r8 = interfaceinvoke $r4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r7);

        $r9 = (java.util.Map) $r8;

        return $r9;
    }

    public void addAll(java.util.Map)
    {
        java.util.Map r0;
        com.yahoo.bullet.storm.batching.BatchManager r1;
        java.util.function.BiConsumer $r2;
        java.util.List $r3;
        java.util.function.Consumer $r4;

        r1 := @this: com.yahoo.bullet.storm.batching.BatchManager;

        r0 := @parameter0: java.util.Map;

        $r2 = staticinvoke <com.yahoo.bullet.storm.batching.BatchManager$lambda_addAll_0__118: java.util.function.BiConsumer bootstrap$(com.yahoo.bullet.storm.batching.BatchManager)>(r1);

        interfaceinvoke r0.<java.util.Map: void forEach(java.util.function.BiConsumer)>($r2);

        $r3 = r1.<com.yahoo.bullet.storm.batching.BatchManager: java.util.List partitions>;

        $r4 = staticinvoke <com.yahoo.bullet.storm.batching.BatchManager$resize__126: java.util.function.Consumer bootstrap$()>();

        interfaceinvoke $r3.<java.util.List: void forEach(java.util.function.Consumer)>($r4);

        return;
    }

    public void removeAll(java.util.Set)
    {
        java.util.Set r0;
        com.yahoo.bullet.storm.batching.BatchManager r1;
        java.util.function.Consumer $r2, $r4;
        java.util.List $r3;

        r1 := @this: com.yahoo.bullet.storm.batching.BatchManager;

        r0 := @parameter0: java.util.Set;

        $r2 = staticinvoke <com.yahoo.bullet.storm.batching.BatchManager$lambda_removeAll_1__119: java.util.function.Consumer bootstrap$(com.yahoo.bullet.storm.batching.BatchManager)>(r1);

        interfaceinvoke r0.<java.util.Set: void forEach(java.util.function.Consumer)>($r2);

        $r3 = r1.<com.yahoo.bullet.storm.batching.BatchManager: java.util.List partitions>;

        $r4 = staticinvoke <com.yahoo.bullet.storm.batching.BatchManager$resize__129: java.util.function.Consumer bootstrap$()>();

        interfaceinvoke $r3.<java.util.List: void forEach(java.util.function.Consumer)>($r4);

        return;
    }

    public void add(java.lang.String, java.lang.Object)
    {
        com.yahoo.bullet.storm.batching.BatchManager r0;
        java.lang.String r1;
        com.yahoo.bullet.storm.batching.Partition r2;
        java.lang.Object r3;

        r0 := @this: com.yahoo.bullet.storm.batching.BatchManager;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        r2 = specialinvoke r0.<com.yahoo.bullet.storm.batching.BatchManager: com.yahoo.bullet.storm.batching.Partition partition(java.lang.String)>(r1);

        virtualinvoke r2.<com.yahoo.bullet.storm.batching.Partition: void add(java.lang.String,java.lang.Object)>(r1, r3);

        virtualinvoke r2.<com.yahoo.bullet.storm.batching.Partition: void resize()>();

        return;
    }

    public void remove(java.lang.String)
    {
        com.yahoo.bullet.storm.batching.BatchManager r0;
        java.lang.String r1;
        com.yahoo.bullet.storm.batching.Partition r2;

        r0 := @this: com.yahoo.bullet.storm.batching.BatchManager;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<com.yahoo.bullet.storm.batching.BatchManager: com.yahoo.bullet.storm.batching.Partition partition(java.lang.String)>(r1);

        virtualinvoke r2.<com.yahoo.bullet.storm.batching.Partition: void remove(java.lang.String)>(r1);

        virtualinvoke r2.<com.yahoo.bullet.storm.batching.Partition: void resize()>();

        return;
    }

    public boolean contains(java.lang.String)
    {
        com.yahoo.bullet.storm.batching.BatchManager r0;
        java.lang.String r1;
        com.yahoo.bullet.storm.batching.Partition $r2;
        java.util.Map $r3;
        boolean $z0;

        r0 := @this: com.yahoo.bullet.storm.batching.BatchManager;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.yahoo.bullet.storm.batching.BatchManager: com.yahoo.bullet.storm.batching.Partition partition(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<com.yahoo.bullet.storm.batching.Partition: java.util.Map getKeyMapping()>();

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public int size()
    {
        com.yahoo.bullet.storm.batching.BatchManager r0;
        java.util.List $r1;
        java.util.stream.Stream $r2, $r4;
        java.util.function.Function $r3;
        java.util.function.ToIntFunction $r5;
        java.util.stream.IntStream $r6;
        int $i0;

        r0 := @this: com.yahoo.bullet.storm.batching.BatchManager;

        $r1 = r0.<com.yahoo.bullet.storm.batching.BatchManager: java.util.List partitions>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.stream.Stream stream()>();

        $r3 = staticinvoke <com.yahoo.bullet.storm.batching.BatchManager$getKeyMapping__125: java.util.function.Function bootstrap$()>();

        $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r3);

        $r5 = staticinvoke <com.yahoo.bullet.storm.batching.BatchManager$size__132: java.util.function.ToIntFunction bootstrap$()>();

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.IntStream mapToInt(java.util.function.ToIntFunction)>($r5);

        $i0 = interfaceinvoke $r6.<java.util.stream.IntStream: int sum()>();

        return $i0;
    }

    public void clear()
    {
        com.yahoo.bullet.storm.batching.BatchManager r0;
        java.util.List $r1;
        java.util.function.Consumer $r2;

        r0 := @this: com.yahoo.bullet.storm.batching.BatchManager;

        $r1 = r0.<com.yahoo.bullet.storm.batching.BatchManager: java.util.List partitions>;

        $r2 = staticinvoke <com.yahoo.bullet.storm.batching.BatchManager$clear__131: java.util.function.Consumer bootstrap$()>();

        interfaceinvoke $r1.<java.util.List: void forEach(java.util.function.Consumer)>($r2);

        return;
    }

    private com.yahoo.bullet.storm.batching.Partition partition(java.lang.String)
    {
        com.yahoo.bullet.storm.batching.BatchManager r0;
        java.lang.String r1;
        int $i0, $i1;
        java.util.List $r2;
        java.lang.Object $r3;
        com.yahoo.bullet.storm.batching.Partition $r4;

        r0 := @this: com.yahoo.bullet.storm.batching.BatchManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.yahoo.bullet.storm.batching.BatchManager: java.util.List partitions>;

        $i0 = r0.<com.yahoo.bullet.storm.batching.BatchManager: int partitionCount>;

        $i1 = staticinvoke <com.yahoo.bullet.storm.StormUtils: int getHashIndex(java.lang.Object,int)>(r1, $i0);

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (com.yahoo.bullet.storm.batching.Partition) $r3;

        return $r4;
    }

    public static byte[] compress(java.lang.Object)
    {
        java.io.ByteArrayOutputStream $r0;
        java.util.zip.GZIPOutputStream $r1;
        java.io.ObjectOutputStream $r2;
        java.lang.Object r3;
        java.io.IOException $r4;
        java.lang.StringBuilder $r5, $r7, $r8;
        org.slf4j.Logger $r6;
        java.lang.String $r9;
        java.lang.Throwable $r10, $r13, $r14, $r15, $r18, $r19, $r20, $r23, $r24, r29, r31, r33;
        byte[] r34;

        r3 := @parameter0: java.lang.Object;

     label01:
        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        r29 = null;

     label02:
        $r1 = new java.util.zip.GZIPOutputStream;

        specialinvoke $r1.<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>($r0);

        r31 = null;

     label03:
        $r2 = new java.io.ObjectOutputStream;

        specialinvoke $r2.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r1);

        r33 = null;

     label04:
        virtualinvoke $r2.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r3);

        virtualinvoke $r1.<java.util.zip.GZIPOutputStream: void finish()>();

        r34 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label05:
        if $r2 == null goto label07;

        goto label06;

     label06:
        virtualinvoke $r2.<java.io.ObjectOutputStream: void close()>();

     label07:
        if $r1 == null goto label09;

        goto label08;

     label08:
        virtualinvoke $r1.<java.util.zip.GZIPOutputStream: void close()>();

     label09:
        if $r0 == null goto label11;

        goto label10;

     label10:
        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void close()>();

     label11:
        return r34;

     label12:
        $r24 := @caughtexception;

        r33 = $r24;

        throw $r24;

     label13:
        $r23 := @caughtexception;

     label14:
        if $r2 == null goto label19;

        if r33 == null goto label18;

     label15:
        virtualinvoke $r2.<java.io.ObjectOutputStream: void close()>();

     label16:
        goto label19;

     label17:
        $r20 := @caughtexception;

        virtualinvoke r33.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r20);

        goto label19;

     label18:
        virtualinvoke $r2.<java.io.ObjectOutputStream: void close()>();

     label19:
        throw $r23;

     label20:
        $r19 := @caughtexception;

        r31 = $r19;

        throw $r19;

     label21:
        $r18 := @caughtexception;

     label22:
        if $r1 == null goto label27;

        if r31 == null goto label26;

     label23:
        virtualinvoke $r1.<java.util.zip.GZIPOutputStream: void close()>();

     label24:
        goto label27;

     label25:
        $r15 := @caughtexception;

        virtualinvoke r31.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r15);

        goto label27;

     label26:
        virtualinvoke $r1.<java.util.zip.GZIPOutputStream: void close()>();

     label27:
        throw $r18;

     label28:
        $r14 := @caughtexception;

        r29 = $r14;

        throw $r14;

     label29:
        $r13 := @caughtexception;

     label30:
        if $r0 == null goto label35;

        if r29 == null goto label34;

     label31:
        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void close()>();

     label32:
        goto label35;

     label33:
        $r10 := @caughtexception;

        virtualinvoke r29.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

        goto label35;

     label34:
        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void close()>();

     label35:
        throw $r13;

     label36:
        $r4 := @caughtexception;

        $r6 = <com.yahoo.bullet.storm.batching.BatchManager: org.slf4j.Logger log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error compressing object: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void error(java.lang.String)>($r9);

        return null;

        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label12 to label14 with label13;
        catch java.lang.Throwable from label03 to label07 with label20;
        catch java.lang.Throwable from label12 to label20 with label20;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label12 to label22 with label21;
        catch java.lang.Throwable from label02 to label09 with label28;
        catch java.lang.Throwable from label12 to label28 with label28;
        catch java.lang.Throwable from label31 to label32 with label33;
        catch java.lang.Throwable from label12 to label30 with label29;
        catch java.io.IOException from label01 to label11 with label36;
        catch java.io.IOException from label12 to label36 with label36;
    }

    public static java.lang.Object decompress(byte[])
    {
        java.io.ByteArrayInputStream $r0;
        byte[] r1;
        java.util.zip.GZIPInputStream $r2;
        java.io.ObjectInputStream $r3;
        java.lang.Exception $r4;
        java.lang.StringBuilder $r5, $r7, $r8;
        org.slf4j.Logger $r6;
        java.lang.String $r9;
        java.lang.Throwable $r10, $r13, $r14, $r15, $r18, $r19, $r20, $r23, $r24, r29, r31, r33;
        java.lang.Object r34;

        r1 := @parameter0: byte[];

     label01:
        $r0 = new java.io.ByteArrayInputStream;

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        r29 = null;

     label02:
        $r2 = new java.util.zip.GZIPInputStream;

        specialinvoke $r2.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>($r0);

        r31 = null;

     label03:
        $r3 = new java.io.ObjectInputStream;

        specialinvoke $r3.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r2);

        r33 = null;

     label04:
        r34 = virtualinvoke $r3.<java.io.ObjectInputStream: java.lang.Object readObject()>();

     label05:
        if $r3 == null goto label07;

        goto label06;

     label06:
        virtualinvoke $r3.<java.io.ObjectInputStream: void close()>();

     label07:
        if $r2 == null goto label09;

        goto label08;

     label08:
        virtualinvoke $r2.<java.util.zip.GZIPInputStream: void close()>();

     label09:
        if $r0 == null goto label11;

        goto label10;

     label10:
        virtualinvoke $r0.<java.io.ByteArrayInputStream: void close()>();

     label11:
        return r34;

     label12:
        $r24 := @caughtexception;

        r33 = $r24;

        throw $r24;

     label13:
        $r23 := @caughtexception;

     label14:
        if $r3 == null goto label19;

        if r33 == null goto label18;

     label15:
        virtualinvoke $r3.<java.io.ObjectInputStream: void close()>();

     label16:
        goto label19;

     label17:
        $r20 := @caughtexception;

        virtualinvoke r33.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r20);

        goto label19;

     label18:
        virtualinvoke $r3.<java.io.ObjectInputStream: void close()>();

     label19:
        throw $r23;

     label20:
        $r19 := @caughtexception;

        r31 = $r19;

        throw $r19;

     label21:
        $r18 := @caughtexception;

     label22:
        if $r2 == null goto label27;

        if r31 == null goto label26;

     label23:
        virtualinvoke $r2.<java.util.zip.GZIPInputStream: void close()>();

     label24:
        goto label27;

     label25:
        $r15 := @caughtexception;

        virtualinvoke r31.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r15);

        goto label27;

     label26:
        virtualinvoke $r2.<java.util.zip.GZIPInputStream: void close()>();

     label27:
        throw $r18;

     label28:
        $r14 := @caughtexception;

        r29 = $r14;

        throw $r14;

     label29:
        $r13 := @caughtexception;

     label30:
        if $r0 == null goto label35;

        if r29 == null goto label34;

     label31:
        virtualinvoke $r0.<java.io.ByteArrayInputStream: void close()>();

     label32:
        goto label35;

     label33:
        $r10 := @caughtexception;

        virtualinvoke r29.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

        goto label35;

     label34:
        virtualinvoke $r0.<java.io.ByteArrayInputStream: void close()>();

     label35:
        throw $r13;

     label36:
        $r4 := @caughtexception;

        $r6 = <com.yahoo.bullet.storm.batching.BatchManager: org.slf4j.Logger log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error decompressing data: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void error(java.lang.String)>($r9);

        return null;

        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label12 to label14 with label13;
        catch java.lang.Throwable from label03 to label07 with label20;
        catch java.lang.Throwable from label12 to label20 with label20;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label12 to label22 with label21;
        catch java.lang.Throwable from label02 to label09 with label28;
        catch java.lang.Throwable from label12 to label28 with label28;
        catch java.lang.Throwable from label31 to label32 with label33;
        catch java.lang.Throwable from label12 to label30 with label29;
        catch java.io.IOException from label01 to label11 with label36;
        catch java.lang.ClassNotFoundException from label01 to label11 with label36;
        catch java.io.IOException from label12 to label36 with label36;
        catch java.lang.ClassNotFoundException from label12 to label36 with label36;
    }

    java.util.List getPartitions()
    {
        com.yahoo.bullet.storm.batching.BatchManager r0;
        java.util.List $r1;

        r0 := @this: com.yahoo.bullet.storm.batching.BatchManager;

        $r1 = r0.<com.yahoo.bullet.storm.batching.BatchManager: java.util.List partitions>;

        return $r1;
    }

    public void lambda$removeAll$1(java.lang.String)
    {
        com.yahoo.bullet.storm.batching.BatchManager r0;
        java.lang.String r1;
        com.yahoo.bullet.storm.batching.Partition $r2;

        r0 := @this: com.yahoo.bullet.storm.batching.BatchManager;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.yahoo.bullet.storm.batching.BatchManager: com.yahoo.bullet.storm.batching.Partition partition(java.lang.String)>(r1);

        virtualinvoke $r2.<com.yahoo.bullet.storm.batching.Partition: void remove(java.lang.String)>(r1);

        return;
    }

    public void lambda$addAll$0(java.lang.String, java.lang.Object)
    {
        com.yahoo.bullet.storm.batching.BatchManager r0;
        java.lang.String r1;
        com.yahoo.bullet.storm.batching.Partition $r2;
        java.lang.Object r3;

        r0 := @this: com.yahoo.bullet.storm.batching.BatchManager;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        $r2 = specialinvoke r0.<com.yahoo.bullet.storm.batching.BatchManager: com.yahoo.bullet.storm.batching.Partition partition(java.lang.String)>(r1);

        virtualinvoke $r2.<com.yahoo.bullet.storm.batching.Partition: void add(java.lang.String,java.lang.Object)>(r1, r3);

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/yahoo/bullet/storm/batching/BatchManager;");

        <com.yahoo.bullet.storm.batching.BatchManager: org.slf4j.Logger log> = $r0;

        return;
    }
}
