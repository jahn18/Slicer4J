public class com.yahoo.bullet.storm.DSLSpoutTest extends java.lang.Object
{
    private com.yahoo.bullet.storm.DSLSpout dslSpout;
    private com.yahoo.bullet.storm.BulletStormConfig config;
    private com.yahoo.bullet.storm.testing.CustomEmitter emitter;

    public void <init>()
    {
        com.yahoo.bullet.storm.DSLSpoutTest r0;

        r0 := @this: com.yahoo.bullet.storm.DSLSpoutTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setup()
    {
        com.yahoo.bullet.storm.DSLSpoutTest r0;
        com.yahoo.bullet.storm.testing.CustomEmitter $r1, $r5;
        com.yahoo.bullet.storm.BulletStormConfig $r2, $r4;
        com.yahoo.bullet.storm.DSLSpout $r3, $r7, $r8;
        org.apache.storm.topology.IRichSpout $r6;

        r0 := @this: com.yahoo.bullet.storm.DSLSpoutTest;

        $r1 = new com.yahoo.bullet.storm.testing.CustomEmitter;

        specialinvoke $r1.<com.yahoo.bullet.storm.testing.CustomEmitter: void <init>()>();

        r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter> = $r1;

        $r2 = new com.yahoo.bullet.storm.BulletStormConfig;

        specialinvoke $r2.<com.yahoo.bullet.storm.BulletStormConfig: void <init>(java.lang.String)>("test_dsl_config.yaml");

        r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.BulletStormConfig config> = $r2;

        $r3 = new com.yahoo.bullet.storm.DSLSpout;

        $r4 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        specialinvoke $r3.<com.yahoo.bullet.storm.DSLSpout: void <init>(com.yahoo.bullet.storm.BulletStormConfig)>($r4);

        $r5 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r6 = staticinvoke <com.yahoo.bullet.storm.testing.ComponentUtils: org.apache.storm.topology.IRichSpout open(org.apache.storm.topology.IRichSpout,com.yahoo.bullet.storm.testing.CustomEmitter)>($r3, $r5);

        $r7 = (com.yahoo.bullet.storm.DSLSpout) $r6;

        r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.DSLSpout dslSpout> = $r7;

        $r8 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.DSLSpout dslSpout>;

        virtualinvoke $r8.<com.yahoo.bullet.storm.DSLSpout: void activate()>();

        return;
    }

    public void testNextTuple()
    {
        com.yahoo.bullet.storm.DSLSpoutTest r0;
        com.yahoo.bullet.storm.DSLSpout $r1, $r13;
        com.yahoo.bullet.storm.testing.CustomEmitter $r2, $r4, $r14;
        java.util.List $r3, $r5, $r8, $r15;
        int $i0, $i2;
        long $l1, $l3;
        java.lang.Object $r6, $r9;
        com.yahoo.bullet.storm.testing.CustomEmitter$Triplet $r7;
        com.yahoo.bullet.record.BulletRecord r10;
        com.yahoo.bullet.typesystem.TypedObject $r11;
        java.io.Serializable $r12;

        r0 := @this: com.yahoo.bullet.storm.DSLSpoutTest;

        $r1 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.DSLSpout dslSpout>;

        virtualinvoke $r1.<com.yahoo.bullet.storm.DSLSpout: void nextTuple()>();

        $r2 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r3 = virtualinvoke $r2.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 1L);

        $r4 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r5 = virtualinvoke $r4.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (com.yahoo.bullet.storm.testing.CustomEmitter$Triplet) $r6;

        $r8 = virtualinvoke $r7.<com.yahoo.bullet.storm.testing.CustomEmitter$Triplet: java.util.List getTuple()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(0);

        r10 = (com.yahoo.bullet.record.BulletRecord) $r9;

        $r11 = virtualinvoke r10.<com.yahoo.bullet.record.BulletRecord: com.yahoo.bullet.typesystem.TypedObject typedGet(java.lang.String)>("foo");

        $r12 = virtualinvoke $r11.<com.yahoo.bullet.typesystem.TypedObject: java.io.Serializable getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, "bar");

        $r13 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.DSLSpout dslSpout>;

        virtualinvoke $r13.<com.yahoo.bullet.storm.DSLSpout: void nextTuple()>();

        $r14 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r15 = virtualinvoke $r14.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i2 = interfaceinvoke $r15.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 1L);

        return;
    }

    public void testNextTupleWithDeserialize()
    {
        com.yahoo.bullet.storm.DSLSpoutTest r0;
        com.yahoo.bullet.storm.BulletStormConfig $r1, $r4;
        java.lang.Boolean $r2;
        com.yahoo.bullet.storm.DSLSpout $r3, $r7, $r8, $r9;
        com.yahoo.bullet.storm.testing.CustomEmitter $r5, $r10, $r12;
        org.apache.storm.topology.IRichSpout $r6;
        java.util.List $r11, $r13, $r16;
        int $i0;
        long $l1;
        java.lang.Object $r14, $r17;
        com.yahoo.bullet.storm.testing.CustomEmitter$Triplet $r15;
        com.yahoo.bullet.record.BulletRecord r18;
        com.yahoo.bullet.typesystem.TypedObject $r19, $r21;
        java.io.Serializable $r20, $r22;

        r0 := @this: com.yahoo.bullet.storm.DSLSpoutTest;

        $r1 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r1.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.dsl.deserializer.enable", $r2);

        $r3 = new com.yahoo.bullet.storm.DSLSpout;

        $r4 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        specialinvoke $r3.<com.yahoo.bullet.storm.DSLSpout: void <init>(com.yahoo.bullet.storm.BulletStormConfig)>($r4);

        $r5 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r6 = staticinvoke <com.yahoo.bullet.storm.testing.ComponentUtils: org.apache.storm.topology.IRichSpout open(org.apache.storm.topology.IRichSpout,com.yahoo.bullet.storm.testing.CustomEmitter)>($r3, $r5);

        $r7 = (com.yahoo.bullet.storm.DSLSpout) $r6;

        r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.DSLSpout dslSpout> = $r7;

        $r8 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.DSLSpout dslSpout>;

        virtualinvoke $r8.<com.yahoo.bullet.storm.DSLSpout: void activate()>();

        $r9 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.DSLSpout dslSpout>;

        virtualinvoke $r9.<com.yahoo.bullet.storm.DSLSpout: void nextTuple()>();

        $r10 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r11 = virtualinvoke $r10.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i0 = interfaceinvoke $r11.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 1L);

        $r12 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r13 = virtualinvoke $r12.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(0);

        $r15 = (com.yahoo.bullet.storm.testing.CustomEmitter$Triplet) $r14;

        $r16 = virtualinvoke $r15.<com.yahoo.bullet.storm.testing.CustomEmitter$Triplet: java.util.List getTuple()>();

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(0);

        r18 = (com.yahoo.bullet.record.BulletRecord) $r17;

        $r19 = virtualinvoke r18.<com.yahoo.bullet.record.BulletRecord: com.yahoo.bullet.typesystem.TypedObject typedGet(java.lang.String)>("foo");

        $r20 = virtualinvoke $r19.<com.yahoo.bullet.typesystem.TypedObject: java.io.Serializable getValue()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r20);

        $r21 = virtualinvoke r18.<com.yahoo.bullet.record.BulletRecord: com.yahoo.bullet.typesystem.TypedObject typedGet(java.lang.String)>("bar");

        $r22 = virtualinvoke $r21.<com.yahoo.bullet.typesystem.TypedObject: java.io.Serializable getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r22, "bar");

        return;
    }

    public void testNextTupleWithDSLBolt()
    {
        com.yahoo.bullet.storm.DSLSpoutTest r0;
        com.yahoo.bullet.storm.BulletStormConfig $r1, $r4;
        java.lang.Boolean $r2;
        com.yahoo.bullet.storm.DSLSpout $r3, $r7, $r8, $r9;
        com.yahoo.bullet.storm.testing.CustomEmitter $r5, $r10, $r12;
        org.apache.storm.topology.IRichSpout $r6;
        java.util.List $r11, $r13, $r16, r18;
        int $i0, $i2;
        long $l1, $l3;
        java.lang.Object $r14, $r17;
        com.yahoo.bullet.storm.testing.CustomEmitter$Triplet $r15;

        r0 := @this: com.yahoo.bullet.storm.DSLSpoutTest;

        $r1 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r1.<com.yahoo.bullet.storm.BulletStormConfig: void set(java.lang.String,java.lang.Object)>("bullet.topology.dsl.bolt.enable", $r2);

        $r3 = new com.yahoo.bullet.storm.DSLSpout;

        $r4 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.BulletStormConfig config>;

        specialinvoke $r3.<com.yahoo.bullet.storm.DSLSpout: void <init>(com.yahoo.bullet.storm.BulletStormConfig)>($r4);

        $r5 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r6 = staticinvoke <com.yahoo.bullet.storm.testing.ComponentUtils: org.apache.storm.topology.IRichSpout open(org.apache.storm.topology.IRichSpout,com.yahoo.bullet.storm.testing.CustomEmitter)>($r3, $r5);

        $r7 = (com.yahoo.bullet.storm.DSLSpout) $r6;

        r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.DSLSpout dslSpout> = $r7;

        $r8 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.DSLSpout dslSpout>;

        virtualinvoke $r8.<com.yahoo.bullet.storm.DSLSpout: void activate()>();

        $r9 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.DSLSpout dslSpout>;

        virtualinvoke $r9.<com.yahoo.bullet.storm.DSLSpout: void nextTuple()>();

        $r10 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r11 = virtualinvoke $r10.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $i0 = interfaceinvoke $r11.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 1L);

        $r12 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.testing.CustomEmitter emitter>;

        $r13 = virtualinvoke $r12.<com.yahoo.bullet.storm.testing.CustomEmitter: java.util.List getEmitted()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(0);

        $r15 = (com.yahoo.bullet.storm.testing.CustomEmitter$Triplet) $r14;

        $r16 = virtualinvoke $r15.<com.yahoo.bullet.storm.testing.CustomEmitter$Triplet: java.util.List getTuple()>();

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(0);

        r18 = (java.util.List) $r17;

        $i2 = interfaceinvoke r18.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 2L);

        return;
    }

    public void testDeclareOutputFields()
    {
        com.yahoo.bullet.storm.testing.CustomOutputFieldsDeclarer $r0;
        com.yahoo.bullet.storm.DSLSpoutTest r2;
        com.yahoo.bullet.storm.DSLSpout $r3;
        org.apache.storm.tuple.Fields $r4;
        java.lang.String[] $r5;
        boolean $z0;

        r2 := @this: com.yahoo.bullet.storm.DSLSpoutTest;

        $r0 = new com.yahoo.bullet.storm.testing.CustomOutputFieldsDeclarer;

        specialinvoke $r0.<com.yahoo.bullet.storm.testing.CustomOutputFieldsDeclarer: void <init>()>();

        $r3 = r2.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.DSLSpout dslSpout>;

        virtualinvoke $r3.<com.yahoo.bullet.storm.DSLSpout: void declareOutputFields(org.apache.storm.topology.OutputFieldsDeclarer)>($r0);

        $r4 = new org.apache.storm.tuple.Fields;

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = "record";

        $r5[1] = "timestamp";

        specialinvoke $r4.<org.apache.storm.tuple.Fields: void <init>(java.lang.String[])>($r5);

        $z0 = virtualinvoke $r0.<com.yahoo.bullet.storm.testing.CustomOutputFieldsDeclarer: boolean areFieldsPresent(org.apache.storm.tuple.Fields)>($r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testOpen()
    {
        com.yahoo.bullet.storm.DSLSpoutTest r0;
        com.yahoo.bullet.storm.DSLSpout $r1;

        r0 := @this: com.yahoo.bullet.storm.DSLSpoutTest;

        $r1 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.DSLSpout dslSpout>;

        virtualinvoke $r1.<com.yahoo.bullet.storm.DSLSpout: void open(java.util.Map,org.apache.storm.task.TopologyContext,org.apache.storm.spout.SpoutOutputCollector)>(null, null, null);

        return;
    }

    public void testDeactivate()
    {
        com.yahoo.bullet.storm.DSLSpoutTest r0;
        com.yahoo.bullet.storm.DSLSpout $r1;

        r0 := @this: com.yahoo.bullet.storm.DSLSpoutTest;

        $r1 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.DSLSpout dslSpout>;

        virtualinvoke $r1.<com.yahoo.bullet.storm.DSLSpout: void deactivate()>();

        return;
    }

    public void testClose()
    {
        com.yahoo.bullet.storm.DSLSpoutTest r0;
        com.yahoo.bullet.storm.DSLSpout $r1, $r2;

        r0 := @this: com.yahoo.bullet.storm.DSLSpoutTest;

        $r1 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.DSLSpout dslSpout>;

        virtualinvoke $r1.<com.yahoo.bullet.storm.DSLSpout: void close()>();

        $r2 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.DSLSpout dslSpout>;

        virtualinvoke $r2.<com.yahoo.bullet.storm.DSLSpout: void close()>();

        return;
    }

    public void testAck()
    {
        com.yahoo.bullet.storm.DSLSpoutTest r0;
        com.yahoo.bullet.storm.DSLSpout $r1;

        r0 := @this: com.yahoo.bullet.storm.DSLSpoutTest;

        $r1 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.DSLSpout dslSpout>;

        virtualinvoke $r1.<com.yahoo.bullet.storm.DSLSpout: void ack(java.lang.Object)>(null);

        return;
    }

    public void testFail()
    {
        com.yahoo.bullet.storm.DSLSpoutTest r0;
        com.yahoo.bullet.storm.DSLSpout $r1;

        r0 := @this: com.yahoo.bullet.storm.DSLSpoutTest;

        $r1 = r0.<com.yahoo.bullet.storm.DSLSpoutTest: com.yahoo.bullet.storm.DSLSpout dslSpout>;

        virtualinvoke $r1.<com.yahoo.bullet.storm.DSLSpout: void fail(java.lang.Object)>(null);

        return;
    }
}
