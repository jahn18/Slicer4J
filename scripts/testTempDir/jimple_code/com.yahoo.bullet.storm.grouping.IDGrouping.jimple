public class com.yahoo.bullet.storm.grouping.IDGrouping extends java.lang.Object implements org.apache.storm.grouping.CustomStreamGrouping
{
    private java.util.List tasks;

    public void <init>()
    {
        com.yahoo.bullet.storm.grouping.IDGrouping r0;

        r0 := @this: com.yahoo.bullet.storm.grouping.IDGrouping;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void prepare(org.apache.storm.task.WorkerTopologyContext, org.apache.storm.generated.GlobalStreamId, java.util.List)
    {
        com.yahoo.bullet.storm.grouping.IDGrouping r0;
        java.util.List r1, $r7;
        java.util.stream.Stream $r2, $r4;
        java.util.function.Function $r3;
        java.util.stream.Collector $r5;
        java.lang.Object $r6;
        org.apache.storm.task.WorkerTopologyContext r8;
        org.apache.storm.generated.GlobalStreamId r9;

        r0 := @this: com.yahoo.bullet.storm.grouping.IDGrouping;

        r8 := @parameter0: org.apache.storm.task.WorkerTopologyContext;

        r9 := @parameter1: org.apache.storm.generated.GlobalStreamId;

        r1 := @parameter2: java.util.List;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.stream.Stream stream()>();

        $r3 = staticinvoke <com.yahoo.bullet.storm.grouping.IDGrouping$singletonList__20: java.util.function.Function bootstrap$()>();

        $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r3);

        $r5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r5);

        $r7 = (java.util.List) $r6;

        r0.<com.yahoo.bullet.storm.grouping.IDGrouping: java.util.List tasks> = $r7;

        return;
    }

    public java.util.List chooseTasks(int, java.util.List)
    {
        java.util.List r0, $r4, $r5, $r7;
        java.lang.RuntimeException $r1;
        boolean $z0;
        java.lang.Object r2, $r6;
        com.yahoo.bullet.storm.grouping.IDGrouping r3;
        int $i0, i1, i2;

        r3 := @this: com.yahoo.bullet.storm.grouping.IDGrouping;

        i2 := @parameter0: int;

        r0 := @parameter1: java.util.List;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Tried to emit an empty tuple.");

        throw $r1;

     label2:
        r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = r3.<com.yahoo.bullet.storm.grouping.IDGrouping: java.util.List tasks>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        i1 = staticinvoke <com.yahoo.bullet.storm.StormUtils: int getHashIndex(java.lang.Object,int)>(r2, $i0);

        $r5 = r3.<com.yahoo.bullet.storm.grouping.IDGrouping: java.util.List tasks>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i1);

        $r7 = (java.util.List) $r6;

        return $r7;
    }
}
